<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>IT on 王离谱的小破站</title>
        <link>https://blog.yearsuns.com/categories/it/</link>
        <description>Recent content in IT on 王离谱的小破站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>王离谱</copyright>
        <lastBuildDate>Sun, 09 Feb 2025 20:43:56 +0800</lastBuildDate><atom:link href="https://blog.yearsuns.com/categories/it/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>程序员的自救指南：如何精准描述你的技术问题，让大佬想帮你</title>
        <link>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</link>
        <pubDate>Sun, 09 Feb 2025 20:43:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</guid>
        <description>&lt;p&gt;有时候，程序员的日子就像《荒野求生》，&lt;strong&gt;问题&lt;/strong&gt;就是那条饿着肚子追你的鳄鱼，你呢？跪着发帖：“大佬们救救孩子吧，代码写崩了！”&lt;/p&gt;
&lt;p&gt;结果呢？没人回。&lt;/p&gt;
&lt;p&gt;为什么？&lt;br&gt;
因为你发的帖就像“妈丫，肚子疼！”却忘了告诉医生是&lt;strong&gt;吃撑了、饿坏了、还是中午猛喝了五碗麻辣烫&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;今天，我来教你如何精准描述你的技术问题，让你瞬间从 &lt;strong&gt;“救救孩子”&lt;/strong&gt; 进化到 &lt;strong&gt;“这哥们值得救”&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-1说清楚你在干啥别藏着掖着&#34;&gt;Step 1：说清楚你在干啥，别藏着掖着
&lt;/h3&gt;&lt;p&gt;想让别人帮你？&lt;strong&gt;背景交代到位，别怕麻烦！&lt;/strong&gt;&lt;br&gt;
大佬们不懂你家后院代码都咋跑的。来一段上下文，简洁明了！&lt;/p&gt;
&lt;p&gt;比如，你发帖别写：“Redis 锁续期有问题，快点来！”&lt;br&gt;
改成这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我正在用 Spring Boot + Redisson 实现分布式锁，Spring Boot 版本 3.0.0，Redisson 用的是最新的 3.20.0。问题出在本地单元测试时锁续期失效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大佬看到这，立刻有谱：&lt;strong&gt;哦，这哥们用的是主流技术栈，问题不难搞！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-2问题描述要具体别用感叹号骗大佬注意力&#34;&gt;Step 2：问题描述要具体，别用感叹号骗大佬注意力
&lt;/h3&gt;&lt;p&gt;很多人喜欢放大自己的“惨状”：“完了，炸了，全崩了！”&lt;/p&gt;
&lt;p&gt;可是你连个报错信息都不贴上，难道指望大佬靠读心术帮你？&lt;/p&gt;
&lt;p&gt;错误信息一定要说清楚，关键内容圈出来，别整篇贴，显得像年终总结。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我运行 &lt;code&gt;lock.lock(60, TimeUnit.SECONDS)&lt;/code&gt; 时，日志显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;错误出在锁续期失效，导致任务中途被抢锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看！这样既具体，又不会让人头疼。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3问题复现三板斧连小白也能操作&#34;&gt;Step 3：问题复现三板斧，连小白也能操作
&lt;/h3&gt;&lt;p&gt;技术问题要让别人有地方下手，就像&lt;strong&gt;解锁游戏副本的攻略&lt;/strong&gt;。没法复现的问题，等于在地里找针。&lt;/p&gt;
&lt;p&gt;来个实例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，开启 Redisson 配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待 30 秒后，问题出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;清清楚楚三步走，大佬立刻知道咋搞。再加上你的配置文件、核心代码，&lt;strong&gt;人家手里有锤子，就能敲问题！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-4预期-vs-实际问题得有个对比&#34;&gt;Step 4：预期 vs 实际，问题得有个对比
&lt;/h3&gt;&lt;p&gt;人类（包括程序员）特别爱“对比法”，这会让大佬迅速明白你的痛点在哪里。&lt;/p&gt;
&lt;p&gt;比如这样写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;预期&lt;/strong&gt;：分布式锁应自动续期，确保任务完整执行。&lt;br&gt;
&lt;strong&gt;实际&lt;/strong&gt;：锁未续期，任务执行到一半时锁被释放，导致数据不一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑一目了然！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-5展示你的努力赢得大佬尊重&#34;&gt;Step 5：展示你的努力，赢得大佬尊重
&lt;/h3&gt;&lt;p&gt;大佬们愿意帮有诚意的人。问题描述时，提一提你做过的尝试：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查了 Redis 是否正常启动，结果运行良好。&lt;/li&gt;
&lt;li&gt;调试了 Redisson 配置，&lt;code&gt;useSingleServer&lt;/code&gt; 设置正确。&lt;/li&gt;
&lt;li&gt;改用 &lt;code&gt;tryLock()&lt;/code&gt; 测试，问题依然存在。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样一来，大佬心里一暖：“这哥们不是等着躺平，他是真心要解决问题！”&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;6-加点小细节补充大佬的弹药库&#34;&gt;6. 加点小细节，补充大佬的“弹药库”
&lt;/h3&gt;&lt;p&gt;最后再补上必要信息，比如操作系统、开发环境、核心代码片段。别一来就上百行代码，关键的几行就行了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心代码&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RLock lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redissonClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;getLock&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testLock&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lock.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(60, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 问题出现在这里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;完美示例把大佬整哭了的求助帖&#34;&gt;&lt;strong&gt;完美示例：把大佬整哭了的求助帖&lt;/strong&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：&lt;br&gt;
我正在用 Spring Boot + Redisson 实现分布式锁，版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot：3.0.0&lt;/li&gt;
&lt;li&gt;Redisson：3.20.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：&lt;br&gt;
单元测试中，锁无法自动续期，导致任务中途锁被释放。日志错误如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，使用默认配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待超过 30 秒的锁超时时间，问题复现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;预期 vs 实际&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预期：分布式锁自动续期，任务顺利完成。&lt;/li&gt;
&lt;li&gt;实际：锁未续期，导致任务执行到一半被中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查 Redis 是否正常运行，结果正常。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;tryLock()&lt;/code&gt; 方法测试，问题依然存在。&lt;/li&gt;
&lt;li&gt;增加日志查看续期机制，发现续期任务未触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;补充信息&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;li&gt;Redisson 配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Config config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Config();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config.&lt;span style=&#34;color:#a6e22e&#34;&gt;useSingleServer&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;setAddress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis://127.0.0.1:6379&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;程序员求助的秘诀&lt;/strong&gt;，在于精准、简洁和条理清晰。&lt;br&gt;
记住，这不仅仅是给别人看的，也是在训练自己的问题分析能力。&lt;/p&gt;
&lt;p&gt;当你学会准确描述问题的那天，你离解决问题已经不远了！&lt;/p&gt;
&lt;p&gt;最后，祝大家都能成为被大佬们“抢着帮”的技术王者～&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JWT的最佳实践</title>
        <link>https://blog.yearsuns.com/p/best-practices-of-jwt/</link>
        <pubDate>Fri, 07 Feb 2025 20:25:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/best-practices-of-jwt/</guid>
        <description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;
在当今的 web 开发中，身份验证是非常关键的，而 JWT（JSON Web Token）作为一种简单、高效的身份验证方式，已经被广泛应用在许多前后端分离的项目中。本篇文章将带你从零开始理解 JWT，探讨它的优缺点，并介绍最佳实践。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;什么是-jwt&#34;&gt;什么是 JWT？
&lt;/h3&gt;&lt;p&gt;JWT 是一种开放标准（RFC 7519），用于在不同系统之间安全地传递信息。简单来说，JWT 主要用于认证和信息交换，常见的应用场景就是用户登录验证。JWT 通常在用户登录后生成，并随后的请求中带着它来进行身份认证。&lt;/p&gt;
&lt;h4 id=&#34;jwt-结构&#34;&gt;JWT 结构
&lt;/h4&gt;&lt;p&gt;JWT 的结构非常简单，它由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;头部（Header）&lt;/strong&gt;&lt;br&gt;
头部通常包含两部分内容：令牌类型（JWT）和签名算法（如 HMAC SHA256 或 RSA）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷（Payload）&lt;/strong&gt;&lt;br&gt;
载荷是 JWT 的“正文”部分，存储了你希望传递的数据（比如用户 ID 或权限）。这里面包含了 &amp;ldquo;Claims&amp;rdquo;（声明），有三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册声明&lt;/strong&gt;：如 &lt;code&gt;sub&lt;/code&gt;（主题）、&lt;code&gt;exp&lt;/code&gt;（过期时间）、&lt;code&gt;iat&lt;/code&gt;（签发时间）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公共声明&lt;/strong&gt;：可以自定义的数据，但需要避免冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有声明&lt;/strong&gt;：你自己定义的声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名（Signature）&lt;/strong&gt;&lt;br&gt;
签名部分用于验证信息的完整性，确保数据没有被篡改。生成签名的方式是：用头部和载荷，通过密钥（对于对称加密是一个密钥，非对称加密是私钥）生成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的生成和验证原理&#34;&gt;JWT 的生成和验证原理
&lt;/h3&gt;&lt;h4 id=&#34;jwt-的生成过程&#34;&gt;JWT 的生成过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户登录&lt;/strong&gt;：&lt;br&gt;
用户输入用户名和密码，通过认证系统登录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器生成 JWT&lt;/strong&gt;：&lt;br&gt;
认证成功后，服务器会使用一个密钥（对称加密）或者私钥（非对称加密）生成一个 JWT。生成过程包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将头部和载荷（即数据）部分通过 Base64 编码。&lt;/li&gt;
&lt;li&gt;用密钥对这两部分进行签名，生成签名部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成后的 JWT 看起来像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;header.payload.signature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt.png&#34;
	width=&#34;1222&#34;
	height=&#34;901&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_96e6486fee1b5af3.png 480w, https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_7fcaf8bf5bb0946f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;jwt构成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回 JWT 给客户端&lt;/strong&gt;：&lt;br&gt;
服务器把生成的 JWT 返回给客户端，通常客户端会将其存储在本地（如 LocalStorage 或 Cookie）中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jwt-的验证过程&#34;&gt;JWT 的验证过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户端发起请求&lt;/strong&gt;：&lt;br&gt;
客户端每次请求时，会将 JWT 添加到请求的 Authorization 头部中（例如：&lt;code&gt;Authorization: Bearer &amp;lt;JWT&amp;gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器验证 JWT&lt;/strong&gt;：&lt;br&gt;
服务器拿到 JWT 后，通过以下步骤来验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析 JWT 的头部、载荷和签名。&lt;/li&gt;
&lt;li&gt;使用密钥（对于对称加密）或公钥（对于非对称加密）对签名部分进行验证，看是否与头部和载荷部分匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果验证通过，说明 JWT 的数据未被篡改，服务器就会继续处理请求。如果验证失败，说明 JWT 被篡改，服务器会返回错误信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的优点&#34;&gt;JWT 的优点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无状态（Stateless）&lt;/strong&gt;&lt;br&gt;
JWT 是无状态的，意味着服务器不需要存储用户会话数据。每次请求都包含 JWT，服务器可以根据 JWT 里的信息来进行认证。这样减少了服务器的负担，提升了系统的扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨域支持&lt;/strong&gt;&lt;br&gt;
由于 JWT 是由客户端传递，它非常适合前后端分离的项目，可以跨域进行身份验证，避免了传统 Cookie 的同源限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;br&gt;
JWT 的大小较小，通常在几十到一百多个字节之间，非常适合频繁的 HTTP 请求，传输效率高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适合微服务架构&lt;/strong&gt;&lt;br&gt;
JWT 可以在多个服务之间传递身份信息，非常适合分布式架构，尤其是微服务架构中的身份认证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的缺点&#34;&gt;JWT 的缺点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无法撤销&lt;/strong&gt;&lt;br&gt;
一旦 JWT 被发放出去，它就无法撤销。如果 JWT 泄露，攻击者可以在有效期内反复使用。这比传统的 Session 认证要危险，后者可以在服务器端主动注销会话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储和安全问题&lt;/strong&gt;&lt;br&gt;
JWT 如果存储不当（如保存在 LocalStorage 或 Cookie 中），可能会受到 XSS 攻击。如果攻击者能够获取到 JWT，就能伪造合法请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过期问题&lt;/strong&gt;&lt;br&gt;
JWT 通常设定有过期时间，一旦过期，就不能再使用。为了避免频繁登录，可以使用刷新令牌（Refresh Token）。不过如果过期时间设置不合理，可能会影响用户体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷不加密&lt;/strong&gt;&lt;br&gt;
JWT 的载荷部分是 Base64 编码的，不是加密的。任何人都可以解码并看到其中的内容。因此，切勿将敏感信息（如密码）存储在 JWT 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥泄漏的风险&lt;/strong&gt;&lt;br&gt;
JWT 的安全性依赖于密钥的保密性。如果密钥泄露，攻击者可以伪造有效的 JWT。因此，保护好密钥非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的使用场景&#34;&gt;JWT 的使用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单点登录（SSO）&lt;/strong&gt;&lt;br&gt;
JWT 非常适合实现跨应用的单点登录（SSO）。只需生成一次 JWT，就可以在多个系统之间共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移动应用身份认证&lt;/strong&gt;&lt;br&gt;
在移动应用中，JWT 常常用来进行身份验证。客户端存储 JWT，并在每次请求中发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前后端分离的应用&lt;/strong&gt;&lt;br&gt;
在前后端分离的架构中，前端和后端可以独立进行身份验证，使用 JWT 作为认证工具，避免了传统 Cookie 的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的最佳实践&#34;&gt;JWT 的最佳实践
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不要在 JWT 中存储敏感信息&lt;/strong&gt;&lt;br&gt;
由于 JWT 的载荷部分是可以解码的，敏感信息（如密码、银行卡信息）绝对不能存储在 JWT 中。你可以把这些信息存储在服务器端，JWT 只传递一个标识符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 HTTPS&lt;/strong&gt;&lt;br&gt;
无论是生成 JWT 还是传输 JWT，都应使用 HTTPS 协议，确保数据在传输过程中不会被窃听或篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置合理的过期时间&lt;/strong&gt;&lt;br&gt;
JWT 的过期时间要设置合理。过短可能影响用户体验，过长则可能存在安全隐患。通常，访问令牌的过期时间可以设置为 15 分钟到 1 小时，刷新令牌可以设置较长时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用刷新令牌&lt;/strong&gt;&lt;br&gt;
结合使用访问令牌（Access Token）和刷新令牌（Refresh Token）。当访问令牌过期时，客户端可以使用刷新令牌获取新的访问令牌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储 JWT 的安全性&lt;/strong&gt;&lt;br&gt;
如果你把 JWT 存储在浏览器中，推荐使用 HttpOnly 和 Secure 标志的 Cookie，以避免 XSS 攻击的风险。避免将 JWT 存储在 LocalStorage 中，因为它更容易受到 XSS 攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名算法选择&lt;/strong&gt;&lt;br&gt;
在选择签名算法时，推荐使用非对称加密的算法（如 RS256 或 ES256），而不是对称加密的算法（如 HS256），这样可以提高安全性，避免密钥泄露风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥管理&lt;/strong&gt;&lt;br&gt;
密钥是 JWT 安全的关键。无论是对称加密还是非对称加密，都应该采取安全措施保护密钥。避免将密钥硬编码在代码中，可以通过环境变量或专门的密钥管理工具来管理密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;JWT 是一种非常流行的身份验证方式，它简单、轻量、无状态，非常适合现代 web 应用，尤其是前后端分离的项目。但它也有一些缺点，尤其是在密钥泄漏和无法撤销的场景下。因此，使用 JWT 时需要特别注意密钥的管理和安全配置，合理设置过期时间，避免将敏感信息存储在 JWT 中。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
