<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>IT on 王离谱的小破站</title>
        <link>https://blog.yearsuns.com/categories/it/</link>
        <description>Recent content in IT on 王离谱的小破站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>王离谱</copyright>
        <lastBuildDate>Wed, 12 Feb 2025 01:13:56 +0800</lastBuildDate><atom:link href="https://blog.yearsuns.com/categories/it/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>REST API的最佳实践</title>
        <link>https://blog.yearsuns.com/p/best-practices-for-rest-api/</link>
        <pubDate>Wed, 12 Feb 2025 01:13:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/best-practices-for-rest-api/</guid>
        <description>&lt;h2 id=&#34;我们将从这篇文章中学到什么&#34;&gt;我们将从这篇文章中学到什么
&lt;/h2&gt;&lt;h3 id=&#34;-rest-api-的基本原则&#34;&gt;👉 REST API 的基本原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RESTful架构的核心概念&lt;/li&gt;
&lt;li&gt;关键 HTTP 方法及其适当用途&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-api-设计的最佳实践&#34;&gt;👉 API 设计的最佳实践
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何设计有意义且高效的面向资源的 URL。&lt;/li&gt;
&lt;li&gt;正确使用标准 HTTP 状态代码的重要性。&lt;/li&gt;
&lt;li&gt;实现过滤、排序和分页的技术。&lt;/li&gt;
&lt;li&gt;需要清晰、一致的 API 文档和工具来帮助实现这一点。&lt;/li&gt;
&lt;li&gt;有效的 API 版本控制策略，以确保向后兼容性。&lt;/li&gt;
&lt;li&gt;保护 API 安全的最佳实践，包括身份验证和 HTTPS。&lt;/li&gt;
&lt;li&gt;如何以用户友好且信息丰富的方式处理错误。&lt;/li&gt;
&lt;li&gt;维护 RESTful 原则和避免常见错误的实用技巧。&lt;/li&gt;
&lt;li&gt;对设计可扩展且直观的 API 的见解。&lt;/li&gt;
&lt;li&gt;API 设计中的常见陷阱以及如何避免它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-实用的注意事项&#34;&gt;👉 实用的注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;维护 RESTful 原则和避免常见错误的实用技巧。&lt;/li&gt;
&lt;li&gt;对设计可扩展且直观的 API 的见解。&lt;/li&gt;
&lt;li&gt;API 设计中的常见陷阱以及如何避免它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是-api&#34;&gt;什么是 API？
&lt;/h2&gt;&lt;p&gt;应用程序编程接口 (API) 是用于集成应用软件和服务的一组工具、定义和协议。它可以让您的产品和服务与其他产品和服务进行通信，而无需不断构建新的连接基础设施。&lt;/p&gt;
&lt;p&gt;API 可以是私有的（仅供内部使用）、合作的（与特定合作伙伴共享以提供额外的收入来源）或公开的（允许第三方开发与您的 API 交互的应用程序以促进创新）。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/en/topics/api/what-is-a-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.redhat.com/en/topics/api/what-is-a-rest-api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是-rest-api&#34;&gt;什么是 REST API？
&lt;/h2&gt;&lt;p&gt;REST API（也称为 RESTful API）是一种符合 REST 架构风格约束并允许与 RESTful Web 服务交互的应用程序编程接口（API 或 Web API）。REST 代表表述性状态转移，由计算机科学家 Roy Fielding 创建。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/en/topics/api/what-is-a-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.redhat.com/en/topics/api/what-is-a-rest-api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;rest-api-架构约束&#34;&gt;REST API 架构约束
&lt;/h2&gt;&lt;p&gt;REST 是一组架构约束，而不是协议或标准。以下是理想 RESTful API 的约束：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端-服务器架构&lt;/strong&gt;：由客户端、服务器和资源组成的客户端-服务器架构，请求通过 HTTP 进行管理。只要服务器和客户端之间的接口不变，它们也可以被替换和独立开发（也可以使用不同的编程语言）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态&lt;/strong&gt;：在客户端-服务器通信中，在处理请求传输期间，服务器上不应存储任何数据。这意味着请求之间不会存储任何客户端信息，并且每个请求都是独立且无关联的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可缓存&lt;/strong&gt;：客户端应该能够将响应存储在缓存中。这极大地提高了 API 的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层系统&lt;/strong&gt;：服务器可以有多个层级来实现。这种分层架构有助于通过实现负载平衡来提高可扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需代码&lt;/strong&gt;：此约束是可选的。此约束表示可以通过允许从服务器下载代码并执行代码来在运行时扩展客户端应用程序的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一接口&lt;/strong&gt;：统一接口约束是任何 RESTful 系统设计的基础。它简化并解耦了架构，使每个部分能够独立发展。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这个统一接口的四个约束是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求中的资源标识&lt;/strong&gt;：使用 URI 在请求中标识单个资源。资源本身在概念上与返回给客户端的表示形式是分开的。例如，服务器可以将数据库中的数据以 HTML、XML 或 JSON 的形式发送，而这些都不是服务器的内部表示形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过表示来操作资源&lt;/strong&gt;：当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除资源的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自描述消息&lt;/strong&gt;：每条消息都包含足够的信息来描述如何处理该消息。例如，可以通过媒体类型指定要调用哪个解析器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超媒体作为应用程序状态引擎 (HATEOAS)&lt;/strong&gt; — 访问 REST 应用程序的初始 URI 后（类似于人类 Web 用户访问网站主页），REST 客户端应该能够动态使用服务器提供的链接来发现所需的所有可用资源。随着访问的进行，服务器将使用包含指向当前可用的其他资源的超链接的文本进行响应。客户端无需使用有关服务器结构的信息进行硬编码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;来源：&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/REST#Uniform_interface&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/REST#Uniform_interface&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是资源&#34;&gt;什么是资源？
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;REST中信息的关键抽象是资源。任何可以命名的信息都可以是资源：文档或图像、时间服务（例如“洛杉矶今日天气”）、其他资源的集合（例如“今日畅销产品”，即产品资源的集合）、非虚拟对象（例如人）等等。&lt;/p&gt;
&lt;p&gt;— &lt;a class=&#34;link&#34; href=&#34;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Roy Fielding 的论文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;单例和集合资源&#34;&gt;单例和集合资源
&lt;/h3&gt;&lt;p&gt;资源可以是单例，也可以是集合。&lt;/p&gt;
&lt;p&gt;例如，&amp;ldquo;customers&amp;rdquo; 是一个集合资源，&amp;ldquo;customer&amp;rdquo; 是一个单例资源。&lt;/p&gt;
&lt;p&gt;我们可以使用 URI 来识别 &amp;ldquo;customers&amp;rdquo; 集合资源。我们可以使用 URI 来&lt;code&gt;/customers&lt;/code&gt;识别单个 &amp;ldquo;customer&amp;rdquo; 资源&lt;code&gt;/customers/{customerId}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/customers // 是一个集合资源
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/customers/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; // 是一个单例资源
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;集合和子集资源&#34;&gt;集合和子集资源
&lt;/h3&gt;&lt;p&gt;资源也可能包含子集资源。&lt;/p&gt;
&lt;p&gt;例如，可以使用以下方式识别特定 &amp;ldquo;customers&amp;rdquo; 的子集资源 &amp;ldquo;account&amp;rdquo; &lt;code&gt;/customers/{customerId}/accounts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;类似地，可以识别子集合资源 &amp;ldquo;accounts&amp;rdquo; 内的单例资源 &amp;ldquo;account&amp;rdquo; &lt;code&gt;/customers/{customerId}/accounts/{accountId}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;/customers //是一个集合资源&lt;/p&gt;
&lt;p&gt;/customers/{ id }/accounts //是一个子集合资源（客户的帐户）&lt;/p&gt;
&lt;p&gt;/customers/{customerId}/accounts/{accountId} //是一个单例资源（客户的特定帐户）&lt;/p&gt;
&lt;h2 id=&#34;uri统一资源标识符&#34;&gt;URI（统一资源标识符）
&lt;/h2&gt;&lt;p&gt;URI 代表&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;统一资源标识符&lt;/a&gt;(URI)。它标识网络上的逻辑或物理资源。URL 和 URN 是 URI 的子类型。URL 定位资源，而 URN 命名资源。&lt;/p&gt;
&lt;p&gt;REST API 使用 URI 来定位资源。REST API 设计人员应创建 URI，以便将 REST API 的资源模型传达给 API 的潜在客户。如果资源命名得当，API 就会直观且易于使用。如果命名不当，同一个 API 的使用和理解就会变得困难。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri.webp&#34;
	width=&#34;720&#34;
	height=&#34;177&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri_hu_fba245286d270c77.webp 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/uri_hu_179c012895a3cc30.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;URI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;406&#34;
		data-flex-basis=&#34;976px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url.webp&#34;
	width=&#34;720&#34;
	height=&#34;271&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url_hu_efb5016e88ace6ee.webp 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url_hu_8039dcaf63480cdb.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;URI 与 URL 之间的区别（来源：https://refine.dev/blog/uri-vs-url/#introduction）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;265&#34;
		data-flex-basis=&#34;637px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;最佳实践应该做的和不应该做的&#34;&gt;最佳实践：应该做的和不应该做的
&lt;/h2&gt;&lt;h3 id=&#34;1-使用适当的-http-方法动词定义-api-操作&#34;&gt;1. 使用适当的 HTTP 方法（动词）定义 API 操作
&lt;/h3&gt;&lt;p&gt;HTTP协议定义了许多为请求赋予语义的方法。大多数 RESTful Web API 使用的常见 HTTP 方法包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;在指定的 URI 处检索资源的表述，响应消息的主体包含所请求资源的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;在指定的 URI 处创建新资源，请求消息的主体提供了新资源的详细信息。注意：POST还可用于触发不实际创建资源的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt;在指定的 URI 处创建或替换资源，请求消息的主体指定要创建或更新的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;对资源执行部分更新，请求主体指定要应用于资源的一组更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt;删除指定 URI 处的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特定请求的效果应取决于资源是集合还是单个项目。下表使用电子商务示例总结了大多数 RESTful 实现所采用的通用约定。&lt;/p&gt;
&lt;p&gt;注意：并非所有这些请求都可能被实现——这取决于具体情况。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Resource&lt;/th&gt;
          &lt;th&gt;POST&lt;/th&gt;
          &lt;th&gt;GET&lt;/th&gt;
          &lt;th&gt;PUT&lt;/th&gt;
          &lt;th&gt;DELETE&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers&lt;/td&gt;
          &lt;td&gt;Create a new customer&lt;/td&gt;
          &lt;td&gt;Retrieve all customers&lt;/td&gt;
          &lt;td&gt;Bulk update of customers&lt;/td&gt;
          &lt;td&gt;Remove all customers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers/1&lt;/td&gt;
          &lt;td&gt;Error&lt;/td&gt;
          &lt;td&gt;Retrieve the details for customer 1&lt;/td&gt;
          &lt;td&gt;Update the details of customer 1 if it exists&lt;/td&gt;
          &lt;td&gt;Remove customer 1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers/1/orders&lt;/td&gt;
          &lt;td&gt;Create a new order for customer 1&lt;/td&gt;
          &lt;td&gt;Retrieve all orders for customer 1&lt;/td&gt;
          &lt;td&gt;Bulk update of orders for customer 1&lt;/td&gt;
          &lt;td&gt;Remove all orders for customer 1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;、&lt;strong&gt;PUT&lt;/strong&gt;和&lt;strong&gt;PATCH&lt;/strong&gt;之间的区别可能会令人困惑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;POST请求创建资源并将其添加到资源集合中。然后向客户端返回新创建的资源 URI。POST请求还可用于向现有资源提交数据以供处理，而无需创建任何新资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PUT请求会创建资源或更新现有资源。请求正文包含资源的完整表述。如果具有此 URI 的资源已存在，则将其替换。否则，如果服务器支持，则创建新资源。PUT请求最常应用于作为单个项目（例如特定客户）的资源，而不是集合。服务器可能支持更新但不支持通过 PUT 创建。是否支持通过 PUT 创建取决于客户端是否可以在资源存在之前有意义地为其分配URI。如果不能，则使用POST创建资源，使用PUT或PATCH进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PATCH请求对现有资源执行部分更新。请求正文指定要应用于资源的一组更改。这比使用PUT更高效，因为客户端仅发送更改，而不是资源的整个表示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PUT请求必须是幂等的。如果客户端多次提交相同的PUT请求，则结果应该始终相同（将使用相同的值修改相同的资源）。POST和PATCH请求不保证是幂等的。&lt;/p&gt;
&lt;h3 id=&#34;2-使用名词复数名词表示资源&#34;&gt;2. 使用名词（复数名词）表示资源
&lt;/h3&gt;&lt;p&gt;RESTful URI 应该引用作为事物（名词）的资源，而不是引用动作（动词），因为名词具有动词所不具备的属性 — 同样，资源也具有属性。以下是一些资源示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户(user)&lt;/li&gt;
&lt;li&gt;帐户(account)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其资源URI可以设计如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;HTTP Method&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/accounts&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of accounts&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/accounts/{accountNumber}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns the account with account number &lt;code&gt;{accountNumber}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/users&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of users&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/users/{id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns the user with ID &lt;code&gt;{id}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/orders&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Good&lt;/strong&gt; - Returns a list of orders&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/create-order&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Avoid&lt;/strong&gt; - verb or action-based names&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/students&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Good&lt;/strong&gt; - Returns a list of students&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/student&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Avoid&lt;/strong&gt; - singular names&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3使用子资源建立关系&#34;&gt;3.使用子资源建立关系
&lt;/h3&gt;&lt;p&gt;使用一致的资源命名约定和 URI 格式，以最大程度地减少歧义并实现最大的可读性和可维护性。实施以下设计提示可实现一致性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 REST 中，关系通常由子资源建模。对子资源使用以下模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;HTTP Method&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a list of sub-resources&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}/{sub-resource-id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a specific sub-resource&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;POST&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Creates a new sub-resource&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a list of comments for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments/{comment-id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a specific comment for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;POST&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Creates a new comment for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/cars/711/drivers/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of drivers for car 711&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/cars/711/drivers/4&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns driver #4 for car 711&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4注重可读性和一致性&#34;&gt;4.注重可读性和一致性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不要在 URI 中使用尾部斜杠 (/)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices /*✅这是一个更好的版本*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用连字符 (-) 和短横线命名 ( some-var-name) 来提高 URI 的可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /devicemanagement/manageddevices/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices /*✅这是一个更好的版本* / 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /m y -folder/ my -doc // ✅ 推荐
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /MY-FOLDER/ my -doc // ❌ 避免
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /My-Folder/ my -doc // ❌ 避免
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;避免使用下划线 ( _ ) 和驼峰式命名 ( someVarName) 蛇形命名 ( some_var_name) 帕萨尔式命名 ( SomeVarName)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managed-entities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/install-script-location // ✅ 更易读
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managed_entities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/install_Script_Location // ❌ 蛇形命名法- 易读但不常规
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managedEntities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/installScriptLocation // ❌ 驼峰命名法- 可读性较差
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不要使用文件扩展名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/device-management/managed-devices.xml /*❌请勿使用它*/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/device-management/managed-devices /*✅这是正确的 URI*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;切勿在 URI 中使用CRUD函数名称&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* ❌ 避免 */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET / get -managed-devices      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP POST /create-managed-devices 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* ✅ 推荐 */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET /managed-devices          // 获取所有设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP POST /managed-devices          // 创建新设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 获取给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP PUT /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 更新给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP DELETE /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 删除给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不要在 URI 中使用动词&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /scripts/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/execute    // ❌ 不要这样做！- 这是 RPC，而不是 REST
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POST /scripts               // ✅ 推荐：使用 POST 操作创建脚本
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /scripts/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/status    // 检查执行状态
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5使用http响应状态码&#34;&gt;5.使用HTTP响应状态码
&lt;/h3&gt;&lt;p&gt;始终使用常规 HTTP 状态码来响应对 API 发出的请求。这将帮助用户了解发生了什么 — 请求是否成功，是否失败，或者其他情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes.png&#34;
	width=&#34;1224&#34;
	height=&#34;1710&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes_hu_f882e7cc374d92cd.png 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes_hu_e1355992283e7479.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;HTTP状态码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;6使用过滤排序和分页来检索请求的数据&#34;&gt;6.使用过滤、排序和分页来检索请求的数据
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Feature&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Example Usage&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Sorting&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Allows sorting of the dataset based on specified parameters.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?sort=rank_asc&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Filtering&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Filters the dataset based on given criteria in query parameters.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?category=banking&amp;amp;location=india&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Searching&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Searches for specific terms within the dataset.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?search=Digital&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Pagination&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Divides the dataset into smaller chunks for easier handling and improved performance.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?page=23&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7-使用-hateoas-实现到相关资源的导航&#34;&gt;7. 使用 HATEOAS 实现到相关资源的导航
&lt;/h3&gt;&lt;p&gt;HATEOAS（超文本作为应用程序状态引擎）是 REST 的一个原则，允许客户端仅通过响应中提供的超链接来浏览资源并发现可用的操作。这意味着客户端不需要事先了解 URI；相反，每个 HTTP GET 请求都会返回必要的信息和相关资源的链接，从而实现对 API 的动态探索。&lt;/p&gt;
&lt;p&gt;在示例响应中，&lt;code&gt;/books/1&lt;/code&gt;分享可导航的链接，例如&lt;code&gt;/authors/1&lt;/code&gt; &lt;code&gt;/books/1/reviews&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;“books” ： [ &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“id” ： 1 ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“title” ： “了不起的盖茨比” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “F·斯科特·菲茨杰拉德” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“links” ： { &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“self” ： “/books/1” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “/authors/1” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“reviews” ： “/books/1/reviews” &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ae81ff&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“id” ： 2 ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“title” ： “杀死一只知更鸟” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “哈珀·李” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“links” ： { &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“self” ： “/books/2” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “/authors/2” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“reviews” ： “/books/2/reviews” &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ] 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;8-使用-ssl-确保安全&#34;&gt;8. 使用 SSL 确保安全
&lt;/h3&gt;&lt;p&gt;SSL（安全套接字层）对于保护 REST API 免受恶意攻击至关重要。它确保服务器和客户端之间的通信是私密的，并且用户只能访问他们有权查看的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&lt;/code&gt; 我们可以通过查看URL来判断 REST API 是否受 SSL 保护。例如，&lt;code&gt;https://mysite.com/posts&lt;/code&gt; 受 SSL 保护，而 &lt;code&gt;http://mysite.com/posts&lt;/code&gt; 不受 SSL 保护。&lt;/p&gt;
&lt;h3 id=&#34;9提供准确的api文档&#34;&gt;9.提供准确的API文档
&lt;/h3&gt;&lt;p&gt;良好的 API 文档可帮助开发人员正确使用我们的 API。它可以让更多人想要使用我们的 API 并更好地使用它。一个流行的 API &lt;a class=&#34;link&#34; href=&#34;https://www.openapis.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档工具是OpenAPI ( Swagger )&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-restful-web-api-版本控制&#34;&gt;10. RESTful Web API 版本控制
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Versioning Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Example Usage&lt;/th&gt;
          &lt;th&gt;Real-World Examples&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;URI Path&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Includes the version number directly in the API path.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://www.example.com/api/v1/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://www.example.com/api/v2/products&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://developer.twitter.com/en/docs/twitter-api/versioning&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;- &lt;a class=&#34;link&#34; href=&#34;https://developer.paypal.com/docs/api/overview/#get-credentials&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PayPal&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;- &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/translate/docs/reference/rest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Translate&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Query Parameters&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Specifies the version number as a query parameter in the URL.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://www.example.com/api/products?version=1&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://www.example.com/api/products?version=2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/translate/docs/reference/rest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Translation APIs&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Custom Headers&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Uses custom headers to specify the API version.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;X-API-VERSION=1&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;X-API-VERSION=2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Content Negotiation&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Uses the &lt;code&gt;Accept&lt;/code&gt; header to specify the version of the API.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;Accept=application/vnd.javaguides-v1+json&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;Accept=application/vnd.javaguides-v2+json&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/rest/overview/resources-in-the-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;11-api-安全和访问控制&#34;&gt;11. API 安全和访问控制
&lt;/h3&gt;&lt;p&gt;确保 API 安全并控制谁可以使用它是制作优质 RESTful API 的关键部分。以下是一些实现此目的的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置 &lt;a class=&#34;link&#34; href=&#34;https://oauth.net/2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OAuth 2.0&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON Web Tokens (JWT)&lt;/a&gt;，以便未经身份验证的用户无法访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 密钥显示谁在使用。API速率限制可阻止人们过度使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现基于角色的访问控制（RBAC）等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-不要忘记-api-性能&#34;&gt;12. 不要忘记 API 性能
&lt;/h3&gt;&lt;p&gt;让我们的 API 更好地发挥作用是让用户满意、降低成本和更轻松地发展的关键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据压缩方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理批处理操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测量 API 性能并分析 API 使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控 API 健康和正常运行时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试 RESTful API（单元测试、集成测试、负载测试、安全测试）等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;优秀的 REST API 是通过遵循关键规则和最佳实践来构建的。&lt;/p&gt;
&lt;p&gt;通过遵守这些规则，我们将构建易于使用、可靠且面向未来的 API。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：本文译自 &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@syedabdullahrahman/mastering-rest-api-design-essential-best-practices-dos-and-don-ts-for-2024-dd41a2c59133&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/@syedabdullahrahman/mastering-rest-api-design-essential-best-practices-dos-and-don-ts-for-2024-dd41a2c59133&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>如何向技术大佬请教问题且不泄露敏感信息</title>
        <link>https://blog.yearsuns.com/p/protecting-sensitive-data-while-seeking-help/</link>
        <pubDate>Mon, 10 Feb 2025 11:43:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/protecting-sensitive-data-while-seeking-help/</guid>
        <description>&lt;p&gt;在技术圈中，请教问题是提升技能的重要途径。但有时候，我们的问题可能涉及敏感信息，比如项目代码、业务逻辑、客户数据等。如果不注意，很可能因为无意的泄露造成不必要的风险。那么，如何在请教问题时保护敏感信息？本文将从识别敏感信息、避免泄露以及高效沟通三个方面详细阐述。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是敏感信息如何识别&#34;&gt;什么是敏感信息？如何识别？
&lt;/h2&gt;&lt;p&gt;敏感信息通常是指那些一旦泄露，可能导致安全问题、商业损失或隐私风险的数据。在技术领域，敏感信息的范围可能更广。&lt;/p&gt;
&lt;h3 id=&#34;常见的敏感信息类型&#34;&gt;常见的敏感信息类型
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;个人身份信息（PII）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括用户名、密码、电子邮件地址、电话号码、身份证号等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公司内部信息&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务逻辑、未发布的产品功能、技术架构设计。&lt;/li&gt;
&lt;li&gt;内部工具的配置文件，例如 API 密钥、数据库连接字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户或用户数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括用户订单记录、支付信息、行为分析数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源码或配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 仓库中的代码、生产环境配置，尤其是涉及商业机密或专利内容的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器与网络信息&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址、端口号、服务器配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何判断信息是否敏感&#34;&gt;如何判断信息是否敏感？
&lt;/h3&gt;&lt;p&gt;以下几种方法可以帮助你快速判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问自己：一旦泄露，会有何后果？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果信息泄露可能导致系统被攻击、用户隐私被暴露或公司竞争力下降，那么它就是敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公司政策与行业规范&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司通常有信息安全政策，参考其中的敏感信息定义。例如 GDPR 或 CCPA 明确规定了需要保护的用户数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用经验法则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;凡是你需要登录权限才能访问的内容，默认认为是敏感的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何避免在请教问题时泄露敏感信息&#34;&gt;如何避免在请教问题时泄露敏感信息？
&lt;/h2&gt;&lt;h3 id=&#34;1-替换敏感信息&#34;&gt;1. 替换敏感信息
&lt;/h3&gt;&lt;p&gt;在描述问题时，尽量将敏感信息替换为通用或伪造的示例数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户名和密码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始数据：&lt;code&gt;admin:password123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换为：&lt;code&gt;example_user:example_password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 密钥&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始数据：&lt;code&gt;sk_live_1234567890abcdef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换为：&lt;code&gt;sample_private_key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;具体代码片段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果必须分享代码，先删除或模糊掉与业务相关的逻辑，只保留问题核心。&lt;/li&gt;
&lt;li&gt;例如：将实际的 SQL 查询 &amp;ldquo;&lt;code&gt;SELECT * FROM users WHERE role = &#39;admin&#39;&lt;/code&gt;&amp;rdquo; 替换为 &amp;ldquo;&lt;code&gt;SELECT * FROM table WHERE condition&lt;/code&gt;&amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-提供抽象问题&#34;&gt;2. 提供抽象问题
&lt;/h3&gt;&lt;p&gt;把具体问题抽象成通用场景，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原问题：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的支付系统对接某银行接口时，总是返回 403 错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抽象后：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用 RESTful API 调用第三方支付接口时，返回 403 错误，怀疑是签名问题。这种情况应该如何排查？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样既避免暴露具体的支付对接信息，也能得到相同的技术解答。&lt;/p&gt;
&lt;h3 id=&#34;3-使用代码片段工具&#34;&gt;3. 使用代码片段工具
&lt;/h3&gt;&lt;p&gt;推荐在分享代码时使用 GitHub Gist、CodeSandbox 或 Pastebin，设置合适的访问权限，并在分享前检查敏感信息是否已被清理。&lt;/p&gt;
&lt;h3 id=&#34;4-避免提供生产环境数据&#34;&gt;4. 避免提供生产环境数据
&lt;/h3&gt;&lt;p&gt;无论如何，都不要直接复制生产环境的数据（如日志、数据库记录）。如需调试，可使用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成伪数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 Faker.js、Mock.js 等工具生成假数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;脱敏真实数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换关键字段，例如将用户姓名替换为 &amp;ldquo;John Doe&amp;rdquo;，将手机号替换为 &amp;ldquo;1234567890&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-与大佬确认是否方便回答&#34;&gt;5. 与大佬确认是否方便回答
&lt;/h3&gt;&lt;p&gt;在提出问题之前，简要说明你的问题背景，让对方判断是否需要了解更多细节。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我遇到了一个数据库连接超时的问题，已排查了网络和配置部分。如果方便，我可以提供一个精简后的环境复现代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这样的方式，大佬可以决定是否需要深入了解。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;高效沟通的小技巧&#34;&gt;高效沟通的小技巧
&lt;/h2&gt;&lt;p&gt;即便保护好敏感信息，也需要提高沟通效率，让对方快速理解你的问题。&lt;/p&gt;
&lt;h3 id=&#34;1-结构化描述问题&#34;&gt;1. 结构化描述问题
&lt;/h3&gt;&lt;p&gt;使用以下模板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**问题背景：**简述你的技术环境和需求。&lt;/li&gt;
&lt;li&gt;**预期结果：**你希望系统如何运行。&lt;/li&gt;
&lt;li&gt;**实际结果：**当前系统的表现。&lt;/li&gt;
&lt;li&gt;**尝试过的解决方法：**列出你已排查的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**背景：**我们使用的是 Spring Boot + PostgreSQL，部署在 AWS 上。&lt;/p&gt;
&lt;p&gt;**预期：**希望通过 JPA 查询接口返回分页数据。&lt;/p&gt;
&lt;p&gt;**实际：**查询时总是超时，尤其在大数据量场景下。&lt;/p&gt;
&lt;p&gt;**尝试：**调整了分页大小和索引优化，但效果有限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-用图表补充说明&#34;&gt;2. 用图表补充说明
&lt;/h3&gt;&lt;p&gt;如果问题复杂，可使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流程图&lt;/strong&gt;（如 Lucidchart 或 Draw.io）展示系统流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时序图&lt;/strong&gt;清晰呈现请求和响应过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误截图或日志&lt;/strong&gt;标注关键问题点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-感谢并反馈结果&#34;&gt;3. 感谢并反馈结果
&lt;/h3&gt;&lt;p&gt;解决问题后，记得感谢对方，并反馈最终结果。这不仅体现你的尊重，也能帮助大佬积累更多案例。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;在向技术大佬请教问题时，保护敏感信息既是对自己的安全负责，也是对团队和客户的信任负责。通过识别敏感信息、替换真实数据、抽象问题和高效沟通，不仅能避免信息泄露，还能赢得大佬的专业认可。希望每一位开发者都能在技术交流中既学到知识，又能安心无忧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>程序员的自救指南：如何精准描述你的技术问题，让大佬想帮你</title>
        <link>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</link>
        <pubDate>Sun, 09 Feb 2025 20:43:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</guid>
        <description>&lt;p&gt;有时候，程序员的日子就像《荒野求生》，&lt;strong&gt;问题&lt;/strong&gt;就是那条饿着肚子追你的鳄鱼，你呢？跪着发帖：“大佬们救救孩子吧，代码写崩了！”&lt;/p&gt;
&lt;p&gt;结果呢？没人回。&lt;/p&gt;
&lt;p&gt;为什么？&lt;br&gt;
因为你发的帖就像“妈丫，肚子疼！”却忘了告诉医生是&lt;strong&gt;吃撑了、饿坏了、还是中午猛喝了五碗麻辣烫&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;今天，我来教你如何精准描述你的技术问题，让你瞬间从 &lt;strong&gt;“救救孩子”&lt;/strong&gt; 进化到 &lt;strong&gt;“这哥们值得救”&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-1说清楚你在干啥别藏着掖着&#34;&gt;Step 1：说清楚你在干啥，别藏着掖着
&lt;/h3&gt;&lt;p&gt;想让别人帮你？&lt;strong&gt;背景交代到位，别怕麻烦！&lt;/strong&gt;&lt;br&gt;
大佬们不懂你家后院代码都咋跑的。来一段上下文，简洁明了！&lt;/p&gt;
&lt;p&gt;比如，你发帖别写：“Redis 锁续期有问题，快点来！”&lt;br&gt;
改成这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我正在用 Spring Boot + Redisson 实现分布式锁，Spring Boot 版本 3.0.0，Redisson 用的是最新的 3.20.0。问题出在本地单元测试时锁续期失效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大佬看到这，立刻有谱：&lt;strong&gt;哦，这哥们用的是主流技术栈，问题不难搞！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-2问题描述要具体别用感叹号骗大佬注意力&#34;&gt;Step 2：问题描述要具体，别用感叹号骗大佬注意力
&lt;/h3&gt;&lt;p&gt;很多人喜欢放大自己的“惨状”：“完了，炸了，全崩了！”&lt;/p&gt;
&lt;p&gt;可是你连个报错信息都不贴上，难道指望大佬靠读心术帮你？&lt;/p&gt;
&lt;p&gt;错误信息一定要说清楚，关键内容圈出来，别整篇贴，显得像年终总结。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我运行 &lt;code&gt;lock.lock(60, TimeUnit.SECONDS)&lt;/code&gt; 时，日志显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;错误出在锁续期失效，导致任务中途被抢锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看！这样既具体，又不会让人头疼。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3问题复现三板斧连小白也能操作&#34;&gt;Step 3：问题复现三板斧，连小白也能操作
&lt;/h3&gt;&lt;p&gt;技术问题要让别人有地方下手，就像&lt;strong&gt;解锁游戏副本的攻略&lt;/strong&gt;。没法复现的问题，等于在地里找针。&lt;/p&gt;
&lt;p&gt;来个实例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，开启 Redisson 配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待 30 秒后，问题出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;清清楚楚三步走，大佬立刻知道咋搞。再加上你的配置文件、核心代码，&lt;strong&gt;人家手里有锤子，就能敲问题！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-4预期-vs-实际问题得有个对比&#34;&gt;Step 4：预期 vs 实际，问题得有个对比
&lt;/h3&gt;&lt;p&gt;人类（包括程序员）特别爱“对比法”，这会让大佬迅速明白你的痛点在哪里。&lt;/p&gt;
&lt;p&gt;比如这样写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;预期&lt;/strong&gt;：分布式锁应自动续期，确保任务完整执行。&lt;br&gt;
&lt;strong&gt;实际&lt;/strong&gt;：锁未续期，任务执行到一半时锁被释放，导致数据不一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑一目了然！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-5展示你的努力赢得大佬尊重&#34;&gt;Step 5：展示你的努力，赢得大佬尊重
&lt;/h3&gt;&lt;p&gt;大佬们愿意帮有诚意的人。问题描述时，提一提你做过的尝试：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查了 Redis 是否正常启动，结果运行良好。&lt;/li&gt;
&lt;li&gt;调试了 Redisson 配置，&lt;code&gt;useSingleServer&lt;/code&gt; 设置正确。&lt;/li&gt;
&lt;li&gt;改用 &lt;code&gt;tryLock()&lt;/code&gt; 测试，问题依然存在。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样一来，大佬心里一暖：“这哥们不是等着躺平，他是真心要解决问题！”&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-6加点小细节补充大佬的弹药库&#34;&gt;Step 6：加点小细节，补充大佬的“弹药库”
&lt;/h3&gt;&lt;p&gt;最后再补上必要信息，比如操作系统、开发环境、核心代码片段。别一来就上百行代码，关键的几行就行了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心代码&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RLock lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redissonClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;getLock&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testLock&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lock.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(60, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 问题出现在这里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;完美示例把大佬整哭了的求助帖&#34;&gt;&lt;strong&gt;完美示例：把大佬整哭了的求助帖&lt;/strong&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：&lt;br&gt;
我正在用 Spring Boot + Redisson 实现分布式锁，版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot：3.0.0&lt;/li&gt;
&lt;li&gt;Redisson：3.20.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：&lt;br&gt;
单元测试中，锁无法自动续期，导致任务中途锁被释放。日志错误如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，使用默认配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待超过 30 秒的锁超时时间，问题复现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;预期 vs 实际&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预期：分布式锁自动续期，任务顺利完成。&lt;/li&gt;
&lt;li&gt;实际：锁未续期，导致任务执行到一半被中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查 Redis 是否正常运行，结果正常。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;tryLock()&lt;/code&gt; 方法测试，问题依然存在。&lt;/li&gt;
&lt;li&gt;增加日志查看续期机制，发现续期任务未触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;补充信息&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;li&gt;Redisson 配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Config config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Config();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config.&lt;span style=&#34;color:#a6e22e&#34;&gt;useSingleServer&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;setAddress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis://127.0.0.1:6379&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;程序员求助的秘诀&lt;/strong&gt;，在于精准、简洁和条理清晰。&lt;br&gt;
记住，这不仅仅是给别人看的，也是在训练自己的问题分析能力。&lt;/p&gt;
&lt;p&gt;当你学会准确描述问题的那天，你离解决问题已经不远了！&lt;/p&gt;
&lt;p&gt;最后，祝大家都能成为被大佬们“抢着帮”的技术王者～&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JWT的最佳实践</title>
        <link>https://blog.yearsuns.com/p/best-practices-of-jwt/</link>
        <pubDate>Fri, 07 Feb 2025 20:25:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/best-practices-of-jwt/</guid>
        <description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;
在当今的 web 开发中，身份验证是非常关键的，而 JWT（JSON Web Token）作为一种简单、高效的身份验证方式，已经被广泛应用在许多前后端分离的项目中。本篇文章将带你从零开始理解 JWT，探讨它的优缺点，并介绍最佳实践。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;什么是-jwt&#34;&gt;什么是 JWT？
&lt;/h3&gt;&lt;p&gt;JWT 是一种开放标准（RFC 7519），用于在不同系统之间安全地传递信息。简单来说，JWT 主要用于认证和信息交换，常见的应用场景就是用户登录验证。JWT 通常在用户登录后生成，并随后的请求中带着它来进行身份认证。&lt;/p&gt;
&lt;h4 id=&#34;jwt-结构&#34;&gt;JWT 结构
&lt;/h4&gt;&lt;p&gt;JWT 的结构非常简单，它由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;头部（Header）&lt;/strong&gt;&lt;br&gt;
头部通常包含两部分内容：令牌类型（JWT）和签名算法（如 HMAC SHA256 或 RSA）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷（Payload）&lt;/strong&gt;&lt;br&gt;
载荷是 JWT 的“正文”部分，存储了你希望传递的数据（比如用户 ID 或权限）。这里面包含了 &amp;ldquo;Claims&amp;rdquo;（声明），有三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册声明&lt;/strong&gt;：如 &lt;code&gt;sub&lt;/code&gt;（主题）、&lt;code&gt;exp&lt;/code&gt;（过期时间）、&lt;code&gt;iat&lt;/code&gt;（签发时间）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公共声明&lt;/strong&gt;：可以自定义的数据，但需要避免冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有声明&lt;/strong&gt;：你自己定义的声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名（Signature）&lt;/strong&gt;&lt;br&gt;
签名部分用于验证信息的完整性，确保数据没有被篡改。生成签名的方式是：用头部和载荷，通过密钥（对于对称加密是一个密钥，非对称加密是私钥）生成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的生成和验证原理&#34;&gt;JWT 的生成和验证原理
&lt;/h3&gt;&lt;h4 id=&#34;jwt-的生成过程&#34;&gt;JWT 的生成过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户登录&lt;/strong&gt;：&lt;br&gt;
用户输入用户名和密码，通过认证系统登录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器生成 JWT&lt;/strong&gt;：&lt;br&gt;
认证成功后，服务器会使用一个密钥（对称加密）或者私钥（非对称加密）生成一个 JWT。生成过程包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将头部和载荷（即数据）部分通过 Base64 编码。&lt;/li&gt;
&lt;li&gt;用密钥对这两部分进行签名，生成签名部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成后的 JWT 看起来像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;header.payload.signature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt.png&#34;
	width=&#34;1222&#34;
	height=&#34;901&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_96e6486fee1b5af3.png 480w, https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_7fcaf8bf5bb0946f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;jwt构成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回 JWT 给客户端&lt;/strong&gt;：&lt;br&gt;
服务器把生成的 JWT 返回给客户端，通常客户端会将其存储在本地（如 LocalStorage 或 Cookie）中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jwt-的验证过程&#34;&gt;JWT 的验证过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户端发起请求&lt;/strong&gt;：&lt;br&gt;
客户端每次请求时，会将 JWT 添加到请求的 Authorization 头部中（例如：&lt;code&gt;Authorization: Bearer &amp;lt;JWT&amp;gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器验证 JWT&lt;/strong&gt;：&lt;br&gt;
服务器拿到 JWT 后，通过以下步骤来验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析 JWT 的头部、载荷和签名。&lt;/li&gt;
&lt;li&gt;使用密钥（对于对称加密）或公钥（对于非对称加密）对签名部分进行验证，看是否与头部和载荷部分匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果验证通过，说明 JWT 的数据未被篡改，服务器就会继续处理请求。如果验证失败，说明 JWT 被篡改，服务器会返回错误信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的优点&#34;&gt;JWT 的优点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无状态（Stateless）&lt;/strong&gt;&lt;br&gt;
JWT 是无状态的，意味着服务器不需要存储用户会话数据。每次请求都包含 JWT，服务器可以根据 JWT 里的信息来进行认证。这样减少了服务器的负担，提升了系统的扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨域支持&lt;/strong&gt;&lt;br&gt;
由于 JWT 是由客户端传递，它非常适合前后端分离的项目，可以跨域进行身份验证，避免了传统 Cookie 的同源限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;br&gt;
JWT 的大小较小，通常在几十到一百多个字节之间，非常适合频繁的 HTTP 请求，传输效率高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适合微服务架构&lt;/strong&gt;&lt;br&gt;
JWT 可以在多个服务之间传递身份信息，非常适合分布式架构，尤其是微服务架构中的身份认证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的缺点&#34;&gt;JWT 的缺点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无法撤销&lt;/strong&gt;&lt;br&gt;
一旦 JWT 被发放出去，它就无法撤销。如果 JWT 泄露，攻击者可以在有效期内反复使用。这比传统的 Session 认证要危险，后者可以在服务器端主动注销会话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储和安全问题&lt;/strong&gt;&lt;br&gt;
JWT 如果存储不当（如保存在 LocalStorage 或 Cookie 中），可能会受到 XSS 攻击。如果攻击者能够获取到 JWT，就能伪造合法请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过期问题&lt;/strong&gt;&lt;br&gt;
JWT 通常设定有过期时间，一旦过期，就不能再使用。为了避免频繁登录，可以使用刷新令牌（Refresh Token）。不过如果过期时间设置不合理，可能会影响用户体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷不加密&lt;/strong&gt;&lt;br&gt;
JWT 的载荷部分是 Base64 编码的，不是加密的。任何人都可以解码并看到其中的内容。因此，切勿将敏感信息（如密码）存储在 JWT 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥泄漏的风险&lt;/strong&gt;&lt;br&gt;
JWT 的安全性依赖于密钥的保密性。如果密钥泄露，攻击者可以伪造有效的 JWT。因此，保护好密钥非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的使用场景&#34;&gt;JWT 的使用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单点登录（SSO）&lt;/strong&gt;&lt;br&gt;
JWT 非常适合实现跨应用的单点登录（SSO）。只需生成一次 JWT，就可以在多个系统之间共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移动应用身份认证&lt;/strong&gt;&lt;br&gt;
在移动应用中，JWT 常常用来进行身份验证。客户端存储 JWT，并在每次请求中发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前后端分离的应用&lt;/strong&gt;&lt;br&gt;
在前后端分离的架构中，前端和后端可以独立进行身份验证，使用 JWT 作为认证工具，避免了传统 Cookie 的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的最佳实践&#34;&gt;JWT 的最佳实践
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不要在 JWT 中存储敏感信息&lt;/strong&gt;&lt;br&gt;
由于 JWT 的载荷部分是可以解码的，敏感信息（如密码、银行卡信息）绝对不能存储在 JWT 中。你可以把这些信息存储在服务器端，JWT 只传递一个标识符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 HTTPS&lt;/strong&gt;&lt;br&gt;
无论是生成 JWT 还是传输 JWT，都应使用 HTTPS 协议，确保数据在传输过程中不会被窃听或篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置合理的过期时间&lt;/strong&gt;&lt;br&gt;
JWT 的过期时间要设置合理。过短可能影响用户体验，过长则可能存在安全隐患。通常，访问令牌的过期时间可以设置为 15 分钟到 1 小时，刷新令牌可以设置较长时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用刷新令牌&lt;/strong&gt;&lt;br&gt;
结合使用访问令牌（Access Token）和刷新令牌（Refresh Token）。当访问令牌过期时，客户端可以使用刷新令牌获取新的访问令牌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储 JWT 的安全性&lt;/strong&gt;&lt;br&gt;
如果你把 JWT 存储在浏览器中，推荐使用 HttpOnly 和 Secure 标志的 Cookie，以避免 XSS 攻击的风险。避免将 JWT 存储在 LocalStorage 中，因为它更容易受到 XSS 攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名算法选择&lt;/strong&gt;&lt;br&gt;
在选择签名算法时，推荐使用非对称加密的算法（如 RS256 或 ES256），而不是对称加密的算法（如 HS256），这样可以提高安全性，避免密钥泄露风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥管理&lt;/strong&gt;&lt;br&gt;
密钥是 JWT 安全的关键。无论是对称加密还是非对称加密，都应该采取安全措施保护密钥。避免将密钥硬编码在代码中，可以通过环境变量或专门的密钥管理工具来管理密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;JWT 是一种非常流行的身份验证方式，它简单、轻量、无状态，非常适合现代 web 应用，尤其是前后端分离的项目。但它也有一些缺点，尤其是在密钥泄漏和无法撤销的场景下。因此，使用 JWT 时需要特别注意密钥的管理和安全配置，合理设置过期时间，避免将敏感信息存储在 JWT 中。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 Hugo &#43; GitHub 搭建个人博客（自动部署）</title>
        <link>https://blog.yearsuns.com/p/how-to-build-a-personal-blog-with-hugo-and-github-pages/</link>
        <pubDate>Thu, 30 Jan 2025 14:59:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/how-to-build-a-personal-blog-with-hugo-and-github-pages/</guid>
        <description>&lt;p&gt;想要一个自己的博客，省心又免费？&lt;/p&gt;
&lt;p&gt;试试 &lt;strong&gt;Hugo + GitHub Pages&lt;/strong&gt;！只需几个步骤，就能搭建一个 &lt;strong&gt;高速、免费、可自动部署&lt;/strong&gt; 的个人博客网站。&lt;/p&gt;
&lt;h2 id=&#34;1-安装-hugo&#34;&gt;&lt;strong&gt;1. 安装 Hugo&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;windows&#34;&gt;&lt;strong&gt;Windows&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;用 &lt;strong&gt;Scoop&lt;/strong&gt;（推荐）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接去 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/installing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo 官方网站&lt;/a&gt; 下载。&lt;/p&gt;
&lt;h3 id=&#34;mac&#34;&gt;&lt;strong&gt;Mac&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linux&#34;&gt;&lt;strong&gt;Linux&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install hugo  &lt;span style=&#34;color:#75715e&#34;&gt;# Debian/Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf install hugo  &lt;span style=&#34;color:#75715e&#34;&gt;# Fedora&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查是否安装成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-创建-hugo-博客&#34;&gt;&lt;strong&gt;2. 创建 Hugo 博客&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site myblog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd myblog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hugo 会生成一个网站的基本目录结构。&lt;/p&gt;
&lt;h2 id=&#34;3-选择并安装主题&#34;&gt;&lt;strong&gt;3. 选择并安装主题&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;去 &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes&lt;/a&gt; 找个喜欢的主题，比如 &lt;code&gt;ananke&lt;/code&gt;，然后安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编辑 &lt;code&gt;config.toml&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://&amp;lt;username&amp;gt;.github.io/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-添加第一篇文章&#34;&gt;&lt;strong&gt;4. 添加第一篇文章&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编辑 &lt;code&gt;content/posts/my-first-post.md&lt;/code&gt;，加上内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;title: &amp;#34;我的第一篇博客&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date: 2025-01-31T12:00:00+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;draft: false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, Hugo!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-本地预览&#34;&gt;&lt;strong&gt;5. 本地预览&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在浏览器访问 &lt;code&gt;http://localhost:1313&lt;/code&gt; 看效果。&lt;/p&gt;
&lt;h2 id=&#34;6-发布到-github&#34;&gt;&lt;strong&gt;6. 发布到 GitHub&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1创建-github-仓库&#34;&gt;&lt;strong&gt;（1）创建 GitHub 仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;私有仓库&lt;/strong&gt;：&lt;code&gt;myblog-src&lt;/code&gt;（存源码）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公开仓库&lt;/strong&gt;：&lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;（存生成的网站文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2把源码推送到私有仓库&#34;&gt;&lt;strong&gt;（2）把源码推送到私有仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/myblog-src.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -M master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;初始化 Hugo 博客&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7-创建-github-tokengithub_token&#34;&gt;&lt;strong&gt;7. 创建 GitHub Token（GITHUB_TOKEN）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;由于我们要把生成的静态网站推送到 &lt;code&gt;username.github.io&lt;/code&gt; 仓库，需要 GitHub Token 进行授权。&lt;/p&gt;
&lt;h3 id=&#34;1生成-token&#34;&gt;&lt;strong&gt;（1）生成 Token&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入 GitHub，点击右上角头像，选择 &lt;strong&gt;Settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在左侧菜单选择 &lt;strong&gt;Developer settings → Personal access tokens → Fine-grained tokens&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;Generate new token&lt;/strong&gt;，然后：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repository access&lt;/strong&gt; 选择 &lt;code&gt;Only select repositories&lt;/code&gt;，勾选 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Permissions&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Contents&lt;/code&gt;: 选择 &lt;strong&gt;Read and Write&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其他保持默认&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击 Generate token&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制 Token&lt;/strong&gt;，保存到本地（只能看一次）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2添加到-github-actions&#34;&gt;&lt;strong&gt;（2）添加到 GitHub Actions&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入 &lt;code&gt;myblog-src&lt;/code&gt; 仓库&lt;/li&gt;
&lt;li&gt;打开 &lt;strong&gt;Settings → Secrets and variables → Actions → New repository secret&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Name 填写 &lt;code&gt;DEPLOY_TOKEN&lt;/code&gt;，Value 粘贴刚才复制的 Token，点击 &lt;strong&gt;Add secret&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-配置-github-actions自动部署&#34;&gt;&lt;strong&gt;8. 配置 GitHub Actions（自动部署）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;myblog-src&lt;/code&gt; 仓库中，新建 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;，写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sample workflow for building and deploying a Hugo site to GitHub Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Hugo site to Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Runs on pushes targeting the default branch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Default to bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;defaults&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;HUGO_VERSION&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.142.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Install Hugo CLI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;amp;&amp;amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;recursive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo -D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.BLOG_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_DIR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;commit_message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;auto deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9-配置-github-pages&#34;&gt;&lt;strong&gt;9. 配置 GitHub Pages&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;进入 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; 仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Settings → Pages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branch 选择 &lt;code&gt;master&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击 Save&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-提交修改自动部署&#34;&gt;&lt;strong&gt;10. 提交修改，自动部署！&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;以后只需提交博客源码，GitHub Actions 会自动部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;更新文章&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;稍等片刻，你的博客就会出现在：&lt;br&gt;
👉 &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;你已经成功使用 &lt;strong&gt;Hugo + GitHub Pages&lt;/strong&gt; 搭建了一个 &lt;strong&gt;私有源码、自动部署&lt;/strong&gt; 的个人博客！🎉&lt;br&gt;
随时写文章，推送后 &lt;strong&gt;自动上线&lt;/strong&gt;，是不是超简单？💡&lt;/p&gt;
&lt;p&gt;🚀 &lt;strong&gt;快去试试吧！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
