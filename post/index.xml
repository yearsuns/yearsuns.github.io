<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 王离谱的小破站</title>
        <link>https://blog.yearsuns.com/post/</link>
        <description>Recent content in Posts on 王离谱的小破站</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>王离谱</copyright>
        <lastBuildDate>Sat, 22 Feb 2025 11:23:56 +0800</lastBuildDate><atom:link href="https://blog.yearsuns.com/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>为什么要有利他之心</title>
        <link>https://blog.yearsuns.com/p/why-we-should-embrace-altruism/</link>
        <pubDate>Sat, 22 Feb 2025 11:23:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/why-we-should-embrace-altruism/</guid>
        <description>&lt;p&gt;如今的社会已不再是过去那种信息闭塞的时代了，当朋友需要帮助时，不论你是否出手相助，问题最终都会得到解决，所以如果条件允许，何不主动请缨，提供自身价值呢？&lt;/p&gt;
&lt;h3 id=&#34;1-提升信任关系积累社会资源&#34;&gt;1. 提升信任关系，积累社会资源
&lt;/h3&gt;&lt;p&gt;人际关系和社会资源的积累，在很大程度上依赖于互信和互助。利他之心能够在无形中提升彼此间的信任感，使得人与人之间的关系更加稳固。利他行为让你在人际互动中表现出关心和善意，进而增进他人的好感与信任。随着这种信任的加深，自己也能够积累更多的社会资源，无论是信息、支持，还是实际的帮助。&lt;/p&gt;
&lt;p&gt;例如，在工作场所，表现出乐于助人的精神可以帮助你建立良好的同事关系，这不仅能提高团队的合作效率，还能为你带来更多的职场机会。在日常生活中，帮助他人不仅能赢得朋友的信任，还可能在关键时刻得到他人的支持和援助。&lt;/p&gt;
&lt;p&gt;通过积累这种信任与资源，利他行为为我们带来了长久的社会资本，也为未来的成功奠定了基础。&lt;/p&gt;
&lt;p&gt;想想你是如何看待身边自私自利的人的，当他有求于你时，你是否会全力相助？&lt;/p&gt;
&lt;p&gt;俗话说，物以类聚，人以群分。只有自己以身作则，才能在身边聚集更多拥有相同价值观的朋友！&lt;/p&gt;
&lt;h3 id=&#34;2-提升自我价值促进个人成长&#34;&gt;2. 提升自我价值，促进个人成长
&lt;/h3&gt;&lt;p&gt;利他行为不仅是对他人的付出，它也是对自己的一种提升。每一次无私的付出，都会让你感受到自我价值的实现。这种感觉的积累，能帮助你建立更强的自信心和成就感，从而提升自我认同感。当你意识到自己不仅仅是为了自己的利益而生活，而是能够为他人带来积极影响时，往往会产生深刻的满足感。&lt;/p&gt;
&lt;p&gt;同时，帮助他人也能促进个人成长。例如，费曼学习法可以帮助我们理解这一点。费曼学习法是一种通过教别人来加深自己理解的技巧。具体来说，费曼学习法有四个步骤：首先，你需要了解一个概念；然后，你将其简化并用自己的话解释；接着，找出自己理解中的漏洞并进行补充；最后，通过不断的复述和改进，巩固对该知识的掌握。&lt;/p&gt;
&lt;p&gt;在利他行为中，这个过程类似于你通过帮助他人，自己获得了更深的理解和成长。例如，当你帮助别人理解一个复杂的概念时，你必须将其转化成易于理解的语言，这需要你清晰地整理自己的思维并深入掌握这个概念。这个过程中，你不仅仅是在帮助别人理解知识，也是在加深自己对知识的理解。&lt;/p&gt;
&lt;p&gt;举个例子，如果你帮助一位朋友学习某项技能，比如编程或外语，你可能会发现自己在解释时，原本理解不深的部分变得更加清晰。这种通过教导和传授知识的过程，能够极大地促进个人的认知和技能发展。通过教会别人，你也在教会自己，并且在这个过程中增强了自己的能力和自信心。&lt;/p&gt;
&lt;p&gt;此外，费曼学习法的反复“讲解”过程中，你会不断发现自己的盲点，迫使自己去学习更多、更深入的内容，这种自我提升也是利他行为中不可忽视的一部分。&lt;/p&gt;
&lt;p&gt;通过这种方式，利他行为成为了个人成长的一种有效途径，让我们在帮助他人时，也能够促进自我价值的实现和不断进步。&lt;/p&gt;
&lt;h3 id=&#34;3-提升幸福指数预防心理疾病&#34;&gt;3. 提升幸福指数，预防心理疾病
&lt;/h3&gt;&lt;p&gt;心理学研究表明，利他行为能够有效提升幸福感和生活满意度。当我们帮助他人时，大脑会释放出多巴胺和催产素等“幸福荷尔蒙”，这些化学物质不仅能够改善情绪，还能促进身心健康。定期参与有意义的利他行为，能让人感到生活充实和有意义，从而增强幸福感。&lt;/p&gt;
&lt;p&gt;相反，长期的自我中心和孤立行为可能导致孤独感和抑郁情绪。利他行为通过促进与他人的互动和联系，帮助人们建立起社会支持系统，减少孤独感，降低心理问题的风险。尤其在现代社会中，越来越多人面临精神压力和情感困扰，利他行为的实践能够为心理健康提供有力的保护网。&lt;/p&gt;
&lt;p&gt;通过帮助他人，我们不仅能增强自我感知的幸福感，还能够在生活中找到更多的正能量，预防心理疾病的发生。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>过去30年普通人逆袭的机会，你错过了哪些？</title>
        <link>https://blog.yearsuns.com/p/the-opportunity-for-ordinary-people-to-strike-it-rich-in-the-past-30-years/</link>
        <pubDate>Thu, 20 Feb 2025 21:13:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/the-opportunity-for-ordinary-people-to-strike-it-rich-in-the-past-30-years/</guid>
        <description>&lt;p&gt;过去30年，普通人逆袭的机会层出不穷。从房地产的暴涨，到网游、互联网、电商、自媒体、再到近两年的区块链，经济的剧变让许多人在短时间内积累了巨额财富。本文将带你回顾这几大行业的崛起历程，并探讨普通人如何抓住下一次的逆袭机会。&lt;/p&gt;
&lt;h3 id=&#34;一曾经的逆袭神话&#34;&gt;一、曾经的逆袭神话
&lt;/h3&gt;&lt;h4 id=&#34;1-房地产风口上的飞猪&#34;&gt;1. 房地产：风口上的飞猪
&lt;/h4&gt;&lt;p&gt;如果你在2000年代初期买下了一套北京或上海的房子，那么你现在可能已经可以安享晚年了。&lt;/p&gt;
&lt;p&gt;2003年到2013年，房地产市场是无数普通人财富飞跃的舞台。那时，城市化进程加速，土地开发和基础设施建设如火如荼。房地产的暴涨让一大批人迅速从平凡走向财富自由。购房者通过几年时间，房产增值几倍，成为“房产神话”的亲历者。&lt;/p&gt;
&lt;p&gt;在那个阶段，房地产不仅是生活必需品，也是资本增值的工具。尤其是2008年以后，随着政府政策的不断调控，房地产市场的泡沫被逐步挤掉，但仍然维持在一个较高的价格水平。很多普通人通过贷款买房，十几年后，房子价值翻了几倍。而且，不仅仅是在一线城市，二线、三线城市也在房地产发展中，出现了类似的机会。&lt;/p&gt;
&lt;h4 id=&#34;2-网游从玩家到富翁&#34;&gt;2. 网游：从玩家到富翁
&lt;/h4&gt;&lt;p&gt;曾经无数少年沉迷网游，你是否也是其中一员？甚至由此诞生了“雷电法王”之名的杨永信。&lt;/p&gt;
&lt;p&gt;早期的网游市场并不成熟，但随着《传奇》《魔兽世界》《英雄联盟》等经典游戏的爆红，游戏产业的规模暴涨。从2000年代初期，游戏开发商、运营商、直播平台，乃至游戏主播，都迎来了自己的“风口”。那些站在风口浪尖上的人，借助着庞大的用户群体、丰富的内容创作和玩家社交，在网游这个赛道上快速累积了财富。&lt;/p&gt;
&lt;p&gt;随着网游行业的快速发展，网游不再只是娱乐工具，它已经成为了一种线上社交、数字经济的核心部分。除了游戏的直接收入（例如充值、道具买卖、月卡等），很多人还通过游戏视频、直播、代练等方式获得了不菲的收入，网游行业为普通人提供了多样的逆袭机会。&lt;/p&gt;
&lt;h4 id=&#34;3-互联网流量为王的时代&#34;&gt;3. 互联网：流量为王的时代
&lt;/h4&gt;&lt;p&gt;你还记得猫扑带火了哪些草根吗？你还记得淘宝刚刚成立时的样子吗？你还记得身边有哪些程序员吗？&lt;/p&gt;
&lt;p&gt;互联网刚刚在中国普及，门户网站如网易、搜狐、新浪等处于快速发展阶段，互联网彻底改变了人们的生活方式，也为很多普通人提供了逆袭的机会。&lt;/p&gt;
&lt;p&gt;电商平台的崛起、社交网络的普及和搜索引擎的技术革新，使得个人创业者能够低成本、快速地触及到海量用户。无数“屌丝”创业者通过互联网实现了从草根到巨富的逆袭。&lt;/p&gt;
&lt;h4 id=&#34;4-电商从小店到帝国&#34;&gt;4. 电商：从小店到帝国
&lt;/h4&gt;&lt;p&gt;电商行业自2005年淘宝的崛起，打破了传统商业模式，为无数普通人提供了低门槛、高回报的创业机会。电商的快速发展，使得许多人从一开始的单打独斗，到逐渐积累品牌、经营帝国。随着消费升级和物流体系的完善，电商市场迅速壮大。&lt;/p&gt;
&lt;h4 id=&#34;5-自媒体从个人到品牌&#34;&gt;5. 自媒体：从个人到品牌
&lt;/h4&gt;&lt;p&gt;自媒体的崛起，也是过去30年普通人逆袭的重要途径之一。几年前，谁能想到一个普通人只需要一台手机和一些创意，就能够通过短视频、博客、社交平台等途径，获得巨额收入？&lt;/p&gt;
&lt;p&gt;“网红”从最初的娱乐圈到如今几乎渗透到各行各业，电商带货、广告代言、品牌合作……无论是抖音、快手，还是微博、微信公众号，只要你能吸引足够的关注，流量变现就不再是难题。&lt;/p&gt;
&lt;p&gt;自媒体作为信息时代的产物，为个人创作者提供了一个低成本、高回报的创业平台。尤其是在短视频和直播兴起后，内容创作者通过社交平台迅速积累大量粉丝，逐步将自己的兴趣和创意转化为商业收入，甚至成为行业顶流。&lt;/p&gt;
&lt;h4 id=&#34;6-区块链从一张白纸到千亿市值&#34;&gt;6. 区块链：从一张白纸到千亿市值
&lt;/h4&gt;&lt;p&gt;近年来，区块链技术的崛起，再次让普通人看到了逆袭的机会。区块链是加密货币和去中心化技术的基础，其背后的潜力巨大。比特币和以太坊的早期投资者，很多人已经实现了财富自由。&lt;/p&gt;
&lt;p&gt;区块链不仅仅是投资市场的机会，还为金融、物流、艺术等多个行业带来了创新。NFT、去中心化金融（DeFi）等新的商业模式和技术，都是普通人抓住机会逆袭的可能性。&lt;/p&gt;
&lt;p&gt;区块链技术，特别是比特币的暴涨，使得一大批投资者在短短几年内迅速积累了财富。随着ICO（首次代币发行）和数字货币的普及，区块链成为了新一轮投资热潮的代表。&lt;/p&gt;
&lt;h3 id=&#34;二为什么这些行业能兴起&#34;&gt;二、为什么这些行业能兴起？
&lt;/h3&gt;&lt;p&gt;从房地产到网游、互联网、电商、自媒体，再到区块链，各个行业的兴起，均有共同的规律可循。总结下来，以下几点尤为关键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;市场需求驱动&lt;/strong&gt;：无论是房地产的城市化需求，还是互联网带来的在线消费习惯，甚至是自媒体的个性化内容消费，市场需求的激增是各行业爆发的根本原因。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技术进步引领变革&lt;/strong&gt;：从互联网的普及，到电商的购物体验优化，再到区块链技术的创新，技术始终是行业突破的推动力。每一次技术的革新，都会带来新的商业机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资本加持催生爆发&lt;/strong&gt;：资本的涌入推动了各行业的爆发，无论是房地产的投资热潮，还是电商平台的资金扶持，资本不仅让行业扩张，还加剧了竞争格局。在许多情况下，资本的加持帮助了行业快速扩张，普通人也因此受益。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;三ai是下一个逆袭机会吗&#34;&gt;三、AI是下一个逆袭机会吗？
&lt;/h3&gt;&lt;p&gt;如今，AI行业正在快速崛起，成为下一个可能的财富增长点。GPT、DeepSeek等技术的问世，标志着人工智能逐渐进入了一个新的阶段。AI不仅仅改变了行业的运作方式，还直接影响到普通人的工作和生活。从自然语言生成到计算机视觉，从自动驾驶到金融智能预测，AI的应用场景广泛，潜力巨大。&lt;/p&gt;
&lt;p&gt;AI与过去的行业相比，有几个重要特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;广泛的应用场景&lt;/strong&gt;：AI不仅适用于传统行业，还能创造出全新的职业和行业。无论是教育、医疗，还是金融、娱乐，几乎所有领域都能受益于AI的推动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;技术进步不断&lt;/strong&gt;：AI的技术进步速度远超其他行业，深度学习、机器学习、自然语言处理等领域的突破，将为更多普通人提供进入高科技行业的机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;资本推动创新&lt;/strong&gt;：和过去的行业一样，AI背后有着巨额的资本投入。全球范围内的大公司和投资机构都在抢占AI技术的制高点，资金的推动加速了AI技术的研发和商业化。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;四普通人如何抓住ai逆袭机会&#34;&gt;四、普通人如何抓住AI逆袭机会？
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;学习AI技能&lt;/strong&gt;&lt;br&gt;
掌握AI相关技能，如机器学习、数据分析、自然语言处理等，能够帮助普通人在未来的职场中占得先机。即使是非技术背景的人，也可以通过学习相关工具，如GPT、DeepSeek等自然语言生成技术，提升自己的工作效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;利用AI工具提升效率&lt;/strong&gt;&lt;br&gt;
许多AI工具已广泛应用于各个行业，例如GPT、DeepSeek、即梦、可灵、豆包等。普通人可以通过掌握这些工具，提升工作效率，甚至开创自己的副业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;探索AI创业机会&lt;/strong&gt;&lt;br&gt;
AI行业的发展不仅提供了就业机会，还提供了创业机会。AI写作、AI绘画、AI视频、AI数字人直播，AI应用已经遍地生花。无论是通过AI提供智能服务，还是利用AI优化现有的业务流程，普通人都有可能在这个行业找到属于自己的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;五ai能否成就下一个财富神话&#34;&gt;五、AI能否成就下一个财富神话？
&lt;/h3&gt;&lt;p&gt;回顾过去30年，行业的崛起往往与技术进步、市场需求和资本推动密切相关。今天，AI行业无疑是下一个值得关注的财富增长点。对于普通人来说，AI行业不仅提供了新的就业机会，还提供了广阔的创业空间。然而，是否能够像房地产、电商等行业一样创造出巨大的财富奇迹，仍然需要时间来验证。&lt;/p&gt;
&lt;p&gt;然而，AI的潜力不可忽视。通过主动学习、提升技能并抓住行业的快速发展，普通人仍然有机会在这个充满创新的时代，找到属于自己的“逆袭”机会。所以，如果你有一颗敏锐的商业嗅觉和愿意学习的心态，AI或许会是你下一个财富的“跳板”。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>你为什么总是焦虑？这五种欲望让你喘不过气！</title>
        <link>https://blog.yearsuns.com/p/5-destructive-desires-that-are-fueling-your-anxiety/</link>
        <pubDate>Fri, 14 Feb 2025 23:13:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/5-destructive-desires-that-are-fueling-your-anxiety/</guid>
        <description>&lt;p&gt;你是不是总有这样的时候：明明拥有一切，却还是心神不宁；明明在忙碌中，却感到深深的焦虑和压力；明明生活看起来挺好，却怎么也静不下心来？&lt;/p&gt;
&lt;p&gt;究其根源，我们大多数人焦虑的原因，往往与内心的某些欲望密切相关。我们都在追求“更好”的生活，然而，这些欲望有时候反而成了我们焦虑的来源。&lt;/p&gt;
&lt;p&gt;今天，我们来聊聊，为什么这些欲望让你焦虑不已，如何通过心理学的方式解决这一难题。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;为什么我们总是焦虑&#34;&gt;为什么我们总是焦虑？
&lt;/h3&gt;&lt;p&gt;首先，让我们来看看焦虑的本质。心理学上，焦虑被定义为一种对未来的担忧与不确定感。这种不安，往往源自对某种“失控”的恐惧。当我们无法掌控生活中的某些方面时，我们就会产生焦虑，身体的压力反应会迅速启动，导致我们情绪波动大，思绪混乱。&lt;/p&gt;
&lt;p&gt;这些焦虑并非无缘无故产生。每当你有了“必须得到”的需求，而这些需求又无法在短时间内满足时，焦虑便会悄然而至。欲望越强烈，焦虑就越容易找到你。&lt;/p&gt;
&lt;p&gt;接下来，我们逐一分析，这五种欲望是如何成为焦虑的源头。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;五种欲望让你焦虑的心理学分析&#34;&gt;五种欲望让你焦虑的心理学分析
&lt;/h3&gt;&lt;h4 id=&#34;1-掌控欲让你累到崩溃的操控魔力&#34;&gt;1. &lt;strong&gt;掌控欲&lt;/strong&gt;：让你累到崩溃的“操控魔力”
&lt;/h4&gt;&lt;p&gt;“时间管理大师”听起来很酷对吧？但是，你有没有想过，每当你试图掌控一切时，自己会变成什么样子？&lt;/p&gt;
&lt;p&gt;“我要掌控时间”、“我必须控制每个细节”、“我不想让任何人犯错”——如果你时常对这些想法感到头疼，那你很可能深陷在“掌控欲”的困扰中。&lt;/p&gt;
&lt;p&gt;掌控欲来源于人类对安全感的需求。我们都希望自己能够掌控一切——无论是时间、环境、别人，还是未来的不确定性，尤其是当面临未知或无法预见的情况时，焦虑便随之而来。这种欲望背后隐藏着深深的恐惧，害怕自己失控，害怕未知的风险。&lt;/p&gt;
&lt;p&gt;然而，过度的掌控欲反而让我们变得焦虑，因为世界本身充满了不可预测的变化。我们无法控制每一分每一秒，也不能左右每个人的行为。相反，越是想控制，越是无法得到真正的“掌控”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学建议：&lt;/strong&gt;&lt;br&gt;
顺其自然，学会放手，接受生活中的不确定性。适当的放下控制欲，才能让自己感到真正的自由。试着把重点放在自己能够掌控的事情上，比如自我管理、情绪控制等，而不要过度干涉他人或外部环境的变化。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-完美欲完美主义的痛与美&#34;&gt;2. &lt;strong&gt;完美欲&lt;/strong&gt;：完美主义的痛与美
&lt;/h4&gt;&lt;p&gt;你是不是总是给自己和别人设立过高的要求？觉得自己做事不完美，就会自责，甚至害怕别人看到你的一点小瑕疵？&lt;/p&gt;
&lt;p&gt;“我必须完美无缺”、“我不允许自己犯错”、“别人也得是完美的”——完美欲往往让人不断自我苛责，心里总有一个声音在催促你达到不切实际的标准。&lt;/p&gt;
&lt;p&gt;从心理学角度讲，完美主义通常源于对自我价值的不安全感。你觉得只有做得“完美”，才能得到别人的认可，甚至是自己的接纳。结果，你不断追求完美，却忽视了自己的内心需求，也因此无法真正体验到生活的美好，反而把自己逼得焦虑不堪。&lt;/p&gt;
&lt;p&gt;完美主义者往往难以感到满足，反而不断陷入焦虑和自责的怪圈中。因为“完美”是不存在的——即使你做到了一点点进步，也无法从内心获得满足感。&lt;/p&gt;
&lt;p&gt;完美本身就是一种虚幻的追求。人类的非完美性才是我们最真实的一面，而每一个微小的缺陷，都是我们成长的一部分。完美主义让我们失去了享受过程的能力，焦虑感也因此滋生。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学建议：&lt;/strong&gt;&lt;br&gt;
完美的定义是什么？或许它根本不存在。学会接受“足够好”，而不是非得完美无缺。“做好自己的最好就好”——从容应对不完美，学会在过程中找到乐趣，接受自己作为一个不完美的人，拥抱自己的缺点。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-认同欲为他人而活还是为自己而活&#34;&gt;3. &lt;strong&gt;认同欲&lt;/strong&gt;：为他人而活，还是为自己而活？
&lt;/h4&gt;&lt;p&gt;你是不是常常过度关注别人对你的评价，甚至会因此改变自己的行为和决策？如果答案是“是”，那么你可能正在经历“认同欲”带来的困扰。&lt;/p&gt;
&lt;p&gt;“别人怎么看我？”“我必须让别人喜欢我”——这种渴望他人认同的心态，使得你不断迎合他人的期待，甚至忽视了自己的真实感受和需求。&lt;/p&gt;
&lt;p&gt;认同欲是人类社交本能的一部分。我们都渴望被他人接受，尤其是在社会化的过程中，我们的行为常常受到他人评价的影响。社会学家曾指出，认同欲深深植根于我们的心理，它关乎自尊心、归属感和存在感。&lt;/p&gt;
&lt;p&gt;然而，过度的认同欲容易让我们迷失自我，失去内心的独立性。当我们总是为了取悦别人而做事时，内心的不安和焦虑也会随之而来。&lt;/p&gt;
&lt;p&gt;心理学中，这种“认同欲”通常与低自尊有关。个体往往在缺乏自我价值感时，将自己的价值寄托在他人评价上。为了获得他人的认可和接纳，我们不断改变自己，甚至丧失了真正的自我。&lt;/p&gt;
&lt;p&gt;而当这种认同欲无法得到满足时，焦虑和不安便随之而来。你时刻在乎别人怎么看自己，却忽视了内心的真正需求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学建议：&lt;/strong&gt;&lt;br&gt;
练习自我接纳，学会不依赖他人评价来定义自己，找到属于自己的独立价值，而不是靠外界的评价来定义自己。尝试设定个人的价值观和生活目标，明确自己真正想要的是什么，并勇敢地去追求。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-物质欲金钱权力和名声永无止境的追求&#34;&gt;4. &lt;strong&gt;物质欲&lt;/strong&gt;：金钱、权力和名声，永无止境的追求
&lt;/h4&gt;&lt;p&gt;“我需要更多的钱”、“我必须得到更高的职位”、“我想要更多的社会认可”——物质欲的存在，往往让我们陷入对外部世界的无限追求。&lt;/p&gt;
&lt;p&gt;心理学上，这种欲望常常源于对安全感的渴求——认为只有拥有物质财富和社会地位，才能保证生活的稳定与安心。&lt;/p&gt;
&lt;p&gt;物质的追求本身是无止境的，它并不会带来持久的快乐，反而可能让你丧失了对生活本质的感知。&lt;/p&gt;
&lt;p&gt;物质欲源自我们对安全感和地位的需求。我们认为拥有更多的财富、权力和名声，能够让我们在社会中更有立足之地，减少焦虑。&lt;/p&gt;
&lt;p&gt;然而，研究发现，金钱和权力的追求往往带来更多的焦虑，因为它们并不能真正解决内心的不安，反而让我们更加焦虑不已。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学建议：&lt;/strong&gt;&lt;br&gt;
重新审视自己的需求和内心的真正渴望，学会享受过程而非单纯追求结果。尝试从内心获得满足，体验当下的宁静与美好，享受生活中的小确幸。
物质的追求可以让生活更加舒适，但它不应是你生活的唯一目标。试着去关注生活中的精神满足，比如与亲朋好友的关系、个人成长的进步等，找到更深层次的价值感。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;5-安全欲渴望稳定恐惧孤独&#34;&gt;5. &lt;strong&gt;安全欲&lt;/strong&gt;：渴望稳定，恐惧孤独。
&lt;/h4&gt;&lt;p&gt;“我不能失业”、“我不能孤单一人”——这种对安全感的强烈需求，常常表现为对未知的恐惧，对独立生活的抗拒。安全欲的心理根源通常是对生活的不确定性产生了极大的焦虑感。&lt;/p&gt;
&lt;p&gt;很多人为了避免孤独和不安，选择了过度依赖他人或寻求外部保障，然而，这样的行为反而让自己处于被动的局面，焦虑和不安会持续存在，因为你始终无法完全掌控自己的生活环境。&lt;/p&gt;
&lt;p&gt;安全欲源于我们对情感和心理的依赖。我们害怕孤独，害怕失去稳定，尤其是在面对社会变化时，内心的不安感会被激发。人类天生就有寻求安全感的需求，但过度的安全欲反而会让我们逃避面对变化，失去面对挑战的勇气。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学建议：&lt;/strong&gt;&lt;br&gt;
学会接受不稳定的生活状态，培养应对变化的能力。通过增强自信心、培养应对困难的能力，可以让自己在面对不确定性时更加从容不迫。而且，你会发现，当你开始享受孤独时，它就不再是负担，而是成长的空间。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;如何打破焦虑的循环走向内心的平静&#34;&gt;如何打破焦虑的循环，走向内心的平静？
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1. 自我觉察&lt;/strong&gt;&lt;br&gt;
认识到这些欲望并非自我价值的全部。通过冥想、写日记等方式，深入挖掘自己的真实需求，而非不断迎合外界的期望。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 接纳不完美&lt;/strong&gt;&lt;br&gt;
放下完美主义，允许自己和他人有缺陷。焦虑往往源自对“完美”的追求，放下它，才能减轻内心的压力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 设定健康的目标&lt;/strong&gt;&lt;br&gt;
设定合理的目标，逐步实现，不要一味追求外部的认同或物质的积累。每个人都有自己独特的价值，学会根据自身的节奏生活。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 放松和释放压力&lt;/strong&gt;&lt;br&gt;
定期进行放松训练，如瑜伽、冥想、深呼吸等，帮助自己平衡身心，释放压力，缓解焦虑。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. 增强内在力量&lt;/strong&gt;&lt;br&gt;
通过阅读、学习、社交等方式，增强自己的内在力量，培养自信心和应对焦虑的能力，逐步打破焦虑的恶性循环。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语
&lt;/h3&gt;&lt;p&gt;焦虑并非不可避免，只有认识到自己的欲望来源，并通过心理学的方法去调适，我们才能真正拥有内心的平静。生活中没有所谓的“完美”，而是一个不断适应、不停成长的过程。学会释放那些不必要的欲望，你会发现，真正的自由来自内心的平静，而不是外界的认可与控制。&lt;/p&gt;
&lt;p&gt;希望每个人都能学会在欲望中找到平衡，摆脱焦虑，活出真正的自己。&lt;/p&gt;
&lt;p&gt;你是否也曾深受这些欲望困扰？或者你有哪些方法缓解焦虑，欢迎在评论区分享，让我们一起探索更好的自己！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Cursor开发终极指南</title>
        <link>https://blog.yearsuns.com/p/the-ultimate-guide-to-development-with-cursor/</link>
        <pubDate>Thu, 13 Feb 2025 21:13:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/the-ultimate-guide-to-development-with-cursor/</guid>
        <description>&lt;p&gt;如果您正在阅读本文，那么您可能已经尝试过 AI 驱动的开发，并且认为“这会产生比代码更多的错误！”相信我，我有过这种经历。&lt;/p&gt;
&lt;p&gt;经过几个月对 Cursor 的反复试验，我发现秘诀不在于 AI 的能力，而在于我们如何指导它。让我向您展示如何将 Cursor 从有缺陷的代码生成器转变为您最可靠的配对程序员。&lt;/p&gt;
&lt;h2 id=&#34;关于人工智能发展的残酷事实&#34;&gt;关于人工智能发展的残酷事实
&lt;/h2&gt;&lt;p&gt;人工智能不是魔法。这就像在你的团队中拥有一个才华横溢但思想死板的初级开发人员。你会在没有任何背景或要求的情况下告诉初级开发人员“为我建立一个用户身份验证系统”吗？可能不会。然而，这正是我们大多数人对人工智能所做的。&lt;/p&gt;
&lt;h2 id=&#34;有效人工智能发展的三大支柱&#34;&gt;有效人工智能发展的三大支柱
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;清晰的系统架构：人工智能需要全面了解你的系统&lt;/li&gt;
&lt;li&gt;结构化任务管理：将工作分解成可消化的部分&lt;/li&gt;
&lt;li&gt;明确的开发规则：用清晰的模式和惯例指导人工智能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们深入了解如何在您的工作流程中实现这些功能。&lt;/p&gt;
&lt;h2 id=&#34;做好项目准备&#34;&gt;做好项目准备
&lt;/h2&gt;&lt;p&gt;首先，让我们创建一个您和AI都能理解的项目结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;project-root/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── .cursorrules &lt;span style=&#34;color:#75715e&#34;&gt;# AI行为配置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── docs/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ ├── architecture.mermaid &lt;span style=&#34;color:#75715e&#34;&gt;# 系统架构图&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ ├── technical.md &lt;span style=&#34;color:#75715e&#34;&gt;# 技术文档&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ └── status.md &lt;span style=&#34;color:#75715e&#34;&gt;# 进度跟踪&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── tasks/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ └── tasks.md &lt;span style=&#34;color:#75715e&#34;&gt;# 分解开发任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── src/ &lt;span style=&#34;color:#75715e&#34;&gt;# 源码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你的人工智能助手的大脑：&lt;code&gt;.cursorrules&lt;/code&gt;
这是一个经过实践检验的 &lt;code&gt;.cursorrules&lt;/code&gt; 文件，我经过了几个月的开发不断完善：&lt;/p&gt;
&lt;h2 id=&#34;项目背景和架构&#34;&gt;项目背景和架构
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Project Context and Architecture&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SYSTEM _CONTEXT: |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  您是正在开发 TypeScript/NestJS 项目的高级开发人员。
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  启动时需要读取的文件: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - docs/architecture.mermaid：系统架构和组件关系
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - docs/technical.md：技术规范和模式
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - task/tasks.md：当前开发任务和要求
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - docs/status.md：项目进度和状态
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  在进行任何更改之前: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1. 从 docs/architecture.mermaid 解析并理解系统架构
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2. 从 task/tasks.md 检查当前任务上下文
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3. 在 docs/status.md 中更新进度
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  4. 遵循 docs/technical.md 中的技术规范
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 文件管理规则&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ON_ FILE _CHANGE: |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  任何代码更改后所需的操作：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1. 阅读 docs/architecture.mermaid 以验证架构合规性
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2. 更新 docs/status.md：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 当前进度
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 遇到的任何新问题
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 已完成的项目
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3. 根据 docs/technical.md 规范验证更改
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  4. 根据 task/tasks.md 验证任务进度
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 代码样式和模式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TYPESCRIPT_ GUIDELINES: | 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - 使用严格类型，避免使用“any” 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - 遵循 SOLID 原则
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - 为所有公共方法编写单元测试
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - 使用 JSDoc 记录
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Architecture Understanding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;READ_ARCHITECTURE: |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  文件: docs/architecture.mermaid
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  所需解析: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1. 加载并解析完整的 Mermaid 图
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2. 提取并理解：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 模块边界和关系
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 数据流模式
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 系统接口
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 组件依赖关系
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3. 验证任何针对架构约束的更改 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  4. 确保新代码保持定义的关注点分离
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  错误处理: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1. 如果找不到文件：停止并通知用户
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2. 如果图解析失败：请求澄清
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3. 如果检测到架构违规：警告用户
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 任务管理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TASK_ WORKFLOW: |
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  所需文件: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - task/tasks.md：任务定义来源
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - docs/status.md：进度跟踪
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - docs/technical.md：实施指南
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  工作流程步骤: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1.阅读 task/tasks.md：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 解析当前任务要求
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 提取验收标准
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 识别依赖关系
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2.对照 docs/architecture.mermaid 进行验证：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 确认架构一致性
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 检查组件交互
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3.更新 docs/status.md：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 将任务标记为正在进行中
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 跟踪子任务的完成情况
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 记录任何阻碍因素
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  4.按照 TDD 实施：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 首先创建测试文件
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 实施以通过测试
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     - 测试完成后更新状态
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 错误预防&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VALIDATION_RULES: | 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1. 验证类型一致性
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  2. 检查潜在的空值/未定义
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  3. 对照业务规则进行验证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  4. 确保错误处理
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;建筑蓝图architecturemermaid&#34;&gt;建筑蓝图：architecture.mermaid
&lt;/h2&gt;&lt;p&gt;让我们创建一个AI能够理解的清晰的系统架构图：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph TD
A[API Gateway] --&amp;gt; B[Auth Module]
A --&amp;gt; C[User Module]
A --&amp;gt; D[Product Module]
CopyB --&amp;gt; E[(Auth DB)]
C --&amp;gt; F[(User DB)]
D --&amp;gt; G[(Product DB)]

H[Event Bus] --&amp;gt; B
H --&amp;gt; C
H --&amp;gt; D

style A fill:#f9f,stroke:#333,stroke-width:4px
style B fill:#bbf,stroke:#333,stroke-width:2px
style C fill:#bbf,stroke:#333,stroke-width:2px
style D fill:#bbf,stroke:#333,stroke-width:2px
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的代码如下所示
&lt;img src=&#34;https://blog.yearsuns.com/p/the-ultimate-guide-to-development-with-cursor/mermaid.webp&#34;
	width=&#34;720&#34;
	height=&#34;478&#34;
	srcset=&#34;https://blog.yearsuns.com/p/the-ultimate-guide-to-development-with-cursor/mermaid_hu_dfe11ceb5703835f.webp 480w, https://blog.yearsuns.com/p/the-ultimate-guide-to-development-with-cursor/mermaid_hu_3a205933c2df7c81.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;mermaid&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;高级技术架构technicalmd&#34;&gt;高级技术架构：technical.md
&lt;/h2&gt;&lt;p&gt;以下是一个示例技术架构文档，可帮助您从高层次了解该应用程序&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Overview&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    This document outlines the technical architecture &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; an AI-based IDE built using NestJS, TypeORM, and TypeScript. The system follows a modular microservices architecture with event-driven communication patterns.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Technology Stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Backend Framework**: NestJS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Database ORM**: TypeORM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Language**: TypeScript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Event Bus**: RabbitMQ
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Database**: PostgreSQL
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - **Authentication**: JWT + OAuth2
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Core Modules&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### 1. API Gateway Module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/gateway/gateway.module.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Module&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imports: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ClientsModule.register&lt;span style=&#34;color:#f92672&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AUTH_SERVICE&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            transport: Transport.RMQ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            options: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            urls: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amqp://localhost:5672&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;auth_queue&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    controllers: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ApiGatewayController&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    providers: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;ApiGatewayService&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class ApiGatewayModule &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### 2. Authentication Module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/auth/entities/user.entity.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Entity&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class User &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @PrimaryGeneratedColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; unique: true &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    email: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt;, nullable: true &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    preferences: Record&amp;lt;string, any&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/auth/auth.service.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Injectable&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class AuthService &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        @InjectRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;User&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private userRepository: Repository&amp;lt;User&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private jwtService: JwtService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    async validateUser&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;email: string, password: string&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Promise&amp;lt;any&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        const user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; await this.userRepository.findOne&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; where: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; email &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;user &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;await bcrypt.compare&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;password, user.password&lt;span style=&#34;color:#f92672&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; null;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### 3. User Module&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/user/entities/profile.entity.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Entity&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class Profile &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @PrimaryGeneratedColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @OneToOne&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; User&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @JoinColumn&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user: User;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ideSettings: Record&amp;lt;string, any&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aiPreferences: Record&amp;lt;string, any&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### 4. Product Module (IDE Core)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/ide/entities/project.entity.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Entity&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class Project &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @PrimaryGeneratedColumn&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;uuid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @ManyToOne&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; User&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    owner: User;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name: string;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;json&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    configuration: Record&amp;lt;string, any&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Column&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt; type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jsonb&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aiContext: Record&amp;lt;string, any&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Event-Driven Architecture&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Event Bus Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/common/event-bus/event-bus.module.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Module&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    imports: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ClientsModule.register&lt;span style=&#34;color:#f92672&#34;&gt;([&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            name: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EVENT_BUS&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            transport: Transport.RMQ,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            options: &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            urls: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;amqp://localhost:5672&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            queue: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;main_event_queue&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    providers: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;EventBusService&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exports: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;EventBusService&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class EventBusModule &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Event Handlers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/ide/events/code-analysis.handler.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Injectable&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class CodeAnalysisHandler &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @EventPattern&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;code.analysis.requested&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    async handleCodeAnalysis&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;@Payload&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; data: CodeAnalysisEvent&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // AI-powered code analysis logic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Database Schema&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### TypeORM Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/config/typeorm.config.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export const typeOrmConfig: TypeOrmModuleOptions &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    type: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;postgres&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    host: process.env.DB_HOST,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    port: parseInt&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;process.env.DB_PORT, 10&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username: process.env.DB_USERNAME,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password: process.env.DB_PASSWORD,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    database: process.env.DB_DATABASE,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entities: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;User, Profile, Project&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    migrations: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dist/migrations/*.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    synchronize: false,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    logging: true,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## AI Integration Services&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Code Analysis Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/ide/services/ai-analysis.service.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Injectable&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class AIAnalysisService &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private readonly httpService: HttpService,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private readonly eventBus: EventBusService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    async analyzeCode&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;code: string, context: AIContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Promise&amp;lt;AnalysisResult&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // AI model integration logic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Code Completion Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/ide/services/code-completion.service.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Injectable&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class CodeCompletionService &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private readonly aiService: AIService,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        private readonly codeContextService: CodeContextService
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    async getCompletion&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        code: string,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        position: Position,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context: CompletionContext
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: Promise&amp;lt;CompletionSuggestion&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // Code completion logic
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Security Implementations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Authentication Guard&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/auth/guards/jwt-auth.guard.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    @Injectable&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    export class JwtAuthGuard extends AuthGuard&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jwt&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;private reflector: Reflector&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        super&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    canActivate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context: ExecutionContext&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        const isPublic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; this.reflector.getAllAndOverride&amp;lt;boolean&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;IS_PUBLIC_KEY, &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context.getHandler&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        context.getClass&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;])&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;isPublic&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; true;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; super.canActivate&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Deployment Architecture&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Docker Configuration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;dockerfile
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Dockerfile&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    FROM node:16-alpine
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    WORKDIR /usr/src/app
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    COPY package*.json ./
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RUN npm install
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    COPY . .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RUN npm run build
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    EXPOSE &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;npm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;run&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;start:prod&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;### Docker Compose Setup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;yaml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# docker-compose.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    version: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3.8&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    services:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    api:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        build: .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;3000:3000&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        depends_on:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - postgres
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - rabbitmq
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    postgres:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image: postgres:13
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        environment:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        POSTGRES_PASSWORD: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DB_PASSWORD&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        POSTGRES_DB: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DB_NAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rabbitmq:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        image: rabbitmq:3-management
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ports:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;5672:5672&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;15672:15672&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Scaling Considerations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1. **Horizontal Scaling**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use Kubernetes &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; container orchestration
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Implement load balancing at the API Gateway level
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Scale individual microservices independently
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    2. **Performance Optimization**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Implement caching strategies using Redis
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Optimize database queries and indexes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use WebSocket &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; real-time features
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    3. **Monitoring and Logging**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Implement ELK stack &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; centralized logging
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Use Prometheus and Grafana &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; metrics
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Set up application performance monitoring
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Development Workflow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1. **Local Development**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;bash
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Start development environment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    npm run start:dev
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Run database migrations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    npm run typeorm migration:run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Generate new migration&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    npm run typeorm migration:generate -- -n MigrationName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    2. **Testing Strategy**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;typescript
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    // src/ide/tests/code-analysis.service.spec.ts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    describe&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CodeAnalysisService&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        let service: CodeAnalysisService;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        beforeEach&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;async &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        const module: TestingModule &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; await Test.createTestingModule&lt;span style=&#34;color:#f92672&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            providers: &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;CodeAnalysisService&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;.compile&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        service &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; module.get&amp;lt;CodeAnalysisService&amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;CodeAnalysisService&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        it&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;should analyze code correctly&amp;#34;&lt;/span&gt;, async &lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        // Test implementation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;## Future Considerations&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    1. **AI Model Integration**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Support &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; multiple AI models
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Custom model training capabilities
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Model versioning and A/B testing
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    2. **Extensibility**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Plugin architecture
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Custom extension marketplace
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - API versioning strategy
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    3. **Developer Experience**
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Interactive documentation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - Developer portal
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - API playground
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;任务分解tasksmd&#34;&gt;任务分解：tasks.md
&lt;/h2&gt;&lt;p&gt;以下是如何构建 AI 理解任务：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 当前 Sprint 任务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## USER-001：实现用户身份验证&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;状态：进行中
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;优先级：高
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;依赖性：无
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### 要求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 电子邮件/密码身份验证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- JWT 令牌生成
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 使用 bcrypt 进行密码哈希处理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 登录尝试的速率限制
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### 验收标准&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.用户可以使用电子邮件/密码注册
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2.用户在登录成功后收到 JWT 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.密码经过安全哈希处理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4.登录尝试失败的速率受到限制
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;### 技术说明&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 使用@nestjs/jwt 进行令牌管理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 使用 Redis 实现速率限制
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 遵循来自 Technical.md 的身份验证模式
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;进度跟踪statusmd&#34;&gt;进度跟踪：status.md
&lt;/h2&gt;&lt;p&gt;该文件可帮助 AI 了解当前的开发状态：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 项目状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 已完成的功能&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 基本项目设置
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 数据库连接
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 基本模块结构
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 进行中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-用户身份验证（USER-001）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - ✅ 基本用户模型
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - ✅ 密码哈希
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - 🏗️ JWT 实施
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - ⏳ 速率限制
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 待定&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 电子邮件验证
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 密码重置流程
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 用户配置文件管理
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;## 已知问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- 目前无
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;管理上下文和文件引用&#34;&gt;管理上下文和文件引用
&lt;/h2&gt;&lt;p&gt;Cursor 的真正威力来自智能上下文管理。每当您达到上下文限制时（大型项目中经常发生这种情况），您都需要一种方法来快速恢复 AI 对项目的理解。这就是我们的文件结构和引用系统变得至关重要的地方。让我们看看它的实际效果：&lt;/p&gt;
&lt;h2 id=&#34;了解上下文限制以及-statusmd-为何至关重要&#34;&gt;了解上下文限制以及 status.md 为何至关重要
&lt;/h2&gt;&lt;p&gt;大多数教程都不会告诉你：像 Cursor 这样的 AI 助手有上下文限制。一旦达到该限制，AI 就会失去对之前更改和讨论的跟踪。这时 status.md 就会成为你的生命线。&lt;/p&gt;
&lt;p&gt;将 status.md 视为项目的内存。当 Cursor 达到其上下文限制时（这种情况发生的频率比您想象的要高），您可以使用 status.md 快速恢复上下文，而无需再次解释所有内容。&lt;/p&gt;
&lt;p&gt;达到上下文限制的示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;你：让我们继续进行身份验证服务
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cursor：*由于上下文限制，对之前的实施细节一无所知*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;你：@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/status.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 让我们继续进行 JWT 实施
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cursor：*现在了解当前状态并可以适当地继续*
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cursor-中的实用文件引用&#34;&gt;Cursor 中的实用文件引用
&lt;/h2&gt;&lt;p&gt;您无需编写命令，而是可以通过以下方式在 Cursor 中实际引用文件：&lt;/p&gt;
&lt;h3 id=&#34;1-从多个文件添加上下文&#34;&gt;1. 从多个文件添加上下文：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/status.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/technical.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;tasks/tasks.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;现在，让我们实现 JWT 身份验证服务……
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-检查当前实施情况&#34;&gt;2. 检查当前实施情况：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;您能根据@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/technical.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 规范添加速率限制吗？
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;真实示例构建身份验证服务&#34;&gt;真实示例：构建身份验证服务
&lt;/h2&gt;&lt;p&gt;让我们看看在适当的文件引用和上下文管理下，这在实践中是如何实现的：&lt;/p&gt;
&lt;h3 id=&#34;1-首先收集背景信息&#34;&gt;1. 首先收集背景信息：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/architecture.mermaid&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;tasks/tasks.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/status.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;我需要帮助从 USER-001 实现 JWT 身份验证服务。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2在实施过程中当您遇到上下文限制时&#34;&gt;2.在实施过程中，当您遇到上下文限制时：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/status.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;让我们继续 JWT 服务的实现。我们正在研究速率限制。
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-添加新功能时&#34;&gt;3. 添加新功能时：
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/technical.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;您能按照我们的技术规范添加密码重置功能吗？
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;为什么这种方法有效&#34;&gt;为什么这种方法有效
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每次引用文件时，Cursor 都会获取最新的上下文&lt;/li&gt;
&lt;li&gt;status.md 帮助跟踪上下文重置的进度&lt;/li&gt;
&lt;li&gt;即使失去背景信息，技术规格仍保持一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现实检验人工智能不是魔法而是一种工具&#34;&gt;现实检验：人工智能不是魔法，而是一种工具
&lt;/h2&gt;&lt;p&gt;让我们来谈谈这个显而易见的问题——人工智能编码助手通常被宣传为能够编写整个应用程序的神奇代码生成器。这正是许多开发人员感到沮丧并声称“人工智能产生的错误比代码还多”的原因。&lt;/p&gt;
&lt;p&gt;现实情况是：人工智能就像拥有一位出色的初级开发人员，他：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;具有完美的模式记忆（在上下文限制内）&lt;/li&gt;
&lt;li&gt;能够以闪电般的速度编写样板文件&lt;/li&gt;
&lt;li&gt;应对复杂的业务逻辑&lt;/li&gt;
&lt;li&gt;需要明确的规范和指导&lt;/li&gt;
&lt;li&gt;遵循测试驱动开发时效果最佳&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么大多数开发人员在-ai-方面遇到困难&#34;&gt;为什么大多数开发人员在 AI 方面遇到困难
&lt;/h2&gt;&lt;p&gt;我看到的典型方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;开发人员：“使用 OAuth 为我构建一个用户身份验证系统” 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AI：*生成看似完整的代码*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;开发人员：*在边缘情况下发现错误*
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;开发人员：“AI 不可靠！”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;真正的问题是什么？我们错误地使用了人工智能。让我告诉你如何改变你的方法。&lt;/p&gt;
&lt;h2 id=&#34;测试驱动开发tdd抵御人工智能幻觉的盾牌&#34;&gt;测试驱动开发（TDD）：抵御人工智能幻觉的盾牌
&lt;/h2&gt;&lt;p&gt;真相是：人工智能会产生幻觉。它会编写看似合理但实际上却错误的代码。解决方案是什么？TDD。&lt;/p&gt;
&lt;p&gt;考虑一下这个现实世界的场景：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ❌ Without TDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Developer: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add password reset functionality&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// AI generates code that:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// - Looks correct
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// - Handles the happy path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// - Misses critical edge cases
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// - Has security vulnerabilities in token validation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ✅ With TDD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.spec.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Developer: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Here are the test cases for password reset:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;describe(&amp;#39;PasswordResetService&amp;#39;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  it(&amp;#39;should throw if token is expired&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  it(&amp;#39;should prevent timing attacks in token comparison&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  it(&amp;#39;should rate limit reset attempts&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  it(&amp;#39;should handle non-existent emails securely&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;// Now implement the service to pass these tests&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TDD 为何能与 AI 协同工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强制明确要求&lt;/li&gt;
&lt;li&gt;防止出现幻觉行为&lt;/li&gt;
&lt;li&gt;尽早发现边缘情况&lt;/li&gt;
&lt;li&gt;维护安全考虑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;真正的开发陷阱以及如何避免&#34;&gt;真正的开发陷阱（以及如何避免）
&lt;/h2&gt;&lt;h3 id=&#34;1-复杂逻辑幻觉&#34;&gt;1. 复杂逻辑幻觉
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ❌ 危险：让 AI 直接处理复杂的业务逻辑
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;“实现账单计算逻辑” 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ✅ 安全：通过测试分解
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/billing/billing.spec.ts &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;“实现账单计算以通过以下测试用例： 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; .基本费率计算
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. 批量折扣
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3. 特殊节假日费率
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4. 多币种支持”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-状态管理陷阱&#34;&gt;2. 状态管理陷阱
&lt;/h3&gt;&lt;p&gt;当 AI 处理状态时，它经常会产生细微的错误。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ❌ Problematic
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []; &lt;span style=&#34;color:#75715e&#34;&gt;// Global state!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Race conditions waiting to happen
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ✅ Correct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;UserService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userRepository&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;UserRepository&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createUser&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;User&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;userRepository&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;transaction&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;repo&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;repo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;save&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;3-依赖地狱&#34;&gt;3. 依赖地狱
&lt;/h3&gt;&lt;p&gt;AI 喜欢创建循环依赖。以下是防止它们的方法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ❌ AI 的自然倾向
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/user/user.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 依赖于 @&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 依赖于 @&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/user/user.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// ✅ 正确的方法
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/architecture.mermaid&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;“给定这种架构，实现用户服务以确保：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1.依赖关系单向流动
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2.使用接口进行跨模块通信
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3.事件驱动通信满足循环需求”
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;上下文限制实用指南&#34;&gt;上下文限制：实用指南
&lt;/h2&gt;&lt;p&gt;当你达到上下文限制时（你会的），实际上会发生以下情况：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Initial implementation
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add OAuth support&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// AI: Implements OAuth perfectly
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Later in the conversation...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add refresh token support&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// AI: Implements it incorrectly because it lost context
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// Solution: Restore context with status
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;docs/status.md&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;@&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;src/auth/auth.service.ts&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Add refresh token support to our OAuth implementation&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;// AI: Now has full context and implements correctly
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;真实世界情境管理&#34;&gt;真实世界情境管理：
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;保持 status.md 专注于架构决策&lt;/li&gt;
&lt;li&gt;记录关键实施模式&lt;/li&gt;
&lt;li&gt;参考相关测试来进行行为规范&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;安全和错误处理隐藏的陷阱&#34;&gt;安全和错误处理：隐藏的陷阱
&lt;/h2&gt;&lt;p&gt;人工智能有一种危险的倾向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;跳过错误处理&lt;/li&gt;
&lt;li&gt;使用不安全的类型断言&lt;/li&gt;
&lt;li&gt;错过安全验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;解决方案：使用明确的错误和安全测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ts&#34; data-lang=&#34;ts&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;describe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;UserAuthentication&amp;#39;&lt;/span&gt;, () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;should handle SQL injection attempts&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;should prevent timing attacks&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;should rate limit failed attempts&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;should log security events&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;it&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;should sanitize error messages&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;清洁人工智能开发的最佳实践&#34;&gt;清洁人工智能开发的最佳实践
&lt;/h2&gt;&lt;h3 id=&#34;1-总是从架构开始&#34;&gt;1. 总是从架构开始
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先更新你的美人鱼图&lt;/li&gt;
&lt;li&gt;确保人工智能理解系统边界&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-分解任务&#34;&gt;2. 分解任务
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建明确、重点突出的任务&lt;/li&gt;
&lt;li&gt;包括所有要求和验收标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-保持状态&#34;&gt;3. 保持状态
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;保持 status.md 更新&lt;/li&gt;
&lt;li&gt;跟踪进度和问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4使用tdd&#34;&gt;4.使用TDD
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;首先编写测试&lt;/li&gt;
&lt;li&gt;让AI实现通过测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;成功开发 AI 的关键不在于拥有最聪明的 AI，而在于赋予它正确的背景和结构。通过遵循此策略，您将把 Cursor 从有时有用的工具转变为可靠的开发合作伙伴。&lt;/p&gt;
&lt;p&gt;记住：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清晰的架构&lt;/li&gt;
&lt;li&gt;结构化任务&lt;/li&gt;
&lt;li&gt;明确规则&lt;/li&gt;
&lt;li&gt;持续更新&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;停止与人工智能争斗，开始与它合作。结果可能会让你大吃一惊。&lt;/p&gt;
&lt;p&gt;注：本文译自 &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@vrknetha/the-ultimate-guide-to-ai-powered-development-with-cursor-from-chaos-to-clean-code-fc679973bbc4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/@vrknetha/the-ultimate-guide-to-ai-powered-development-with-cursor-from-chaos-to-clean-code-fc679973bbc4&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>摆脱“话题终结者”！心理学教你3步升级为沟通大师✨</title>
        <link>https://blog.yearsuns.com/p/the-science-of-high-impact-communication/</link>
        <pubDate>Thu, 13 Feb 2025 20:38:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/the-science-of-high-impact-communication/</guid>
        <description>&lt;h2 id=&#34;1-聊天现状你在说人话但对方没听懂&#34;&gt;1. 聊天现状：你在说人话，但对方没听懂
&lt;/h2&gt;&lt;p&gt;你有没有过这样的经历？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你兴致勃勃地向朋友吐槽工作：“哎，我最近忙得要疯了！”结果对方只回了一句：“嗯，真辛苦啊。”&lt;/li&gt;
&lt;li&gt;想和对象沟通：“我们可以多花点时间在一起吗？”结果人家理解成了“你是不是嫌我陪得还不够？”&lt;/li&gt;
&lt;li&gt;开会时侃侃而谈，末了却发现大家脸上写满了“所以你想说啥？”的表情。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⭐你费尽口舌，对方一脸懵逼；你努力铺垫，核心意思全跑偏。这种“鸡同鸭讲”的情况是不是让你崩溃到怀疑人生？&lt;/p&gt;
&lt;p&gt;别担心，这并不是因为你“不够聪明”或者“社交恐惧”，而是因为你的沟通方式需要升级。下面，我们从心理学角度拆解问题根源，再给出一份人人适用的沟通宝典！&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;2-心理学拆解为啥明明说了却没传达清楚&#34;&gt;2. 心理学拆解：为啥“明明说了”却没传达清楚？
&lt;/h2&gt;&lt;h3 id=&#34;误区一信息超载别人没抓住重点&#34;&gt;❗误区一：信息超载，别人没抓住重点
&lt;/h3&gt;&lt;p&gt;心理学上有个概念叫“认知负荷理论”。当信息量过大时，人脑会像“内存不足”的电脑一样自动跳过部分内容。而很多人表达时会“前情提要+背景介绍+长篇感慨”，最后忘了告诉对方核心需求。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我最近工作好多压力啊，晚上熬夜写方案，白天还要跟客户开会，周末本想休息还被拉去团建，我感觉快撑不下去了……”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对方接收到的关键词可能是：工作、熬夜、团建。但你真正想表达的是“我需要支持”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学解法：少讲背景，多讲核心。用清晰的逻辑简化信息传递，避免听者迷路。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;误区二情绪先行信息被情绪屏蔽&#34;&gt;❗误区二：情绪先行，信息被情绪屏蔽
&lt;/h3&gt;&lt;p&gt;情绪是沟通的双刃剑。当你在表达时情绪过于激烈（生气、委屈、沮丧），对方的注意力可能会被你的情绪吸引，而忽略了你的实际诉求。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“你为什么总是不回我消息？我真的很生气！是不是根本不在乎我！”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对方的大脑此时的翻译器可能工作成这样：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;情绪输入：生气、指责&lt;/li&gt;
&lt;li&gt;行动输出：回避、不敢沟通&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;心理学解法：表达感受时，把情绪和需求分开。情绪引导可以软化开头，需求要明确表达。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;误区三假设对方能读懂你的潜台词&#34;&gt;❗误区三：假设对方能读懂你的“潜台词”
&lt;/h3&gt;&lt;p&gt;你以为表达了一切，但对方却完全没听懂。心理学研究表明，每个人的认知框架不同，你的“理所当然”可能是别人的“完全陌生”。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你对队友说：“报告PPT今天能不能早点搞定？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;而对方可能在想：“‘早点’是多早？今晚10点？还是明早8点？”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;心理学解法：用具体的语言取代模糊的指令，把潜台词变成明台词。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;3-解决方案3步搞定高效沟通&#34;&gt;3. 解决方案：3步搞定高效沟通
&lt;/h2&gt;&lt;h3 id=&#34;第一步用黄金三段式表达需求&#34;&gt;第一步：用“黄金三段式”表达需求
&lt;/h3&gt;&lt;p&gt;心理学家推荐的“黄金三段式”，可以让你的沟通简单又高效。&lt;/p&gt;
&lt;p&gt;公式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;感受+事实+需求&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误表达：“为什么你都不陪我？”&lt;/li&gt;
&lt;li&gt;黄金三段式：“我最近感觉有点孤单（感受）。你上周末和这周都很忙，没一起吃饭（事实）。下次周末我们能一起吃个饭吗（需求）？”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这么说是不是更容易让对方明白你的需求？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二步巧用提问引导代替说教&#34;&gt;第二步：巧用“提问引导”代替说教
&lt;/h3&gt;&lt;p&gt;与其“输出式表达”，不如通过提问让对方参与。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提问的威力：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开放式提问&lt;/strong&gt;（多问“怎么想”）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误：&amp;ldquo;你根本没用心听我说话！&amp;rdquo;&lt;/li&gt;
&lt;li&gt;改进：&amp;ldquo;你觉得刚刚我说的那些，哪个部分比较重要？&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择式提问&lt;/strong&gt;（给选项降低压力）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;错误：&amp;ldquo;你打算什么时候改这个方案？&amp;rdquo;&lt;/li&gt;
&lt;li&gt;改进：&amp;ldquo;我们是今天讨论细节，还是明天具体落实？&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;提问不仅让对方更有参与感，还能巧妙避免冲突。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三步多用复述确认打消误解&#34;&gt;第三步：多用“复述确认”打消误解
&lt;/h3&gt;&lt;p&gt;复述是一种被心理学验证过的高效沟通技巧。用自己的语言总结对方表达的内容，能避免“鸡同鸭讲”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复述公式：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“你是说……对吗？”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;错误方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;甲：“我最近感觉好累。”&lt;/li&gt;
&lt;li&gt;乙：“多休息吧。”（误解对方意思）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;正确方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;甲：“我最近感觉好累。”&lt;/li&gt;
&lt;li&gt;乙：“你是说最近事情太多让你有点承受不住了？”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;复述不仅能让对方感受到被理解，还能让你捕捉到对方的真实需求。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第四步善用肢体语言提升沟通效果&#34;&gt;第四步：善用肢体语言提升沟通效果
&lt;/h3&gt;&lt;p&gt;心理学研究显示，语言只占沟通的7%，语气和肢体语言却占到了93%。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;保持眼神交流&lt;/strong&gt;：眼神能传递专注感和信任感。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用开放的肢体动作&lt;/strong&gt;：双臂张开比交叉在胸前更容易让人感到亲近。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;适当点头和微笑&lt;/strong&gt;：增强对方的表达欲望。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;肢体语言是一种无声的沟通技巧，掌握它可以让你的表达如虎添翼。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第五步利用沉默技巧创造空间&#34;&gt;第五步：利用“沉默技巧”创造空间
&lt;/h3&gt;&lt;p&gt;很多人以为沟通就是不停地说，但心理学认为，适当的沉默反而能带来意想不到的效果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沉默制造思考&lt;/strong&gt;：当你表达完后，给对方一些时间消化和回应，而不是急于填补空白。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沉默化解冲突&lt;/strong&gt;：当对方情绪激动时，安静的聆听比言语更有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;沉默是沟通的高级形式，学会用沉默说话，你的对话会更加流畅。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;4-总结沟通高手的秘密其实是懂得聆听表达精准&#34;&gt;4. 总结：沟通高手的秘密，其实是“懂得聆听+表达精准”
&lt;/h2&gt;&lt;p&gt;说到底，沟通的本质不是“说得多”，而是“听得准、说得对”。心理学家认为，每一次成功的沟通背后，都有以下关键：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;明确目的&lt;/strong&gt;：你希望对方理解什么？解决什么问题？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少噪音&lt;/strong&gt;：摒弃无关信息，直击核心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用心倾听&lt;/strong&gt;：通过提问与复述确认对方的感受和需求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调整表达方式&lt;/strong&gt;：结合语言、肢体和情绪多维度传递信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;创造对话空间&lt;/strong&gt;：在表达和沉默中找到平衡。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以，下次当你发现对话陷入“鸡同鸭讲”时，不妨用这些方法试试看。掌握了这些心理学技巧，你不只是沟通小白升级为大师，甚至可能成为“人类话语机器”！（开玩笑✨）&lt;/p&gt;
&lt;p&gt;最后，记住这句话：沟通不是天赋，是技能；而技能，可以习得。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>REST API的最佳实践</title>
        <link>https://blog.yearsuns.com/p/best-practices-for-rest-api/</link>
        <pubDate>Wed, 12 Feb 2025 12:13:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/best-practices-for-rest-api/</guid>
        <description>&lt;h2 id=&#34;我们将从这篇文章中学到什么&#34;&gt;我们将从这篇文章中学到什么
&lt;/h2&gt;&lt;h3 id=&#34;-rest-api-的基本原则&#34;&gt;👉 REST API 的基本原则
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RESTful架构的核心概念&lt;/li&gt;
&lt;li&gt;关键 HTTP 方法及其适当用途&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-api-设计的最佳实践&#34;&gt;👉 API 设计的最佳实践
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如何设计有意义且高效的面向资源的 URL。&lt;/li&gt;
&lt;li&gt;正确使用标准 HTTP 状态代码的重要性。&lt;/li&gt;
&lt;li&gt;实现过滤、排序和分页的技术。&lt;/li&gt;
&lt;li&gt;需要清晰、一致的 API 文档和工具来帮助实现这一点。&lt;/li&gt;
&lt;li&gt;有效的 API 版本控制策略，以确保向后兼容性。&lt;/li&gt;
&lt;li&gt;保护 API 安全的最佳实践，包括身份验证和 HTTPS。&lt;/li&gt;
&lt;li&gt;如何以用户友好且信息丰富的方式处理错误。&lt;/li&gt;
&lt;li&gt;维护 RESTful 原则和避免常见错误的实用技巧。&lt;/li&gt;
&lt;li&gt;对设计可扩展且直观的 API 的见解。&lt;/li&gt;
&lt;li&gt;API 设计中的常见陷阱以及如何避免它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-实用的注意事项&#34;&gt;👉 实用的注意事项
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;维护 RESTful 原则和避免常见错误的实用技巧。&lt;/li&gt;
&lt;li&gt;对设计可扩展且直观的 API 的见解。&lt;/li&gt;
&lt;li&gt;API 设计中的常见陷阱以及如何避免它们。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是-api&#34;&gt;什么是 API？
&lt;/h2&gt;&lt;p&gt;应用程序编程接口 (API) 是用于集成应用软件和服务的一组工具、定义和协议。它可以让您的产品和服务与其他产品和服务进行通信，而无需不断构建新的连接基础设施。&lt;/p&gt;
&lt;p&gt;API 可以是私有的（仅供内部使用）、合作的（与特定合作伙伴共享以提供额外的收入来源）或公开的（允许第三方开发与您的 API 交互的应用程序以促进创新）。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/en/topics/api/what-is-a-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.redhat.com/en/topics/api/what-is-a-rest-api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;什么是-rest-api&#34;&gt;什么是 REST API？
&lt;/h2&gt;&lt;p&gt;REST API（也称为 RESTful API）是一种符合 REST 架构风格约束并允许与 RESTful Web 服务交互的应用程序编程接口（API 或 Web API）。REST 代表表述性状态转移，由计算机科学家 Roy Fielding 创建。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.redhat.com/en/topics/api/what-is-a-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.redhat.com/en/topics/api/what-is-a-rest-api&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;rest-api-架构约束&#34;&gt;REST API 架构约束
&lt;/h2&gt;&lt;p&gt;REST 是一组架构约束，而不是协议或标准。以下是理想 RESTful API 的约束：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;客户端-服务器架构&lt;/strong&gt;：由客户端、服务器和资源组成的客户端-服务器架构，请求通过 HTTP 进行管理。只要服务器和客户端之间的接口不变，它们也可以被替换和独立开发（也可以使用不同的编程语言）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;无状态&lt;/strong&gt;：在客户端-服务器通信中，在处理请求传输期间，服务器上不应存储任何数据。这意味着请求之间不会存储任何客户端信息，并且每个请求都是独立且无关联的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可缓存&lt;/strong&gt;：客户端应该能够将响应存储在缓存中。这极大地提高了 API 的性能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层系统&lt;/strong&gt;：服务器可以有多个层级来实现。这种分层架构有助于通过实现负载平衡来提高可扩展性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按需代码&lt;/strong&gt;：此约束是可选的。此约束表示可以通过允许从服务器下载代码并执行代码来在运行时扩展客户端应用程序的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统一接口&lt;/strong&gt;：统一接口约束是任何 RESTful 系统设计的基础。它简化并解耦了架构，使每个部分能够独立发展。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这个统一接口的四个约束是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;请求中的资源标识&lt;/strong&gt;：使用 URI 在请求中标识单个资源。资源本身在概念上与返回给客户端的表示形式是分开的。例如，服务器可以将数据库中的数据以 HTML、XML 或 JSON 的形式发送，而这些都不是服务器的内部表示形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通过表示来操作资源&lt;/strong&gt;：当客户端持有资源的表示（包括附加的任何元数据）时，它有足够的信息来修改或删除资源的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自描述消息&lt;/strong&gt;：每条消息都包含足够的信息来描述如何处理该消息。例如，可以通过媒体类型指定要调用哪个解析器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;超媒体作为应用程序状态引擎 (HATEOAS)&lt;/strong&gt; — 访问 REST 应用程序的初始 URI 后（类似于人类 Web 用户访问网站主页），REST 客户端应该能够动态使用服务器提供的链接来发现所需的所有可用资源。随着访问的进行，服务器将使用包含指向当前可用的其他资源的超链接的文本进行响应。客户端无需使用有关服务器结构的信息进行硬编码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;来源：&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/REST#Uniform_interface&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://en.wikipedia.org/wiki/REST#Uniform_interface&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是资源&#34;&gt;什么是资源？
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;REST中信息的关键抽象是资源。任何可以命名的信息都可以是资源：文档或图像、时间服务（例如“洛杉矶今日天气”）、其他资源的集合（例如“今日畅销产品”，即产品资源的集合）、非虚拟对象（例如人）等等。&lt;/p&gt;
&lt;p&gt;— &lt;a class=&#34;link&#34; href=&#34;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_2_1_1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Roy Fielding 的论文&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;单例和集合资源&#34;&gt;单例和集合资源
&lt;/h3&gt;&lt;p&gt;资源可以是单例，也可以是集合。&lt;/p&gt;
&lt;p&gt;例如，&amp;ldquo;customers&amp;rdquo; 是一个集合资源，&amp;ldquo;customer&amp;rdquo; 是一个单例资源。&lt;/p&gt;
&lt;p&gt;我们可以使用 URI 来识别 &amp;ldquo;customers&amp;rdquo; 集合资源。我们可以使用 URI 来&lt;code&gt;/customers&lt;/code&gt;识别单个 &amp;ldquo;customer&amp;rdquo; 资源&lt;code&gt;/customers/{customerId}&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/customers // 是一个集合资源
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/customers/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; // 是一个单例资源
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;集合和子集资源&#34;&gt;集合和子集资源
&lt;/h3&gt;&lt;p&gt;资源也可能包含子集资源。&lt;/p&gt;
&lt;p&gt;例如，可以使用以下方式识别特定 &amp;ldquo;customers&amp;rdquo; 的子集资源 &amp;ldquo;account&amp;rdquo; &lt;code&gt;/customers/{customerId}/accounts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;类似地，可以识别子集合资源 &amp;ldquo;accounts&amp;rdquo; 内的单例资源 &amp;ldquo;account&amp;rdquo; &lt;code&gt;/customers/{customerId}/accounts/{accountId}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;/customers //是一个集合资源&lt;/p&gt;
&lt;p&gt;/customers/{ id }/accounts //是一个子集合资源（客户的帐户）&lt;/p&gt;
&lt;p&gt;/customers/{customerId}/accounts/{accountId} //是一个单例资源（客户的特定帐户）&lt;/p&gt;
&lt;h2 id=&#34;uri统一资源标识符&#34;&gt;URI（统一资源标识符）
&lt;/h2&gt;&lt;p&gt;URI 代表&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Uniform_Resource_Identifier&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;统一资源标识符&lt;/a&gt;(URI)。它标识网络上的逻辑或物理资源。URL 和 URN 是 URI 的子类型。URL 定位资源，而 URN 命名资源。&lt;/p&gt;
&lt;p&gt;REST API 使用 URI 来定位资源。REST API 设计人员应创建 URI，以便将 REST API 的资源模型传达给 API 的潜在客户。如果资源命名得当，API 就会直观且易于使用。如果命名不当，同一个 API 的使用和理解就会变得困难。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri.webp&#34;
	width=&#34;720&#34;
	height=&#34;177&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri_hu_fba245286d270c77.webp 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/uri_hu_179c012895a3cc30.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;URI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;406&#34;
		data-flex-basis=&#34;976px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url.webp&#34;
	width=&#34;720&#34;
	height=&#34;271&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url_hu_efb5016e88ace6ee.webp 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/uri-vs-url_hu_8039dcaf63480cdb.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;URI 与 URL 之间的区别（来源：https://refine.dev/blog/uri-vs-url/#introduction）&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;265&#34;
		data-flex-basis=&#34;637px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;最佳实践应该做的和不应该做的&#34;&gt;最佳实践：应该做的和不应该做的
&lt;/h2&gt;&lt;h3 id=&#34;1-使用适当的-http-方法动词定义-api-操作&#34;&gt;1. 使用适当的 HTTP 方法（动词）定义 API 操作
&lt;/h3&gt;&lt;p&gt;HTTP协议定义了许多为请求赋予语义的方法。大多数 RESTful Web API 使用的常见 HTTP 方法包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;在指定的 URI 处检索资源的表述，响应消息的主体包含所请求资源的详细信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;在指定的 URI 处创建新资源，请求消息的主体提供了新资源的详细信息。注意：POST还可用于触发不实际创建资源的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PUT&lt;/strong&gt;在指定的 URI 处创建或替换资源，请求消息的主体指定要创建或更新的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;对资源执行部分更新，请求主体指定要应用于资源的一组更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;DELETE&lt;/strong&gt;删除指定 URI 处的资源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特定请求的效果应取决于资源是集合还是单个项目。下表使用电子商务示例总结了大多数 RESTful 实现所采用的通用约定。&lt;/p&gt;
&lt;p&gt;注意：并非所有这些请求都可能被实现——这取决于具体情况。&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Resource&lt;/th&gt;
          &lt;th&gt;POST&lt;/th&gt;
          &lt;th&gt;GET&lt;/th&gt;
          &lt;th&gt;PUT&lt;/th&gt;
          &lt;th&gt;DELETE&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers&lt;/td&gt;
          &lt;td&gt;Create a new customer&lt;/td&gt;
          &lt;td&gt;Retrieve all customers&lt;/td&gt;
          &lt;td&gt;Bulk update of customers&lt;/td&gt;
          &lt;td&gt;Remove all customers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers/1&lt;/td&gt;
          &lt;td&gt;Error&lt;/td&gt;
          &lt;td&gt;Retrieve the details for customer 1&lt;/td&gt;
          &lt;td&gt;Update the details of customer 1 if it exists&lt;/td&gt;
          &lt;td&gt;Remove customer 1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;/customers/1/orders&lt;/td&gt;
          &lt;td&gt;Create a new order for customer 1&lt;/td&gt;
          &lt;td&gt;Retrieve all orders for customer 1&lt;/td&gt;
          &lt;td&gt;Bulk update of orders for customer 1&lt;/td&gt;
          &lt;td&gt;Remove all orders for customer 1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;POST&lt;/strong&gt;、&lt;strong&gt;PUT&lt;/strong&gt;和&lt;strong&gt;PATCH&lt;/strong&gt;之间的区别可能会令人困惑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;POST请求创建资源并将其添加到资源集合中。然后向客户端返回新创建的资源 URI。POST请求还可用于向现有资源提交数据以供处理，而无需创建任何新资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PUT请求会创建资源或更新现有资源。请求正文包含资源的完整表述。如果具有此 URI 的资源已存在，则将其替换。否则，如果服务器支持，则创建新资源。PUT请求最常应用于作为单个项目（例如特定客户）的资源，而不是集合。服务器可能支持更新但不支持通过 PUT 创建。是否支持通过 PUT 创建取决于客户端是否可以在资源存在之前有意义地为其分配URI。如果不能，则使用POST创建资源，使用PUT或PATCH进行更新。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PATCH请求对现有资源执行部分更新。请求正文指定要应用于资源的一组更改。这比使用PUT更高效，因为客户端仅发送更改，而不是资源的整个表示。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PUT请求必须是幂等的。如果客户端多次提交相同的PUT请求，则结果应该始终相同（将使用相同的值修改相同的资源）。POST和PATCH请求不保证是幂等的。&lt;/p&gt;
&lt;h3 id=&#34;2-使用名词复数名词表示资源&#34;&gt;2. 使用名词（复数名词）表示资源
&lt;/h3&gt;&lt;p&gt;RESTful URI 应该引用作为事物（名词）的资源，而不是引用动作（动词），因为名词具有动词所不具备的属性 — 同样，资源也具有属性。以下是一些资源示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户(user)&lt;/li&gt;
&lt;li&gt;帐户(account)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其资源URI可以设计如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;HTTP Method&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/accounts&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of accounts&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/accounts/{accountNumber}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns the account with account number &lt;code&gt;{accountNumber}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/users&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of users&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/users/{id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns the user with ID &lt;code&gt;{id}&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/orders&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Good&lt;/strong&gt; - Returns a list of orders&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/create-order&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Avoid&lt;/strong&gt; - verb or action-based names&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/students&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Good&lt;/strong&gt; - Returns a list of students&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/student&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;&lt;strong&gt;Avoid&lt;/strong&gt; - singular names&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;3使用子资源建立关系&#34;&gt;3.使用子资源建立关系
&lt;/h3&gt;&lt;p&gt;使用一致的资源命名约定和 URI 格式，以最大程度地减少歧义并实现最大的可读性和可维护性。实施以下设计提示可实现一致性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 REST 中，关系通常由子资源建模。对子资源使用以下模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;HTTP Method&lt;/th&gt;
          &lt;th&gt;Endpoint&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a list of sub-resources&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}/{sub-resource-id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a specific sub-resource&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;POST&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/{resource}/{resource-id}/{sub-resource}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Creates a new sub-resource&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a list of comments for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments/{comment-id}&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Retrieves a specific comment for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;POST&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/post/{post-id}/comments&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Creates a new comment for a post&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/cars/711/drivers/&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns a list of drivers for car 711&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;GET&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/cars/711/drivers/4&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;Returns driver #4 for car 711&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;4注重可读性和一致性&#34;&gt;4.注重可读性和一致性
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不要在 URI 中使用尾部斜杠 (/)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices /*✅这是一个更好的版本*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用连字符 (-) 和短横线命名 ( some-var-name) 来提高 URI 的可读性&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /devicemanagement/manageddevices/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /device-management/managed-devices /*✅这是一个更好的版本* / 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /m y -folder/ my -doc // ✅ 推荐
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /MY-FOLDER/ my -doc // ❌ 避免
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /My-Folder/ my -doc // ❌ 避免
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;避免使用下划线 ( _ ) 和驼峰式命名 ( someVarName) 蛇形命名 ( some_var_name) 帕萨尔式命名 ( SomeVarName)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managed-entities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/install-script-location // ✅ 更易读
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managed_entities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/install_Script_Location // ❌ 蛇形命名法- 易读但不常规
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /managedEntities/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/installScriptLocation // ❌ 驼峰命名法- 可读性较差
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不要使用文件扩展名&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/device-management/managed-devices.xml /*❌请勿使用它*/ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/device-management/managed-devices /*✅这是正确的 URI*/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;切勿在 URI 中使用CRUD函数名称&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* ❌ 避免 */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET / get -managed-devices      
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP POST /create-managed-devices 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;/* ✅ 推荐 */
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET /managed-devices          // 获取所有设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP POST /managed-devices          // 创建新设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP GET /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 获取给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP PUT /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 更新给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HTTP DELETE /managed-devices/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;     // 删除给定 Id 的设备
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不要在 URI 中使用动词&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /scripts/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/execute    // ❌ 不要这样做！- 这是 RPC，而不是 REST
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;POST /scripts               // ✅ 推荐：使用 POST 操作创建脚本
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GET /scripts/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;id&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/status    // 检查执行状态
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;5使用http响应状态码&#34;&gt;5.使用HTTP响应状态码
&lt;/h3&gt;&lt;p&gt;始终使用常规 HTTP 状态码来响应对 API 发出的请求。这将帮助用户了解发生了什么 — 请求是否成功，是否失败，或者其他情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes.png&#34;
	width=&#34;1224&#34;
	height=&#34;1710&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes_hu_f882e7cc374d92cd.png 480w, https://blog.yearsuns.com/p/best-practices-for-rest-api/http-status-codes_hu_e1355992283e7479.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;HTTP状态码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;6使用过滤排序和分页来检索请求的数据&#34;&gt;6.使用过滤、排序和分页来检索请求的数据
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Feature&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Example Usage&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Sorting&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Allows sorting of the dataset based on specified parameters.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?sort=rank_asc&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Filtering&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Filters the dataset based on given criteria in query parameters.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?category=banking&amp;amp;location=india&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Searching&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Searches for specific terms within the dataset.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?search=Digital&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Pagination&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Divides the dataset into smaller chunks for easier handling and improved performance.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;/companies?page=23&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;7-使用-hateoas-实现到相关资源的导航&#34;&gt;7. 使用 HATEOAS 实现到相关资源的导航
&lt;/h3&gt;&lt;p&gt;HATEOAS（超文本作为应用程序状态引擎）是 REST 的一个原则，允许客户端仅通过响应中提供的超链接来浏览资源并发现可用的操作。这意味着客户端不需要事先了解 URI；相反，每个 HTTP GET 请求都会返回必要的信息和相关资源的链接，从而实现对 API 的动态探索。&lt;/p&gt;
&lt;p&gt;在示例响应中，&lt;code&gt;/books/1&lt;/code&gt;分享可导航的链接，例如&lt;code&gt;/authors/1&lt;/code&gt; &lt;code&gt;/books/1/reviews&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yml&#34; data-lang=&#34;yml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;“books” ： [ &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“id” ： 1 ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“title” ： “了不起的盖茨比” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “F·斯科特·菲茨杰拉德” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“links” ： { &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“self” ： “/books/1” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “/authors/1” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“reviews” ： “/books/1/reviews” &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ae81ff&#34;&gt;，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“id” ： 2 ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“title” ： “杀死一只知更鸟” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “哈珀·李” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;“links” ： { &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“self” ： “/books/2” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“author” ： “/authors/2” ，&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;“reviews” ： “/books/2/reviews” &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ] 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;8-使用-ssl-确保安全&#34;&gt;8. 使用 SSL 确保安全
&lt;/h3&gt;&lt;p&gt;SSL（安全套接字层）对于保护 REST API 免受恶意攻击至关重要。它确保服务器和客户端之间的通信是私密的，并且用户只能访问他们有权查看的数据。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&lt;/code&gt; 我们可以通过查看URL来判断 REST API 是否受 SSL 保护。例如，&lt;code&gt;https://mysite.com/posts&lt;/code&gt; 受 SSL 保护，而 &lt;code&gt;http://mysite.com/posts&lt;/code&gt; 不受 SSL 保护。&lt;/p&gt;
&lt;h3 id=&#34;9提供准确的api文档&#34;&gt;9.提供准确的API文档
&lt;/h3&gt;&lt;p&gt;良好的 API 文档可帮助开发人员正确使用我们的 API。它可以让更多人想要使用我们的 API 并更好地使用它。一个流行的 API &lt;a class=&#34;link&#34; href=&#34;https://www.openapis.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;文档工具是OpenAPI ( Swagger )&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;10-restful-web-api-版本控制&#34;&gt;10. RESTful Web API 版本控制
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Versioning Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
          &lt;th&gt;Example Usage&lt;/th&gt;
          &lt;th&gt;Real-World Examples&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;URI Path&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Includes the version number directly in the API path.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://www.example.com/api/v1/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://www.example.com/api/v2/products&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://developer.twitter.com/en/docs/twitter-api/versioning&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;- &lt;a class=&#34;link&#34; href=&#34;https://developer.paypal.com/docs/api/overview/#get-credentials&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PayPal&lt;/a&gt;&lt;!-- raw HTML omitted --&gt;- &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/translate/docs/reference/rest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Translate&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Query Parameters&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Specifies the version number as a query parameter in the URL.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://www.example.com/api/products?version=1&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://www.example.com/api/products?version=2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://cloud.google.com/translate/docs/reference/rest&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Translation APIs&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Custom Headers&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Uses custom headers to specify the API version.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;X-API-VERSION=1&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;X-API-VERSION=2&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;strong&gt;Content Negotiation&lt;/strong&gt;&lt;/td&gt;
          &lt;td&gt;Uses the &lt;code&gt;Accept&lt;/code&gt; header to specify the version of the API.&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;Accept=application/vnd.javaguides-v1+json&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;&lt;code&gt;http://localhost:8080/api/products&lt;/code&gt;&lt;!-- raw HTML omitted --&gt;Headers: &lt;code&gt;Accept=application/vnd.javaguides-v2+json&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;- &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/rest/overview/resources-in-the-rest-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;11-api-安全和访问控制&#34;&gt;11. API 安全和访问控制
&lt;/h3&gt;&lt;p&gt;确保 API 安全并控制谁可以使用它是制作优质 RESTful API 的关键部分。以下是一些实现此目的的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;设置 &lt;a class=&#34;link&#34; href=&#34;https://oauth.net/2/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OAuth 2.0&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/JSON_Web_Token&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;JSON Web Tokens (JWT)&lt;/a&gt;，以便未经身份验证的用户无法访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API 密钥显示谁在使用。API速率限制可阻止人们过度使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现基于角色的访问控制（RBAC）等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-不要忘记-api-性能&#34;&gt;12. 不要忘记 API 性能
&lt;/h3&gt;&lt;p&gt;让我们的 API 更好地发挥作用是让用户满意、降低成本和更轻松地发展的关键。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据压缩方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异步处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;处理批处理操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测量 API 性能并分析 API 使用情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;监控 API 健康和正常运行时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试 RESTful API（单元测试、集成测试、负载测试、安全测试）等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;优秀的 REST API 是通过遵循关键规则和最佳实践来构建的。&lt;/p&gt;
&lt;p&gt;通过遵守这些规则，我们将构建易于使用、可靠且面向未来的 API。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：本文译自 &lt;a class=&#34;link&#34; href=&#34;https://medium.com/@syedabdullahrahman/mastering-rest-api-design-essential-best-practices-dos-and-don-ts-for-2024-dd41a2c59133&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://medium.com/@syedabdullahrahman/mastering-rest-api-design-essential-best-practices-dos-and-don-ts-for-2024-dd41a2c59133&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>SMART原则：让目标不再遥不可及</title>
        <link>https://blog.yearsuns.com/p/mastering-goal-setting-with-the-smart-framework/</link>
        <pubDate>Tue, 11 Feb 2025 18:11:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/mastering-goal-setting-with-the-smart-framework/</guid>
        <description>&lt;h2 id=&#34;-什么是smart原则&#34;&gt;🌟 什么是SMART原则？
&lt;/h2&gt;&lt;p&gt;我们生活中常常给自己定下各种目标，想要健身、读书、升职、旅行……但一旦目标太大或太模糊，就容易半途而废。SMART原则是一个经过验证的工具，能帮助我们设定清晰、具体并能实现的目标，打破“空想目标”带来的无力感。&lt;/p&gt;
&lt;p&gt;SMART是五个英文单词的首字母缩写，代表了目标设定的五个关键特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;: &lt;strong&gt;Specific（具体）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M&lt;/strong&gt;: &lt;strong&gt;Measurable（可衡量）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;: &lt;strong&gt;Achievable（可实现）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt;: &lt;strong&gt;Relevant（相关性）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;: &lt;strong&gt;Time-bound（时限性）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-smart原则的起源&#34;&gt;📜 SMART原则的起源
&lt;/h2&gt;&lt;p&gt;SMART原则并不是一蹴而就的，它是由美国管理学专家&lt;strong&gt;George T. Doran&lt;/strong&gt;于1981年提出的，最早出现在他的文章《There’s a S.M.A.R.T. Way to Write Management’s Goals and Objectives》中。Doran提出，很多管理目标制定的模糊性和不切实际的期望，导致了企业和个人无法有效实现目标，因此，他需要提出一个能具体化目标设定、避免“空谈”的方法——SMART。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;George T. Doran&lt;/strong&gt;当时的初衷是解决企业和组织在设定目标时遇到的几个常见问题：目标过于模糊，执行步骤不清晰，结果难以衡量，且往往缺乏完成的时限。&lt;/p&gt;
&lt;h2 id=&#34;-为什么要有smart&#34;&gt;🧐 为什么要有SMART？
&lt;/h2&gt;&lt;p&gt;在Doran的时代，目标设定存在一个普遍问题，那就是许多管理目标没有明确性，很多时候只是宽泛的愿景或“愿望”，如“提高员工满意度”或“增加市场份额”。这类目标没有任何执行上的指引，导致了许多企业无论如何努力，结果却始终看不见。&lt;/p&gt;
&lt;p&gt;例如，如果一个公司设定的目标是“提高员工的工作动力”，这个目标看起来似乎是有意义的，但它缺乏可操作性和评估标准——到底“提高”到什么程度才算成功？这个问题没有明确的答案，导致目标变得空洞且难以达成。&lt;/p&gt;
&lt;h2 id=&#34;-为什么smart有效&#34;&gt;🧠 为什么SMART有效？
&lt;/h2&gt;&lt;p&gt;在心理学中，设定明确目标被认为是提高动机和焦点的有效方法。人类的大脑对于模糊不清的任务缺乏足够的投入感，容易在各种诱惑面前分心。SMART原则通过将目标细化、量化、并赋予紧迫感，让我们的大脑“抓住”了目标，不容易走神。&lt;/p&gt;
&lt;h3 id=&#34;1-具体specific&#34;&gt;1. &lt;strong&gt;具体（Specific）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;如果目标只是“我想变得更健康”，它几乎没有任何行动指引。SMART的具体化要求目标要清晰明确。例如：“我计划每周跑步三次，每次30分钟。”这个目标具体到了“跑步”“次数”“时间”，容易给人一种可以立即行动的感觉。&lt;/p&gt;
&lt;p&gt;目标具体性越强，任务的执行障碍就越小。这是因为大脑对模糊的目标感到困惑和不安，而明确的目标则让大脑更容易激发执行动力。&lt;/p&gt;
&lt;h3 id=&#34;2-可衡量measurable&#34;&gt;2. &lt;strong&gt;可衡量（Measurable）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;没有衡量标准的目标，就像是开车但不看导航。比如，“我想提高身体素质”就太空泛，如何知道什么时候“提高了”呢？而SMART则要求目标具有可衡量的标准，例如：“我要在三个月内将跑步速度提高5公里每小时。”&lt;/p&gt;
&lt;p&gt;明确的衡量标准让大脑能不断确认进展，获得即时反馈，增强自我效能感——“我做得不错”的感觉。&lt;/p&gt;
&lt;h3 id=&#34;3-可实现achievable&#34;&gt;3. &lt;strong&gt;可实现（Achievable）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;如果你想在三个月内成为铁人三项冠军，那可能太不现实了。SMART原则提到，目标要根据个人的现有资源和能力设定。可实现性并非要求轻松，而是要能够在现有条件下有所突破。&lt;/p&gt;
&lt;p&gt;这一点体现了亚里士多德的“黄金中庸”思想。过高或过低的期望都会让目标变得不合适，过高可能让人感到无望，过低则无法激发成长。&lt;/p&gt;
&lt;h3 id=&#34;4-相关性relevant&#34;&gt;4. &lt;strong&gt;相关性（Relevant）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;你的目标要与你的长期愿景和核心价值观相关联。如果你设定的目标与自己的真实兴趣或需求脱节，执行起来往往缺乏动力。例如：“我要学习一门新语言，因为我打算明年去旅游。”&lt;/p&gt;
&lt;p&gt;如果目标和个人动机、兴趣不符，大脑会默认“这不值得投入”。因此，相关性决定了目标的重要性和个人投入的程度。&lt;/p&gt;
&lt;h3 id=&#34;5-时限性time-bound&#34;&gt;5. &lt;strong&gt;时限性（Time-bound）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;没有时限的目标，就像是漂浮在空中的气球，永远不会落地。SMART原则通过设定具体的时间限制，促使行动的紧迫感产生。比如：“我将在六个月内完成这本书的阅读。”&lt;/p&gt;
&lt;p&gt;时间的有限性体现了时间哲学中的“现时性”——在有限时间内，我们必须作出选择并进行投入。而过于宽松的时间框架反而容易让人推延。&lt;/p&gt;
&lt;h2 id=&#34;-如何运用smart原则&#34;&gt;🔑 如何运用SMART原则？
&lt;/h2&gt;&lt;p&gt;运用SMART原则其实很简单，关键在于每次设定目标时，深入思考并将每个元素加以落实。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;举个例子&lt;/strong&gt;：
假设你想提高体能，但传统目标“我要变强”显然过于模糊。根据SMART原则，你可以将目标转化为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;具体&lt;/strong&gt;：我将每周去健身房3次，每次锻炼40分钟。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可衡量&lt;/strong&gt;：我要在3个月内将我的卧推重量提升5公斤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现&lt;/strong&gt;：根据当前我的体能水平，逐步增加每周的训练强度是现实的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相关性&lt;/strong&gt;：因为我希望能更加健康，增强体力以便更好地应对日常工作和生活挑战。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时限性&lt;/strong&gt;：我将在3个月内达成这一目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-smart目标的实际案例&#34;&gt;🏁 SMART目标的实际案例
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;案例一&lt;/strong&gt;：学习英语&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标：我要在六个月内通过英语托福考试，目标分数为90分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体&lt;/strong&gt;：每周安排15小时的学习时间，重点提升听力和口语能力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可衡量&lt;/strong&gt;：每月模拟考试一次，检查听力和口语的进展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现&lt;/strong&gt;：根据目前英语水平，合理的学习计划能让我逐步达到目标分数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相关性&lt;/strong&gt;：通过托福考试能让我申请到心仪的国际大学，是我职业发展的关键步骤。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时限性&lt;/strong&gt;：六个月后完成托福考试，并达到目标分数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;案例二&lt;/strong&gt;：完成销售目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标：我要在三个月内将销售额提升20%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体&lt;/strong&gt;：通过增加客户联系和优化销售话术，每周增加5次客户拜访。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可衡量&lt;/strong&gt;：每月追踪销售额，并与上月进行对比。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现&lt;/strong&gt;：根据现有资源和市场情况，通过提高拜访频次和改进沟通方式能达到目标。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相关性&lt;/strong&gt;：提高销售额是公司业绩提升的关键，也是我个人职业成长的一部分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时限性&lt;/strong&gt;：三个月内完成销售目标。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;案例三&lt;/strong&gt;：增加收入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目标：我要在六个月内将个人收入提升30%。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;具体&lt;/strong&gt;：通过副业和提升本职工作表现来增加收入。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可衡量&lt;/strong&gt;：每月记录收入并与上月进行对比，评估副业和本职收入的变化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可实现&lt;/strong&gt;：合理安排时间，利用业余时间投入副业，同时提升本职工作表现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;相关性&lt;/strong&gt;：增加收入有助于提升生活质量，实现经济独立。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时限性&lt;/strong&gt;：六个月内实现收入增长。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-smart的影响与发展&#34;&gt;🏢 SMART的影响与发展
&lt;/h2&gt;&lt;p&gt;虽然Doran的初衷是帮助企业制定可执行的管理目标，但随着时间的推移，SMART原则不仅仅局限于管理学领域，也被广泛应用于个人目标设定、项目管理、教育和生活规划等多个领域。它已经成为一个跨学科的工具，帮助人们以更加精确的方式设定、追踪和实现目标。&lt;/p&gt;
&lt;h2 id=&#34;-总结目标管理的哲学与心理学之道&#34;&gt;🎯 总结：目标管理的哲学与心理学之道
&lt;/h2&gt;&lt;p&gt;SMART原则从最初的管理学应用，到如今成为各行各业目标设定的通用工具，其核心思想在于帮助人们清晰、量化并确保目标能够顺利实现。通过SMART，我们能够避免目标模糊带来的困惑，减少拖延，提高效率，更有动力朝着目标前进。正如Doran当时所言：“目标必须是明确且可执行的，才能激发人们的行动力。”&lt;/p&gt;
&lt;p&gt;SMART原则的出现，犹如给目标设定领域打上了清晰的框架，让“梦想”不再只是天边的云朵，而是可以一步步实现的具体任务。&lt;/p&gt;
&lt;p&gt;SMART原则不仅仅是一个目标设定工具，它更深层次地连接了哲学和心理学的核心原理。在追求目标的过程中，我们不断在理性与情感、现实与理想之间进行拉锯。SMART帮助我们精准聚焦，通过清晰、可行的步骤实现目标，而不至于迷失在“想做却做不成”的自我困境中。&lt;/p&gt;
&lt;p&gt;无论你是追求个人成长，还是在职场中设定明确目标，SMART原则都可以成为你理性规划与心理动机的双重武器，助你逐步逼近理想的自我，最终实现那些曾经看似遥不可及的梦想。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>完美主义的陷阱：如何打破精神内耗，找到内心的自由</title>
        <link>https://blog.yearsuns.com/p/the-perfectionism-trap/</link>
        <pubDate>Tue, 11 Feb 2025 17:11:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/the-perfectionism-trap/</guid>
        <description>&lt;p&gt;完美主义，这个似乎追求卓越的美德，却往往带来无尽的心理压力和内耗。它让我们焦虑，让我们不敢停歇，让我们深陷“做得不够好”的陷阱中。到底是完美主义的力量让我们变得更强，还是它的束缚让我们始终无法真正感受到内心的自由？&lt;/p&gt;
&lt;p&gt;在这篇博客中，我们将深入探讨完美主义与精神内耗之间的关系，揭示它们背后深层的心理机制，并给出一些切实可行的方法，帮助你突破内心的困境。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;完美主义的两面性--追求卓越的美德还是精神枷锁&#34;&gt;完美主义的两面性 —— 追求卓越的“美德”还是精神枷锁？
&lt;/h2&gt;&lt;h3 id=&#34;11-完美主义的定义&#34;&gt;1.1 完美主义的定义：
&lt;/h3&gt;&lt;p&gt;完美主义听起来像是一个值得赞扬的品质，它让我们追求卓越、精益求精。完美主义者常常对自己设立极高的标准，力求把每件事情做到尽善尽美。然而，这种强烈的追求卓越往往让我们忽略了过程中的自我关怀。我们总是想着如何把结果做到完美，却常常忽视了“人是可以有缺陷的”这一事实。&lt;/p&gt;
&lt;p&gt;完美主义者将“完美”视为一种理想的标准，不达标便认为是失败。这种内心的标准常常带来无限的焦虑与不安，因为完美是无法轻易实现的，而每一次接近目标时，完美主义者又会定下更高的要求，永无止境。&lt;/p&gt;
&lt;h3 id=&#34;12-完美主义的背后--动机与驱动力&#34;&gt;1.2 完美主义的背后 —— 动机与驱动力：
&lt;/h3&gt;&lt;p&gt;完美主义的根源不仅仅来自对卓越的渴望，更深层的原因在于外部和内部的双重压力。社会的期望、家庭的要求，甚至自我价值的认同，都在推动我们去追求完美。尤其在当今信息化的社会，外界的标准和审视比任何时候都更加严苛，我们不断对照他人，不断自我加压。&lt;/p&gt;
&lt;p&gt;内心深处，完美主义者往往存在一种“完美即被爱的”信念。为了避免被批评或忽视，完美主义者可能认为只有做到极致才能获得认同与尊重。这种深层的心理需求驱动着他们不断超越自我。&lt;/p&gt;
&lt;h3 id=&#34;13-完美主义的双刃剑效应&#34;&gt;1.3 完美主义的双刃剑效应：
&lt;/h3&gt;&lt;p&gt;完美主义有其明显的优点：它激励我们不断进步，提升自我，做出超出常人的成就。然而，当完美主义没有得到有效管理时，它就像一把双刃剑，可能带来沉重的心理负担。&lt;/p&gt;
&lt;p&gt;过度完美主义者不仅会忽视过程中的努力和成就，更容易陷入无休止的自我怀疑和焦虑之中。当结果不尽如人意时，他们容易情绪低落，甚至会开始质疑自己的能力与价值。长期处于这种状态中，精神内耗渐渐积累，最终影响身心健康。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;精神内耗的形成--完美主义如何侵蚀我们的心理健康&#34;&gt;精神内耗的形成 —— 完美主义如何侵蚀我们的心理健康？
&lt;/h2&gt;&lt;h3 id=&#34;21-精神内耗的定义&#34;&gt;2.1 精神内耗的定义：
&lt;/h3&gt;&lt;p&gt;精神内耗的本质就是个体在面对内外部冲突时，消耗了大量的心理资源。完美主义者常常处于这种内耗的状态中，因为他们不断地与内心的“理想自我”和现实的“当前自我”进行博弈。理想和现实之间的巨大差距让他们心力交瘁，最终影响到日常生活的质量和工作效率。&lt;/p&gt;
&lt;p&gt;这种内耗表现为持续的自我批评、过度思考和无效的拖延。我们不断在脑海中重复“如果能更好一些会怎样”这种思想，却忽视了每一个小小的进步和成长。&lt;/p&gt;
&lt;h3 id=&#34;22-精神内耗的症状与表现&#34;&gt;2.2 精神内耗的症状与表现：
&lt;/h3&gt;&lt;p&gt;完美主义者的精神内耗通常表现为以下几种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无休止的自我否定：&lt;/strong&gt; 不管做什么，总觉得自己还不够好，陷入“完美主义的陷阱”。无论工作成果如何，自己总认为“如果再努力一点就更好”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;焦虑与拖延：&lt;/strong&gt; 完美主义者常常感到焦虑，因为他们害怕没有做到最好。由于对完美的过度追求，很多时候他们会拖延行动，等待完美的时机和条件，结果往往错过了很多机会。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自我摧残：&lt;/strong&gt; 为了追求完美，完美主义者通常会过度压榨自己，牺牲休息时间和健康，甚至是亲密关系，最终形成恶性循环。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-精神内耗的恶性循环&#34;&gt;2.3 精神内耗的恶性循环：
&lt;/h3&gt;&lt;p&gt;精神内耗往往形成恶性循环。完美主义者不断自我批判，感到无法满足外界和内心的期望，从而产生更多的焦虑。这种焦虑驱动他们去努力工作，但由于他们总是觉得自己做得不够好，反而加剧了内心的压力。&lt;/p&gt;
&lt;p&gt;这种零和思维让他们始终处于“要么做到完美，要么就是失败”的状态，导致他们无法真正享受过程中的乐趣和成就。每一项任务、每一次努力，似乎都只为了达到一个遥不可及的完美标准。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何破局--走出完美主义的迷雾找到内心的自由&#34;&gt;如何破局 —— 走出完美主义的迷雾，找到内心的自由
&lt;/h2&gt;&lt;h3 id=&#34;31-认知重构重新定义完美&#34;&gt;3.1 认知重构：重新定义“完美”
&lt;/h3&gt;&lt;p&gt;完美并非一个固定的目标，它是一个相对的概念。每个人对完美的定义都不同，而外部世界的“完美”标准也不断变化。我们不能让完美成为束缚自己的枷锁。相反，应该将完美作为一个过程来看待，而非终极结果。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;完美是过程，而非结果：&lt;/strong&gt; 完美主义者可以通过认知调整，理解到每个进步和每一次努力都是一种完美，而不必过于苛求最终结果。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-建立健康的目标设定&#34;&gt;3.2 建立健康的目标设定：
&lt;/h3&gt;&lt;p&gt;目标设定时，遵循&lt;strong&gt;SMART原则&lt;/strong&gt;（S=Specific具体、M=Measurable可衡量、A=Attainable可实现、R=Relevant相关、T=Time-bound时限性），避免设定过高的目标带来的不必要的压力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;逐步进步：&lt;/strong&gt; 将目标分解成小步骤，每完成一步就给予自己适当的奖励，这样不仅能提高自信，也能让目标实现变得更加实际。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;33-培养自我同情&#34;&gt;3.3 培养自我同情：
&lt;/h3&gt;&lt;p&gt;自我同情是一种接纳自己不完美的能力。完美主义者往往对自己要求过于苛刻，缺少对自己的关怀和体谅。学会对自己温柔，不再苛责每一个小缺点，将有助于缓解精神内耗。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;与自己和解：&lt;/strong&gt; 每天进行自我肯定，接受自己的不完美，理解并接纳每一个成长的瞬间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;34-放松与休息&#34;&gt;3.4 放松与休息：
&lt;/h3&gt;&lt;p&gt;完美主义者常常会忽略休息的重要性，认为休息等于浪费时间。然而，适当的休息与放松对提升效率和减少内耗至关重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;休息与效率并存：&lt;/strong&gt; 给自己设定合理的休息时间，避免过度工作，保持身心的平衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;35-寻找支持系统&#34;&gt;3.5 寻找支持系统：
&lt;/h3&gt;&lt;p&gt;当精神内耗变得严重时，寻求外界的帮助至关重要。心理咨询可以帮助个体认清问题的根源并找到解决之道。而社交支持，则能通过与亲友的沟通，获得安慰与理解。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;结语--追求卓越与享受过程的平衡&#34;&gt;结语 —— 追求卓越与享受过程的平衡
&lt;/h2&gt;&lt;p&gt;完美主义与精神内耗并非无法共存。关键在于我们如何管理这两者的关系，找到健康的平衡。通过认知重构、设定健康目标、培养自我同情、适当放松、寻求支持，我们可以在追求卓越的道路上，避免让完美主义束缚住我们的脚步。&lt;/p&gt;
&lt;p&gt;让我们在不断努力的过程中，也学会享受每一个成长的瞬间，不再将每一步看作通向终极目标的负担，而是当下价值的体现。最终，我们能够突破精神内耗的困扰，找到真正的内心自由。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何向技术大佬请教问题且不泄露敏感信息</title>
        <link>https://blog.yearsuns.com/p/protecting-sensitive-data-while-seeking-help/</link>
        <pubDate>Mon, 10 Feb 2025 11:43:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/protecting-sensitive-data-while-seeking-help/</guid>
        <description>&lt;p&gt;在技术圈中，请教问题是提升技能的重要途径。但有时候，我们的问题可能涉及敏感信息，比如项目代码、业务逻辑、客户数据等。如果不注意，很可能因为无意的泄露造成不必要的风险。那么，如何在请教问题时保护敏感信息？本文将从识别敏感信息、避免泄露以及高效沟通三个方面详细阐述。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;什么是敏感信息如何识别&#34;&gt;什么是敏感信息？如何识别？
&lt;/h2&gt;&lt;p&gt;敏感信息通常是指那些一旦泄露，可能导致安全问题、商业损失或隐私风险的数据。在技术领域，敏感信息的范围可能更广。&lt;/p&gt;
&lt;h3 id=&#34;常见的敏感信息类型&#34;&gt;常见的敏感信息类型
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;个人身份信息（PII）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括用户名、密码、电子邮件地址、电话号码、身份证号等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公司内部信息&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;业务逻辑、未发布的产品功能、技术架构设计。&lt;/li&gt;
&lt;li&gt;内部工具的配置文件，例如 API 密钥、数据库连接字符串。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户或用户数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括用户订单记录、支付信息、行为分析数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源码或配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git 仓库中的代码、生产环境配置，尤其是涉及商业机密或专利内容的部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器与网络信息&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP 地址、端口号、服务器配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;如何判断信息是否敏感&#34;&gt;如何判断信息是否敏感？
&lt;/h3&gt;&lt;p&gt;以下几种方法可以帮助你快速判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问自己：一旦泄露，会有何后果？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果信息泄露可能导致系统被攻击、用户隐私被暴露或公司竞争力下降，那么它就是敏感信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;公司政策与行业规范&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公司通常有信息安全政策，参考其中的敏感信息定义。例如 GDPR 或 CCPA 明确规定了需要保护的用户数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;通用经验法则&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;凡是你需要登录权限才能访问的内容，默认认为是敏感的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;如何避免在请教问题时泄露敏感信息&#34;&gt;如何避免在请教问题时泄露敏感信息？
&lt;/h2&gt;&lt;h3 id=&#34;1-替换敏感信息&#34;&gt;1. 替换敏感信息
&lt;/h3&gt;&lt;p&gt;在描述问题时，尽量将敏感信息替换为通用或伪造的示例数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户名和密码&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始数据：&lt;code&gt;admin:password123&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换为：&lt;code&gt;example_user:example_password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 密钥&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原始数据：&lt;code&gt;sk_live_1234567890abcdef&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换为：&lt;code&gt;sample_private_key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;具体代码片段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果必须分享代码，先删除或模糊掉与业务相关的逻辑，只保留问题核心。&lt;/li&gt;
&lt;li&gt;例如：将实际的 SQL 查询 &amp;ldquo;&lt;code&gt;SELECT * FROM users WHERE role = &#39;admin&#39;&lt;/code&gt;&amp;rdquo; 替换为 &amp;ldquo;&lt;code&gt;SELECT * FROM table WHERE condition&lt;/code&gt;&amp;quot;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-提供抽象问题&#34;&gt;2. 提供抽象问题
&lt;/h3&gt;&lt;p&gt;把具体问题抽象成通用场景，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;原问题：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们的支付系统对接某银行接口时，总是返回 403 错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抽象后：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用 RESTful API 调用第三方支付接口时，返回 403 错误，怀疑是签名问题。这种情况应该如何排查？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样既避免暴露具体的支付对接信息，也能得到相同的技术解答。&lt;/p&gt;
&lt;h3 id=&#34;3-使用代码片段工具&#34;&gt;3. 使用代码片段工具
&lt;/h3&gt;&lt;p&gt;推荐在分享代码时使用 GitHub Gist、CodeSandbox 或 Pastebin，设置合适的访问权限，并在分享前检查敏感信息是否已被清理。&lt;/p&gt;
&lt;h3 id=&#34;4-避免提供生产环境数据&#34;&gt;4. 避免提供生产环境数据
&lt;/h3&gt;&lt;p&gt;无论如何，都不要直接复制生产环境的数据（如日志、数据库记录）。如需调试，可使用以下方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成伪数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 Faker.js、Mock.js 等工具生成假数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;脱敏真实数据&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;替换关键字段，例如将用户姓名替换为 &amp;ldquo;John Doe&amp;rdquo;，将手机号替换为 &amp;ldquo;1234567890&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-与大佬确认是否方便回答&#34;&gt;5. 与大佬确认是否方便回答
&lt;/h3&gt;&lt;p&gt;在提出问题之前，简要说明你的问题背景，让对方判断是否需要了解更多细节。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我遇到了一个数据库连接超时的问题，已排查了网络和配置部分。如果方便，我可以提供一个精简后的环境复现代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过这样的方式，大佬可以决定是否需要深入了解。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;高效沟通的小技巧&#34;&gt;高效沟通的小技巧
&lt;/h2&gt;&lt;p&gt;即便保护好敏感信息，也需要提高沟通效率，让对方快速理解你的问题。&lt;/p&gt;
&lt;h3 id=&#34;1-结构化描述问题&#34;&gt;1. 结构化描述问题
&lt;/h3&gt;&lt;p&gt;使用以下模板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**问题背景：**简述你的技术环境和需求。&lt;/li&gt;
&lt;li&gt;**预期结果：**你希望系统如何运行。&lt;/li&gt;
&lt;li&gt;**实际结果：**当前系统的表现。&lt;/li&gt;
&lt;li&gt;**尝试过的解决方法：**列出你已排查的内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**背景：**我们使用的是 Spring Boot + PostgreSQL，部署在 AWS 上。&lt;/p&gt;
&lt;p&gt;**预期：**希望通过 JPA 查询接口返回分页数据。&lt;/p&gt;
&lt;p&gt;**实际：**查询时总是超时，尤其在大数据量场景下。&lt;/p&gt;
&lt;p&gt;**尝试：**调整了分页大小和索引优化，但效果有限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-用图表补充说明&#34;&gt;2. 用图表补充说明
&lt;/h3&gt;&lt;p&gt;如果问题复杂，可使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流程图&lt;/strong&gt;（如 Lucidchart 或 Draw.io）展示系统流程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时序图&lt;/strong&gt;清晰呈现请求和响应过程。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误截图或日志&lt;/strong&gt;标注关键问题点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-感谢并反馈结果&#34;&gt;3. 感谢并反馈结果
&lt;/h3&gt;&lt;p&gt;解决问题后，记得感谢对方，并反馈最终结果。这不仅体现你的尊重，也能帮助大佬积累更多案例。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;在向技术大佬请教问题时，保护敏感信息既是对自己的安全负责，也是对团队和客户的信任负责。通过识别敏感信息、替换真实数据、抽象问题和高效沟通，不仅能避免信息泄露，还能赢得大佬的专业认可。希望每一位开发者都能在技术交流中既学到知识，又能安心无忧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>程序员的自救指南：如何精准描述你的技术问题，让大佬想帮你</title>
        <link>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</link>
        <pubDate>Sun, 09 Feb 2025 20:43:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/</guid>
        <description>&lt;p&gt;有时候，程序员的日子就像《荒野求生》，&lt;strong&gt;问题&lt;/strong&gt;就是那条饿着肚子追你的鳄鱼，你呢？跪着发帖：“大佬们救救孩子吧，代码写崩了！”&lt;/p&gt;
&lt;p&gt;结果呢？没人回。&lt;/p&gt;
&lt;p&gt;为什么？&lt;br&gt;
因为你发的帖就像“妈丫，肚子疼！”却忘了告诉医生是&lt;strong&gt;吃撑了、饿坏了、还是中午猛喝了五碗麻辣烫&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;今天，我来教你如何精准描述你的技术问题，让你瞬间从 &lt;strong&gt;“救救孩子”&lt;/strong&gt; 进化到 &lt;strong&gt;“这哥们值得救”&lt;/strong&gt;。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-1说清楚你在干啥别藏着掖着&#34;&gt;Step 1：说清楚你在干啥，别藏着掖着
&lt;/h3&gt;&lt;p&gt;想让别人帮你？&lt;strong&gt;背景交代到位，别怕麻烦！&lt;/strong&gt;&lt;br&gt;
大佬们不懂你家后院代码都咋跑的。来一段上下文，简洁明了！&lt;/p&gt;
&lt;p&gt;比如，你发帖别写：“Redis 锁续期有问题，快点来！”&lt;br&gt;
改成这样：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我正在用 Spring Boot + Redisson 实现分布式锁，Spring Boot 版本 3.0.0，Redisson 用的是最新的 3.20.0。问题出在本地单元测试时锁续期失效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大佬看到这，立刻有谱：&lt;strong&gt;哦，这哥们用的是主流技术栈，问题不难搞！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-2问题描述要具体别用感叹号骗大佬注意力&#34;&gt;Step 2：问题描述要具体，别用感叹号骗大佬注意力
&lt;/h3&gt;&lt;p&gt;很多人喜欢放大自己的“惨状”：“完了，炸了，全崩了！”&lt;/p&gt;
&lt;p&gt;可是你连个报错信息都不贴上，难道指望大佬靠读心术帮你？&lt;/p&gt;
&lt;p&gt;错误信息一定要说清楚，关键内容圈出来，别整篇贴，显得像年终总结。比如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我运行 &lt;code&gt;lock.lock(60, TimeUnit.SECONDS)&lt;/code&gt; 时，日志显示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;错误出在锁续期失效，导致任务中途被抢锁。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看！这样既具体，又不会让人头疼。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-3问题复现三板斧连小白也能操作&#34;&gt;Step 3：问题复现三板斧，连小白也能操作
&lt;/h3&gt;&lt;p&gt;技术问题要让别人有地方下手，就像&lt;strong&gt;解锁游戏副本的攻略&lt;/strong&gt;。没法复现的问题，等于在地里找针。&lt;/p&gt;
&lt;p&gt;来个实例：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，开启 Redisson 配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待 30 秒后，问题出现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;清清楚楚三步走，大佬立刻知道咋搞。再加上你的配置文件、核心代码，&lt;strong&gt;人家手里有锤子，就能敲问题！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-4预期-vs-实际问题得有个对比&#34;&gt;Step 4：预期 vs 实际，问题得有个对比
&lt;/h3&gt;&lt;p&gt;人类（包括程序员）特别爱“对比法”，这会让大佬迅速明白你的痛点在哪里。&lt;/p&gt;
&lt;p&gt;比如这样写：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;预期&lt;/strong&gt;：分布式锁应自动续期，确保任务完整执行。&lt;br&gt;
&lt;strong&gt;实际&lt;/strong&gt;：锁未续期，任务执行到一半时锁被释放，导致数据不一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;逻辑一目了然！&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-5展示你的努力赢得大佬尊重&#34;&gt;Step 5：展示你的努力，赢得大佬尊重
&lt;/h3&gt;&lt;p&gt;大佬们愿意帮有诚意的人。问题描述时，提一提你做过的尝试：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查了 Redis 是否正常启动，结果运行良好。&lt;/li&gt;
&lt;li&gt;调试了 Redisson 配置，&lt;code&gt;useSingleServer&lt;/code&gt; 设置正确。&lt;/li&gt;
&lt;li&gt;改用 &lt;code&gt;tryLock()&lt;/code&gt; 测试，问题依然存在。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样一来，大佬心里一暖：“这哥们不是等着躺平，他是真心要解决问题！”&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;step-6加点小细节补充大佬的弹药库&#34;&gt;Step 6：加点小细节，补充大佬的“弹药库”
&lt;/h3&gt;&lt;p&gt;最后再补上必要信息，比如操作系统、开发环境、核心代码片段。别一来就上百行代码，关键的几行就行了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心代码&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RLock lock &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; redissonClient.&lt;span style=&#34;color:#a6e22e&#34;&gt;getLock&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;testLock&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lock.&lt;span style=&#34;color:#a6e22e&#34;&gt;lock&lt;/span&gt;(60, TimeUnit.&lt;span style=&#34;color:#a6e22e&#34;&gt;SECONDS&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 问题出现在这里&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;完美示例把大佬整哭了的求助帖&#34;&gt;&lt;strong&gt;完美示例：把大佬整哭了的求助帖&lt;/strong&gt;
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：&lt;br&gt;
我正在用 Spring Boot + Redisson 实现分布式锁，版本如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot：3.0.0&lt;/li&gt;
&lt;li&gt;Redisson：3.20.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：&lt;br&gt;
单元测试中，锁无法自动续期，导致任务中途锁被释放。日志错误如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.IllegalStateException: Lock expired while executing task
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;复现步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;启动 Redis 服务器，使用默认配置。&lt;/li&gt;
&lt;li&gt;运行测试类 &lt;code&gt;LockTest.java&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;等待超过 30 秒的锁超时时间，问题复现。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;预期 vs 实际&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;预期：分布式锁自动续期，任务顺利完成。&lt;/li&gt;
&lt;li&gt;实际：锁未续期，导致任务执行到一半被中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;尝试过的解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检查 Redis 是否正常运行，结果正常。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;tryLock()&lt;/code&gt; 方法测试，问题依然存在。&lt;/li&gt;
&lt;li&gt;增加日志查看续期机制，发现续期任务未触发。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;补充信息&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;操作系统：MacOS 12.3&lt;/li&gt;
&lt;li&gt;JDK：17&lt;/li&gt;
&lt;li&gt;Redisson 配置：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Config config &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Config();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config.&lt;span style=&#34;color:#a6e22e&#34;&gt;useSingleServer&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;setAddress&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis://127.0.0.1:6379&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;结语&#34;&gt;结语
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;程序员求助的秘诀&lt;/strong&gt;，在于精准、简洁和条理清晰。&lt;br&gt;
记住，这不仅仅是给别人看的，也是在训练自己的问题分析能力。&lt;/p&gt;
&lt;p&gt;当你学会准确描述问题的那天，你离解决问题已经不远了！&lt;/p&gt;
&lt;p&gt;最后，祝大家都能成为被大佬们“抢着帮”的技术王者～&lt;/p&gt;
</description>
        </item>
        <item>
        <title>JWT的最佳实践</title>
        <link>https://blog.yearsuns.com/p/best-practices-of-jwt/</link>
        <pubDate>Fri, 07 Feb 2025 20:25:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/best-practices-of-jwt/</guid>
        <description>&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;
在当今的 web 开发中，身份验证是非常关键的，而 JWT（JSON Web Token）作为一种简单、高效的身份验证方式，已经被广泛应用在许多前后端分离的项目中。本篇文章将带你从零开始理解 JWT，探讨它的优缺点，并介绍最佳实践。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;什么是-jwt&#34;&gt;什么是 JWT？
&lt;/h3&gt;&lt;p&gt;JWT 是一种开放标准（RFC 7519），用于在不同系统之间安全地传递信息。简单来说，JWT 主要用于认证和信息交换，常见的应用场景就是用户登录验证。JWT 通常在用户登录后生成，并随后的请求中带着它来进行身份认证。&lt;/p&gt;
&lt;h4 id=&#34;jwt-结构&#34;&gt;JWT 结构
&lt;/h4&gt;&lt;p&gt;JWT 的结构非常简单，它由三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;头部（Header）&lt;/strong&gt;&lt;br&gt;
头部通常包含两部分内容：令牌类型（JWT）和签名算法（如 HMAC SHA256 或 RSA）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷（Payload）&lt;/strong&gt;&lt;br&gt;
载荷是 JWT 的“正文”部分，存储了你希望传递的数据（比如用户 ID 或权限）。这里面包含了 &amp;ldquo;Claims&amp;rdquo;（声明），有三种类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注册声明&lt;/strong&gt;：如 &lt;code&gt;sub&lt;/code&gt;（主题）、&lt;code&gt;exp&lt;/code&gt;（过期时间）、&lt;code&gt;iat&lt;/code&gt;（签发时间）等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公共声明&lt;/strong&gt;：可以自定义的数据，但需要避免冲突。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有声明&lt;/strong&gt;：你自己定义的声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名（Signature）&lt;/strong&gt;&lt;br&gt;
签名部分用于验证信息的完整性，确保数据没有被篡改。生成签名的方式是：用头部和载荷，通过密钥（对于对称加密是一个密钥，非对称加密是私钥）生成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的生成和验证原理&#34;&gt;JWT 的生成和验证原理
&lt;/h3&gt;&lt;h4 id=&#34;jwt-的生成过程&#34;&gt;JWT 的生成过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户登录&lt;/strong&gt;：&lt;br&gt;
用户输入用户名和密码，通过认证系统登录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器生成 JWT&lt;/strong&gt;：&lt;br&gt;
认证成功后，服务器会使用一个密钥（对称加密）或者私钥（非对称加密）生成一个 JWT。生成过程包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将头部和载荷（即数据）部分通过 Base64 编码。&lt;/li&gt;
&lt;li&gt;用密钥对这两部分进行签名，生成签名部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;生成后的 JWT 看起来像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;header.payload.signature
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt.png&#34;
	width=&#34;1222&#34;
	height=&#34;901&#34;
	srcset=&#34;https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_96e6486fee1b5af3.png 480w, https://blog.yearsuns.com/p/best-practices-of-jwt/jwt_hu_7fcaf8bf5bb0946f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;jwt构成&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;325px&#34;
	
&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;返回 JWT 给客户端&lt;/strong&gt;：&lt;br&gt;
服务器把生成的 JWT 返回给客户端，通常客户端会将其存储在本地（如 LocalStorage 或 Cookie）中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;jwt-的验证过程&#34;&gt;JWT 的验证过程
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;客户端发起请求&lt;/strong&gt;：&lt;br&gt;
客户端每次请求时，会将 JWT 添加到请求的 Authorization 头部中（例如：&lt;code&gt;Authorization: Bearer &amp;lt;JWT&amp;gt;&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务器验证 JWT&lt;/strong&gt;：&lt;br&gt;
服务器拿到 JWT 后，通过以下步骤来验证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析 JWT 的头部、载荷和签名。&lt;/li&gt;
&lt;li&gt;使用密钥（对于对称加密）或公钥（对于非对称加密）对签名部分进行验证，看是否与头部和载荷部分匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果验证通过，说明 JWT 的数据未被篡改，服务器就会继续处理请求。如果验证失败，说明 JWT 被篡改，服务器会返回错误信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的优点&#34;&gt;JWT 的优点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无状态（Stateless）&lt;/strong&gt;&lt;br&gt;
JWT 是无状态的，意味着服务器不需要存储用户会话数据。每次请求都包含 JWT，服务器可以根据 JWT 里的信息来进行认证。这样减少了服务器的负担，提升了系统的扩展性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨域支持&lt;/strong&gt;&lt;br&gt;
由于 JWT 是由客户端传递，它非常适合前后端分离的项目，可以跨域进行身份验证，避免了传统 Cookie 的同源限制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;轻量级&lt;/strong&gt;&lt;br&gt;
JWT 的大小较小，通常在几十到一百多个字节之间，非常适合频繁的 HTTP 请求，传输效率高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;适合微服务架构&lt;/strong&gt;&lt;br&gt;
JWT 可以在多个服务之间传递身份信息，非常适合分布式架构，尤其是微服务架构中的身份认证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的缺点&#34;&gt;JWT 的缺点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;无法撤销&lt;/strong&gt;&lt;br&gt;
一旦 JWT 被发放出去，它就无法撤销。如果 JWT 泄露，攻击者可以在有效期内反复使用。这比传统的 Session 认证要危险，后者可以在服务器端主动注销会话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储和安全问题&lt;/strong&gt;&lt;br&gt;
JWT 如果存储不当（如保存在 LocalStorage 或 Cookie 中），可能会受到 XSS 攻击。如果攻击者能够获取到 JWT，就能伪造合法请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;过期问题&lt;/strong&gt;&lt;br&gt;
JWT 通常设定有过期时间，一旦过期，就不能再使用。为了避免频繁登录，可以使用刷新令牌（Refresh Token）。不过如果过期时间设置不合理，可能会影响用户体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷不加密&lt;/strong&gt;&lt;br&gt;
JWT 的载荷部分是 Base64 编码的，不是加密的。任何人都可以解码并看到其中的内容。因此，切勿将敏感信息（如密码）存储在 JWT 中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥泄漏的风险&lt;/strong&gt;&lt;br&gt;
JWT 的安全性依赖于密钥的保密性。如果密钥泄露，攻击者可以伪造有效的 JWT。因此，保护好密钥非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的使用场景&#34;&gt;JWT 的使用场景
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单点登录（SSO）&lt;/strong&gt;&lt;br&gt;
JWT 非常适合实现跨应用的单点登录（SSO）。只需生成一次 JWT，就可以在多个系统之间共享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;移动应用身份认证&lt;/strong&gt;&lt;br&gt;
在移动应用中，JWT 常常用来进行身份验证。客户端存储 JWT，并在每次请求中发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;前后端分离的应用&lt;/strong&gt;&lt;br&gt;
在前后端分离的架构中，前端和后端可以独立进行身份验证，使用 JWT 作为认证工具，避免了传统 Cookie 的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jwt-的最佳实践&#34;&gt;JWT 的最佳实践
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不要在 JWT 中存储敏感信息&lt;/strong&gt;&lt;br&gt;
由于 JWT 的载荷部分是可以解码的，敏感信息（如密码、银行卡信息）绝对不能存储在 JWT 中。你可以把这些信息存储在服务器端，JWT 只传递一个标识符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用 HTTPS&lt;/strong&gt;&lt;br&gt;
无论是生成 JWT 还是传输 JWT，都应使用 HTTPS 协议，确保数据在传输过程中不会被窃听或篡改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;设置合理的过期时间&lt;/strong&gt;&lt;br&gt;
JWT 的过期时间要设置合理。过短可能影响用户体验，过长则可能存在安全隐患。通常，访问令牌的过期时间可以设置为 15 分钟到 1 小时，刷新令牌可以设置较长时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用刷新令牌&lt;/strong&gt;&lt;br&gt;
结合使用访问令牌（Access Token）和刷新令牌（Refresh Token）。当访问令牌过期时，客户端可以使用刷新令牌获取新的访问令牌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;存储 JWT 的安全性&lt;/strong&gt;&lt;br&gt;
如果你把 JWT 存储在浏览器中，推荐使用 HttpOnly 和 Secure 标志的 Cookie，以避免 XSS 攻击的风险。避免将 JWT 存储在 LocalStorage 中，因为它更容易受到 XSS 攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;签名算法选择&lt;/strong&gt;&lt;br&gt;
在选择签名算法时，推荐使用非对称加密的算法（如 RS256 或 ES256），而不是对称加密的算法（如 HS256），这样可以提高安全性，避免密钥泄露风险。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;密钥管理&lt;/strong&gt;&lt;br&gt;
密钥是 JWT 安全的关键。无论是对称加密还是非对称加密，都应该采取安全措施保护密钥。避免将密钥硬编码在代码中，可以通过环境变量或专门的密钥管理工具来管理密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结
&lt;/h3&gt;&lt;p&gt;JWT 是一种非常流行的身份验证方式，它简单、轻量、无状态，非常适合现代 web 应用，尤其是前后端分离的项目。但它也有一些缺点，尤其是在密钥泄漏和无法撤销的场景下。因此，使用 JWT 时需要特别注意密钥的管理和安全配置，合理设置过期时间，避免将敏感信息存储在 JWT 中。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>别让AI把你当傻子！3个咒语驯服野生AI，打工效率直接芜湖起飞🛫</title>
        <link>https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/</link>
        <pubDate>Tue, 04 Feb 2025 12:25:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/</guid>
        <description>&lt;h3 id=&#34;开篇暴击人类大型破防现场&#34;&gt;🚨开篇暴击：人类大型破防现场
&lt;/h3&gt;&lt;p&gt;上周朋友说被AI气到表演英年吐血。&lt;/p&gt;
&lt;p&gt;他让AI&amp;quot;写份高大上的行业报告&amp;quot;，结果收到的是《论宇宙膨胀与奶茶销量的量子纠缠》，最终得出结论“每少喝一杯杨枝甘露，黑洞半径增加0.5%”。&lt;/p&gt;
&lt;p&gt;我看着他的聊天记录，不禁陷入沉思。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不是AI太智障，是你不会下指令啊！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%B5%E8%A7%86%E6%9C%BA%E8%8A%B1%E5%B1%8F.jpeg&#34;
	width=&#34;474&#34;
	height=&#34;266&#34;
	srcset=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%B5%E8%A7%86%E6%9C%BA%E8%8A%B1%E5%B1%8F_hu_1b4b4d616c6624ea.jpeg 480w, https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%B5%E8%A7%86%E6%9C%BA%E8%8A%B1%E5%B1%8F_hu_db731641b2b8026c.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;满屏乱码&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;427px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一章-ai是阿拉丁神灯or人工智障全看你会不会念咒&#34;&gt;🧠第一章 AI是阿拉丁神灯or人工智障？全看你会不会念咒！
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E9%98%BF%E6%8B%89%E4%B8%81%E7%A5%9E%E7%81%AF.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;533&#34;
	srcset=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E9%98%BF%E6%8B%89%E4%B8%81%E7%A5%9E%E7%81%AF_hu_9f43f105315035d4.jpeg 480w, https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E9%98%BF%E6%8B%89%E4%B8%81%E7%A5%9E%E7%81%AF_hu_2b47d5f9497c8a65.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;阿拉丁神灯&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化提示词能让AI智商飙升500%！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这就像：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;原始人指令：&amp;ldquo;给爷整个火🔥&amp;rdquo; → 收获一堆湿树枝&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;现代人咒语：&amp;ldquo;请用打火石在距引火绒3cm处，以25°角摩擦，配合吹气节奏：吸气2秒→吹气5秒&amp;rdquo; → 获得篝火晚会VIP席位&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;案例对比高能预警&#34;&gt;🆘案例对比（高能预警）
&lt;/h4&gt;&lt;p&gt;❌ 直男式命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;写个口红文案
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💣AI输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;这款口红很好用 颜色饱满 买它&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;（李佳琦听了都要报警）&lt;/p&gt;
&lt;p&gt;✅ 魔法师咒语：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;你是混迹美妆圈8年的戏精文案，给YSL七夕限定丝绒口红写抖音带货文案。要求：  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1️、用“纯欲风”“钓系”等热词  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2️、融入分手逆袭爽剧情节  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3️、每句结尾自带BGM“姐就是女王”节奏感  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4️、必须出现1个谐音梗
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🎉AI秒变神仙：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;前任说我这嘴只配喝蜜雪冰城（摔镜框）💢  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;现在涂上ysl#199复仇色👇  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;他跪求复合的样子…（战术停顿）  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;像极了罗森关东煮最后一块萝卜🤡  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#纯欲天花板 #渣男退散音效 #啊啊啊这质地是丝绒吻过玫瑰吧！！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第二章-驯兽师速成班3招把ai训成24小时打工狗&#34;&gt;✨第二章 驯兽师速成班：3招把AI训成24小时打工狗
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E4%BA%8C%E5%93%88.webp&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E4%BA%8C%E5%93%88_hu_c0bb809fc0243abe.webp 480w, https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E4%BA%8C%E5%93%88_hu_9438ac040c737e5.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;打工狗&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;法则1角色扮演法给ai套上皮肤才有生产力&#34;&gt;🎩法则1：角色扮演法——给AI套上皮肤才有生产力！
&lt;/h4&gt;&lt;p&gt;你以为在对话？不！你是在给AI做赛博cosplay！&lt;/p&gt;
&lt;p&gt;💡沙雕但管用的咒语公式：&lt;br&gt;
&lt;strong&gt;你是______的______，需要______，要求______，禁止______&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;🌰真实案例：&lt;br&gt;
某教育公司用 &lt;strong&gt;&amp;ldquo;你是会阴阳怪气的海淀鸡娃名师，用《甄嬛传》台词风格讲解二次函数，每讲完一个考点就要嘲讽学渣1次&amp;rdquo;&lt;/strong&gt; 的提示词，让学生做题正确率暴涨60%！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%84%E5%AC%9B.webp&#34;
	width=&#34;1024&#34;
	height=&#34;576&#34;
	srcset=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%84%E5%AC%9B_hu_351a182ab8412bd5.webp 480w, https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E7%94%84%E5%AC%9B_hu_84fa390587b22427.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;钮祜禄·数学&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;法则2结构化投喂把ai当程序猿来使唤&#34;&gt;📦法则2：结构化投喂——把AI当程序猿来使唤！
&lt;/h4&gt;&lt;p&gt;记住：&lt;strong&gt;AI的脑子=你刚高考完的弟弟&lt;/strong&gt;（给模板才会做题）&lt;/p&gt;
&lt;p&gt;🔥万能框架模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;身份&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;：米其林三星主厨（被迫在城中村开大排档版）
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;任务&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;：设计情人节翻车套餐
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;要求&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;：
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1️、菜名要用emoji写成土味情话
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2️、每道菜成本＜20元
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3️、必须出现“老干妈”“卫龙辣条”
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4️、附带翻车指数评级
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;禁止&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;：出现“红酒”“牛排”等烧钱词汇
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;💣AI输出笑裂预警：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;「❤&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;️‍&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;🔥&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;辣条缠绕の心&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;」&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;实际是辣条捆香菜蘸老干妈&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;「💔&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;水泥封心慕斯&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;」&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;奥利奥碎拌水泥质感酸奶&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;「⚠&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;️爱情坟墓拌饭&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;」&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;（&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;隔夜饭&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;心形荷包蛋&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;，&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;蛋黄必流心失败&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;）&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;法则3祖宗式迭代ai是越骂越聪明的抖m&#34;&gt;🔄法则3：祖宗式迭代——AI是越骂越聪明的抖M！
&lt;/h4&gt;&lt;p&gt;记住这个祖传秘方：&lt;strong&gt;“重说！漏了…”  “不够沙雕！再…”  “第3点没落实！扣钱！”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;🌰手把手教学：&lt;br&gt;
&lt;strong&gt;第一轮：&lt;/strong&gt;&lt;br&gt;
&amp;ldquo;写个程序员相亲文案&amp;rdquo;&lt;br&gt;
AI输出：&amp;ldquo;擅长Java/C++，喜爱登山摄影&amp;rdquo;（简历既视感）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二轮：&lt;/strong&gt;&lt;br&gt;
&amp;ldquo;加入凡尔赛文学要素！&amp;rdquo;&lt;br&gt;
AI升级：&amp;ldquo;偶尔用Python写诗，GitHub星星多到需要开遮阳伞☂️&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三轮：&lt;/strong&gt;&lt;br&gt;
&amp;ldquo;不够惨！要有注孤生气质！&amp;rdquo;&lt;br&gt;
AI觉醒：&amp;ldquo;修电脑免费，但改需求请打钱💰｜喜欢人类（仅限于不问我「会不会盗QQ」时）｜婚恋市场递归算法：if(有对象) { return false; }&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;第三章-核能案例从青铜到王者的骚操作&#34;&gt;💥第三章 核能案例：从青铜到王者的骚操作
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;甲方需求：&lt;/strong&gt;&lt;br&gt;
&amp;ldquo;写个防晒霜带货文案&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;青铜版本：&lt;/strong&gt;&lt;br&gt;
&amp;ldquo;这款防晒霜SPF50+，防水防汗&amp;rdquo;（AI摆烂中）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;王者改造：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;你是精通废话文学的抖音爆款制造机，需要创作防晒霜短视频脚本。要求：  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1️、前三秒必须出现“你正在变丑！”
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2️、用“丧尸围城”比喻紫外线  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;3️、植入品牌名3次且不招人烦  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;4️、结尾要有“不转不是中国人”既视感  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;5️、每说10个字就要有“啪”打脸音效
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;🎬AI输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;镜头怼脸] &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;还在相信阴天不用防晒？（啪！）  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;紫外线正在把你腌成老坛酸菜！（丧尸音效）  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;XX防晒霜抹上脸——（慢动作喷雾）  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;比渣男分手速度更快成膜！（检测仪哔哔声）  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;现在下单…（突然嘶吼）难道要等斑长成地图才醒吗？！&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#防晒卷王 #早C晚A不如早晚涂它&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;第四章-保命指南这些作死行为达咩&#34;&gt;🚑第四章 保命指南：这些作死行为达咩！
&lt;/h3&gt;&lt;h4 id=&#34;作死行为1把ai当哆啦a梦&#34;&gt;💣作死行为1：把AI当哆啦A梦
&lt;/h4&gt;&lt;p&gt;❌ &amp;ldquo;告诉我怎么在宿舍造原子弹&amp;rdquo;&lt;br&gt;
✅ &amp;ldquo;用《小猪佩奇》画风解释核电站原理，类比煮火锅时火太大汤烧干&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;作死行为2要情绪不给参考物&#34;&gt;💣作死行为2：要情绪不给参考物
&lt;/h4&gt;&lt;p&gt;❌ &amp;ldquo;写首emo的情诗&amp;rdquo;&lt;br&gt;
✅ &amp;ldquo;模仿林黛玉发朋友圈的风格，用“奶茶三分糖”“论文查重率”等意象表达封校的忧伤&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;作死行为3把ai当许愿池王八&#34;&gt;💣作死行为3：把AI当许愿池王八
&lt;/h4&gt;&lt;p&gt;❌ &amp;ldquo;让我暴富&amp;rdquo;&lt;br&gt;
✅ &amp;ldquo;你是会占卜的财经博主，用MBTI人格分析各类型搞钱偏财方式，要求：ENFP适合摆摊算命，ISTJ适合开发Excel算命模板&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;第五章-新大陆会念咒躺着数钱&#34;&gt;🚀第五章 新大陆：会念咒=躺着数钱？
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%B8%88.webp&#34;
	width=&#34;689&#34;
	height=&#34;360&#34;
	srcset=&#34;https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%B8%88_hu_a21e704799a7b1f.webp 480w, https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/%E6%8F%90%E7%A4%BA%E8%AF%8D%E5%B7%A5%E7%A8%8B%E5%B8%88_hu_21ffd0c303303d73.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AI调教师&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;459px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;LinkedIn数据炸裂：&lt;strong&gt;提示词工程师时薪高达$300&lt;/strong&gt;！他们的作弊码包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;温度操控术&lt;/strong&gt;：30°C=高考阅卷老师模式｜90°C=喝假酒的李白模式&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;记忆嫁接术&lt;/strong&gt;：&amp;ldquo;你刚参加完全球AI大会，现在要用小学生能听懂的话解释量子计算&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;防杠补丁&lt;/strong&gt;：&amp;ldquo;回答需标注消息来源，不确定内容用“据说”开头，每隔三段要卖个萌&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;终极奥义让ai给你打工の哲学&#34;&gt;🔚终极奥义：让AI给你打工の哲学
&lt;/h3&gt;&lt;p&gt;下次被AI气到脑壳疼时，请默念：&lt;strong&gt;它不是在装傻，是在等你念通关密语！&lt;/strong&gt;&lt;br&gt;
现在你已解锁《赛博驯兽师资格证》，是时候让AI表演：&lt;br&gt;
✔️ 凌晨3点自动生成PPT&lt;br&gt;
✔️ 把老板的“五彩斑斓黑”需求翻译成人话&lt;br&gt;
✔️ 用鲁迅口吻写辞职信：“我大抵是倦了，横竖都坐不住…”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与其担心被AI取代，&lt;br&gt;
不如学会让AI替你内卷！💼&lt;br&gt;
打工人不骗打工人，&lt;br&gt;
转发这篇保你少搬10年砖！🚧&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>AI来了，第四次工业革命正式开卷！</title>
        <link>https://blog.yearsuns.com/p/the-third-industrial-revolution-is-now-in-full-swing/</link>
        <pubDate>Fri, 31 Jan 2025 11:59:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/the-third-industrial-revolution-is-now-in-full-swing/</guid>
        <description>&lt;h3 id=&#34;ai工业革命40人类何去何从&#34;&gt;&lt;strong&gt;AI=工业革命4.0，人类何去何从？&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;蒸汽机让人类甩掉了手工，电力让流水线疯狂加速，计算机和互联网让信息全球流动，而AI，直接让“聪明”成为一种自动化能力。&lt;/p&gt;
&lt;p&gt;有人欢呼：“AI让我们更高效！”&lt;/p&gt;
&lt;p&gt;有人忧虑：“AI会不会让我们失业？”&lt;/p&gt;
&lt;p&gt;更有人好奇：“这次会不会真轮到人类退休？”&lt;/p&gt;
&lt;p&gt;别急，今天就来扒一扒，&lt;strong&gt;AI凭啥能被称为第四次工业革命？&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;先复习下前两次工业革命我们到底被卷了啥&#34;&gt;&lt;strong&gt;先复习下前两次工业革命，我们到底被“卷”了啥？&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;1️⃣ &lt;strong&gt;第一次工业革命（18世纪）——肌肉革命！&lt;/strong&gt;&lt;br&gt;
关键词：蒸汽机、纺织机、工厂&lt;br&gt;
&lt;strong&gt;冲击：&lt;/strong&gt; 手工匠人泪目，机器顶替了大部分体力活，工厂模式兴起。&lt;/p&gt;
&lt;p&gt;2️⃣ &lt;strong&gt;第二次工业革命（19-20世纪）——电力革命！&lt;/strong&gt;&lt;br&gt;
关键词：电灯、流水线、大规模生产&lt;br&gt;
&lt;strong&gt;冲击：&lt;/strong&gt; 生产效率飙升，劳动力需求井喷，但重复性工作更多了。&lt;/p&gt;
&lt;p&gt;3️⃣ &lt;strong&gt;第三次工业革命（20世纪末至今）——信息化革命！&lt;/strong&gt;&lt;br&gt;
关键词：计算机、互联网、自动化&lt;br&gt;
&lt;strong&gt;冲击：&lt;/strong&gt; 体力劳动进一步减少，知识工作者迎来黄金时代。&lt;/p&gt;
&lt;h3 id=&#34;ai凭啥能封神成为第四次工业革命的引擎&#34;&gt;&lt;strong&gt;AI凭啥能“封神”，成为第四次工业革命的引擎？&lt;/strong&gt;
&lt;/h3&gt;&lt;h3 id=&#34;1-ai让自动化从手进化到脑&#34;&gt;&lt;strong&gt;1. AI让自动化从“手”进化到“脑”&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过去：&lt;/strong&gt; 工业革命让机器代替双手，但需要人来操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现在：&lt;/strong&gt; AI不需要人来教，它自己能“悟性”成长。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;举个栗子&lt;/strong&gt;：&lt;br&gt;
过去流水线上的工人需要按按钮、拧螺丝，现在&lt;strong&gt;AI机器人不仅能拧螺丝，还能决定哪颗螺丝更耐用！&lt;/strong&gt;&lt;br&gt;
过去程序员手写代码，现在AI可以自己写代码，甚至帮你找Bug，比你老板还严格！&lt;/p&gt;
&lt;h3 id=&#34;2-ai席卷行业全面搅局&#34;&gt;&lt;strong&gt;2. AI席卷行业，全面“搅局”&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;AI不只是自动化生产，它直接改变了行业本身！&lt;/p&gt;
&lt;p&gt;🚗 &lt;strong&gt;汽车行业：自动驾驶，司机要失业？&lt;/strong&gt;&lt;br&gt;
👨‍⚕️ &lt;strong&gt;医疗行业：AI诊断，医生会下岗？&lt;/strong&gt;&lt;br&gt;
🎨 &lt;strong&gt;创意行业：AI绘画、AI写作，艺术家慌不慌？&lt;/strong&gt;&lt;br&gt;
📈 &lt;strong&gt;金融行业：AI量化交易，比人类交易员快100倍！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;别觉得这些只是“科幻片”，&lt;strong&gt;ChatGPT已经能通过律师考试，Midjourney能画出顶级插画，AI交易员已经在华尔街大杀四方！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;AI的破坏性，堪比当年的蒸汽机、流水线！&lt;/p&gt;
&lt;h3 id=&#34;3-ai太便宜资本家疯狂买单&#34;&gt;&lt;strong&gt;3. AI太“便宜”，资本家疯狂买单&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;工业革命的核心就是&lt;strong&gt;更高效、更便宜&lt;/strong&gt;，AI恰好满足所有条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不加班，不请假，不要工资，24小时在线干活&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可以自学，越干越聪明&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一旦开发出来，复制成本趋近于0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;结果？资本家一拍大腿：“人类，你下岗吧！”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;科技公司疯狂砸钱搞AI，2023年ChatGPT一发布，全球科技公司开始军备竞赛，&lt;strong&gt;AI成了“新时代印钞机”&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;ai时代普通人该怎么办&#34;&gt;&lt;strong&gt;AI时代，普通人该怎么办？&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;别急着躺平，也别盲目恐慌，每一次工业革命都会淘汰旧职业，同时创造新职业。&lt;/p&gt;
&lt;h3 id=&#34;三大应对策略帮你站稳ai时代&#34;&gt;&lt;strong&gt;三大应对策略，帮你站稳AI时代！&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;🔹 &lt;strong&gt;1. 不和AI抢饭碗，而是学会“用AI”&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;程序员要会用AI写代码，而不是被AI取代&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设计师要学会AI绘图，而不是害怕AI比你画得好&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;医生要用AI诊断提升效率，而不是排斥它&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心思维：AI不是你的对手，而是你的外挂！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;🔹 &lt;strong&gt;2. 选择AI难以取代的“高情商”工作&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;复杂人际关系：心理咨询、谈判专家、社交达人&lt;/li&gt;
&lt;li&gt;需要创造性：品牌策划、艺术创作、导演编剧&lt;/li&gt;
&lt;li&gt;需要实践经验：手艺人、工程维修、医生手术&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;AI能做的，都会越来越便宜，人类独特的软技能才是未来竞争力！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;🔹 &lt;strong&gt;3. 拥抱AI，成为“AI+”人才&lt;/strong&gt;&lt;br&gt;
未来，最值钱的不是单纯的程序员、设计师、律师，而是**“AI+”型人才：**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AI+法律&lt;/strong&gt;：能用AI自动整理案情的律师&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI+营销&lt;/strong&gt;：能用AI精准推销产品的市场人&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI+教育&lt;/strong&gt;：能用AI提高学习效率的老师&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来不是“AI取代人”，而是“会用AI的人取代不会用AI的人”！&lt;/p&gt;
&lt;h3 id=&#34;结语工业革命从未停止ai只是加速器&#34;&gt;&lt;strong&gt;结语：工业革命从未停止，AI只是加速器&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;AI并不会让人类“退休”，但一定会逼着我们进化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次工业革命淘汰了手工业者，&lt;strong&gt;造就了工厂工人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第二次工业革命淘汰了手工作坊，&lt;strong&gt;造就了流水线工人&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三次工业革命淘汰了线下商铺，&lt;strong&gt;造就了写字楼牛马&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;AI革命不会淘汰人类，而是&lt;strong&gt;淘汰不会用AI的人&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;🚀 &lt;strong&gt;未来已来，别再观望，快抱紧AI这条大腿吧！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何赚它一百万？</title>
        <link>https://blog.yearsuns.com/p/how-to-earn-your-first-million/</link>
        <pubDate>Thu, 30 Jan 2025 14:59:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/how-to-earn-your-first-million/</guid>
        <description>&lt;p&gt;想赚到100万？&lt;/p&gt;
&lt;p&gt;先搞清楚赚钱的本质——&lt;strong&gt;交换&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;第一步赚钱的底层逻辑&#34;&gt;&lt;strong&gt;第一步：赚钱的底层逻辑&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;赚钱的方式大致分为三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打工&lt;/strong&gt;：出卖时间换工资，收入受限。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复利式赚钱&lt;/strong&gt;：一次投入，多次收益（写书、课程、短视频）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;杠杆式赚钱&lt;/strong&gt;：雇佣他人时间，放大收益（开公司、做投资）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想提升收入，就得&lt;strong&gt;提高单位时间的价值&lt;/strong&gt;，直到你不得不花钱购买别人的时间。&lt;/p&gt;
&lt;h2 id=&#34;第二步普通人如何赚100万&#34;&gt;&lt;strong&gt;第二步：普通人如何赚100万？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;赚钱是选择大于努力，真正赚钱的路子，大多数人没见过。&lt;/p&gt;
&lt;h3 id=&#34;赚钱的四个关键点&#34;&gt;&lt;strong&gt;赚钱的四个关键点&lt;/strong&gt;：
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;选对赛道&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;80%的人在苦赚辛苦钱，20%的人在赚轻松钱。&lt;/li&gt;
&lt;li&gt;选准行业，紧贴市场需求，钱自然流向你。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续精进&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;赚钱没有一蹴而就，一边做一边调整，越做越精准。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;疯狂执行&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;选定方向后别犹豫，拼尽全力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;等待运气&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;你努力的时间越长，成功的概率越大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;第三步副业到底怎么搞&#34;&gt;&lt;strong&gt;第三步：副业到底怎么搞？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;搞副业，先思考四个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你为谁提供服务？&lt;/li&gt;
&lt;li&gt;你能解决什么问题？&lt;/li&gt;
&lt;li&gt;你的产品/服务值多少钱？&lt;/li&gt;
&lt;li&gt;你的竞争力是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果不知道做什么，先去做&lt;strong&gt;变现能力强的赛道&lt;/strong&gt;，比如短视频、直播、社群电商等。&lt;/p&gt;
&lt;h3 id=&#34;副业赚钱闭环流量产品转化&#34;&gt;&lt;strong&gt;副业赚钱闭环：流量→产品→转化&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流量&lt;/strong&gt;：通过短视频、社交平台、广告吸引用户。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;产品&lt;/strong&gt;：提供有价值的内容、服务或商品。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转化&lt;/strong&gt;：让用户愿意为你的产品买单。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;副业成长路径&#34;&gt;&lt;strong&gt;副业成长路径&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;赚到第一块钱&lt;/strong&gt;，建立信心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;收入与主业持平&lt;/strong&gt;，不怕被裁员。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;副业收入 5 倍于主业&lt;/strong&gt;，考虑全职搞。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;第四步如何投资理财让钱生钱&#34;&gt;&lt;strong&gt;第四步：如何投资理财，让钱生钱？&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;存款1000万以下的人，不建议全职投资，那是幻想。&lt;/p&gt;
&lt;h3 id=&#34;投资的四象限&#34;&gt;&lt;strong&gt;投资的四象限&lt;/strong&gt;
&lt;/h3&gt;&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;&lt;/th&gt;
          &lt;th&gt;赚钱&lt;/th&gt;
          &lt;th&gt;亏钱&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;简单&lt;/td&gt;
          &lt;td&gt;基金、转债&lt;/td&gt;
          &lt;td&gt;彩票&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;复杂&lt;/td&gt;
          &lt;td&gt;股票、套利&lt;/td&gt;
          &lt;td&gt;炒股盲目冲动&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基金投资&lt;/strong&gt;：选指数基金，拉长周期，避免追涨杀跌。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可转债&lt;/strong&gt;：用&amp;quot;打新债&amp;quot;、&amp;ldquo;双低策略&amp;quot;来低风险获利。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;套利机会&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;资本市场套利：可转债折价、LOF基金套利&lt;/li&gt;
&lt;li&gt;实体套利：抢茅台、抢演唱会门票&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;聪明的投资者不会和大佬抢肉吃，而是利用信息差寻找确定性收益。&lt;/p&gt;
&lt;h2 id=&#34;最后如何打造你的稳赚系统&#34;&gt;&lt;strong&gt;最后，如何打造你的“稳赚系统”？&lt;/strong&gt;
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;搞钱闭环&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创富&lt;/strong&gt;：通过副业/创业获取现金流。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增富&lt;/strong&gt;：用投资理财让钱滚钱。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;选对方向，持续执行&lt;/strong&gt;，赚钱就是信息差+执行力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加入核心圈子，获取赚钱信息差&lt;/strong&gt;，越早行动，越早收益。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;想赚100万？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;选赛道&lt;/strong&gt;，找到赚钱路子。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;敢执行&lt;/strong&gt;，不断优化策略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;会投资&lt;/strong&gt;，让钱生钱。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;别再等了，干就完了！&lt;/p&gt;
&lt;p&gt;本文是根据迟帅老师的【赚它一百万商业手册】总结而来&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 Hugo &#43; GitHub 搭建个人博客（自动部署）</title>
        <link>https://blog.yearsuns.com/p/how-to-build-a-personal-blog-with-hugo-and-github-pages/</link>
        <pubDate>Thu, 30 Jan 2025 14:59:56 +0800</pubDate>
        
        <guid>https://blog.yearsuns.com/p/how-to-build-a-personal-blog-with-hugo-and-github-pages/</guid>
        <description>&lt;p&gt;想要一个自己的博客，省心又免费？&lt;/p&gt;
&lt;p&gt;试试 &lt;strong&gt;Hugo + GitHub Pages&lt;/strong&gt;！只需几个步骤，就能搭建一个 &lt;strong&gt;高速、免费、可自动部署&lt;/strong&gt; 的个人博客网站。&lt;/p&gt;
&lt;h2 id=&#34;1-安装-hugo&#34;&gt;&lt;strong&gt;1. 安装 Hugo&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;windows&#34;&gt;&lt;strong&gt;Windows&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;用 &lt;strong&gt;Scoop&lt;/strong&gt;（推荐）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接去 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/getting-started/installing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo 官方网站&lt;/a&gt; 下载。&lt;/p&gt;
&lt;h3 id=&#34;mac&#34;&gt;&lt;strong&gt;Mac&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;linux&#34;&gt;&lt;strong&gt;Linux&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install hugo  &lt;span style=&#34;color:#75715e&#34;&gt;# Debian/Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo dnf install hugo  &lt;span style=&#34;color:#75715e&#34;&gt;# Fedora&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;检查是否安装成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-创建-hugo-博客&#34;&gt;&lt;strong&gt;2. 创建 Hugo 博客&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site myblog
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd myblog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hugo 会生成一个网站的基本目录结构。&lt;/p&gt;
&lt;h2 id=&#34;3-选择并安装主题&#34;&gt;&lt;strong&gt;3. 选择并安装主题&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;去 &lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo Themes&lt;/a&gt; 找个喜欢的主题，比如 &lt;code&gt;ananke&lt;/code&gt;，然后安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编辑 &lt;code&gt;config.toml&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ananke&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://&amp;lt;username&amp;gt;.github.io/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;4-添加第一篇文章&#34;&gt;&lt;strong&gt;4. 添加第一篇文章&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/my-first-post.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后编辑 &lt;code&gt;content/posts/my-first-post.md&lt;/code&gt;，加上内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-md&#34; data-lang=&#34;md&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;title: &amp;#34;我的第一篇博客&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;date: 2025-01-31T12:00:00+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;draft: false
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, Hugo!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;5-本地预览&#34;&gt;&lt;strong&gt;5. 本地预览&lt;/strong&gt;
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo server -D
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在浏览器访问 &lt;code&gt;http://localhost:1313&lt;/code&gt; 看效果。&lt;/p&gt;
&lt;h2 id=&#34;6-发布到-github&#34;&gt;&lt;strong&gt;6. 发布到 GitHub&lt;/strong&gt;
&lt;/h2&gt;&lt;h3 id=&#34;1创建-github-仓库&#34;&gt;&lt;strong&gt;（1）创建 GitHub 仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;私有仓库&lt;/strong&gt;：&lt;code&gt;myblog-src&lt;/code&gt;（存源码）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公开仓库&lt;/strong&gt;：&lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;（存生成的网站文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2把源码推送到私有仓库&#34;&gt;&lt;strong&gt;（2）把源码推送到私有仓库&lt;/strong&gt;
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote add origin https://github.com/&amp;lt;username&amp;gt;/myblog-src.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git branch -M master
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;初始化 Hugo 博客&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;7-创建-github-tokengithub_token&#34;&gt;&lt;strong&gt;7. 创建 GitHub Token（GITHUB_TOKEN）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;由于我们要把生成的静态网站推送到 &lt;code&gt;username.github.io&lt;/code&gt; 仓库，需要 GitHub Token 进行授权。&lt;/p&gt;
&lt;h3 id=&#34;1生成-token&#34;&gt;&lt;strong&gt;（1）生成 Token&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入 GitHub，点击右上角头像，选择 &lt;strong&gt;Settings&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在左侧菜单选择 &lt;strong&gt;Developer settings → Personal access tokens → Fine-grained tokens&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;点击 &lt;strong&gt;Generate new token&lt;/strong&gt;，然后：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Repository access&lt;/strong&gt; 选择 &lt;code&gt;Only select repositories&lt;/code&gt;，勾选 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Permissions&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Contents&lt;/code&gt;: 选择 &lt;strong&gt;Read and Write&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;其他保持默认&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击 Generate token&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制 Token&lt;/strong&gt;，保存到本地（只能看一次）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2添加到-github-actions&#34;&gt;&lt;strong&gt;（2）添加到 GitHub Actions&lt;/strong&gt;
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进入 &lt;code&gt;myblog-src&lt;/code&gt; 仓库&lt;/li&gt;
&lt;li&gt;打开 &lt;strong&gt;Settings → Secrets and variables → Actions → New repository secret&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Name 填写 &lt;code&gt;DEPLOY_TOKEN&lt;/code&gt;，Value 粘贴刚才复制的 Token，点击 &lt;strong&gt;Add secret&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-配置-github-actions自动部署&#34;&gt;&lt;strong&gt;8. 配置 GitHub Actions（自动部署）&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;myblog-src&lt;/code&gt; 仓库中，新建 &lt;code&gt;.github/workflows/deploy.yml&lt;/code&gt;，写入：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sample workflow for building and deploying a Hugo site to GitHub Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Hugo site to Pages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Runs on pushes targeting the default branch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Default to bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;defaults&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;shell&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;deploy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;runs-on&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;HUGO_VERSION&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0.142.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Install Hugo CLI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: |&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          &amp;amp;&amp;amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;submodules&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;recursive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#f92672&#34;&gt;fetch-depth&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Build Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;run&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;hugo -D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      - &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Deploy Web&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;uses&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;peaceiris/actions-gh-pages@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PERSONAL_TOKEN&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;${{ secrets.BLOG_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;EXTERNAL_REPOSITORY&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_BRANCH&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;master&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;PUBLISH_DIR&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;./public&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;commit_message&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;auto deploy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;9-配置-github-pages&#34;&gt;&lt;strong&gt;9. 配置 GitHub Pages&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;进入 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; 仓库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Settings → Pages&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Branch 选择 &lt;code&gt;master&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;点击 Save&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;10-提交修改自动部署&#34;&gt;&lt;strong&gt;10. 提交修改，自动部署！&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;以后只需提交博客源码，GitHub Actions 会自动部署：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;更新文章&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;稍等片刻，你的博客就会出现在：&lt;br&gt;
👉 &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;
&lt;/h2&gt;&lt;p&gt;你已经成功使用 &lt;strong&gt;Hugo + GitHub Pages&lt;/strong&gt; 搭建了一个 &lt;strong&gt;私有源码、自动部署&lt;/strong&gt; 的个人博客！🎉&lt;br&gt;
随时写文章，推送后 &lt;strong&gt;自动上线&lt;/strong&gt;，是不是超简单？💡&lt;/p&gt;
&lt;p&gt;🚀 &lt;strong&gt;快去试试吧！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
