[{"content":"有时候，程序员的日子就像《荒野求生》，问题就是那条饿着肚子追你的鳄鱼，你呢？跪着发帖：“大佬们救救孩子吧，代码写崩了！”\n结果呢？没人回。\n为什么？\n因为你发的帖就像“妈丫，肚子疼！”却忘了告诉医生是吃撑了、饿坏了、还是中午猛喝了五碗麻辣烫。\n今天，我来教你如何精准描述你的技术问题，让你瞬间从 “救救孩子” 进化到 “这哥们值得救”。\nStep 1：说清楚你在干啥，别藏着掖着 想让别人帮你？背景交代到位，别怕麻烦！\n大佬们不懂你家后院代码都咋跑的。来一段上下文，简洁明了！\n比如，你发帖别写：“Redis 锁续期有问题，快点来！”\n改成这样：\n我正在用 Spring Boot + Redisson 实现分布式锁，Spring Boot 版本 3.0.0，Redisson 用的是最新的 3.20.0。问题出在本地单元测试时锁续期失效。\n大佬看到这，立刻有谱：哦，这哥们用的是主流技术栈，问题不难搞！\nStep 2：问题描述要具体，别用感叹号骗大佬注意力 很多人喜欢放大自己的“惨状”：“完了，炸了，全崩了！”\n可是你连个报错信息都不贴上，难道指望大佬靠读心术帮你？\n错误信息一定要说清楚，关键内容圈出来，别整篇贴，显得像年终总结。比如：\n当我运行 lock.lock(60, TimeUnit.SECONDS) 时，日志显示：\njava.lang.IllegalStateException: Lock expired while executing task 错误出在锁续期失效，导致任务中途被抢锁。\n看！这样既具体，又不会让人头疼。\nStep 3：问题复现三板斧，连小白也能操作 技术问题要让别人有地方下手，就像解锁游戏副本的攻略。没法复现的问题，等于在地里找针。\n来个实例：\n错误复现步骤：\n启动 Redis 服务器，开启 Redisson 配置。 运行测试类 LockTest.java。 等待 30 秒后，问题出现。 清清楚楚三步走，大佬立刻知道咋搞。再加上你的配置文件、核心代码，人家手里有锤子，就能敲问题！\nStep 4：预期 vs 实际，问题得有个对比 人类（包括程序员）特别爱“对比法”，这会让大佬迅速明白你的痛点在哪里。\n比如这样写：\n预期：分布式锁应自动续期，确保任务完整执行。\n实际：锁未续期，任务执行到一半时锁被释放，导致数据不一致。\n逻辑一目了然！\nStep 5：展示你的努力，赢得大佬尊重 大佬们愿意帮有诚意的人。问题描述时，提一提你做过的尝试：\n尝试过的解决方法：\n检查了 Redis 是否正常启动，结果运行良好。 调试了 Redisson 配置，useSingleServer 设置正确。 改用 tryLock() 测试，问题依然存在。 这样一来，大佬心里一暖：“这哥们不是等着躺平，他是真心要解决问题！”\n6. 加点小细节，补充大佬的“弹药库” 最后再补上必要信息，比如操作系统、开发环境、核心代码片段。别一来就上百行代码，关键的几行就行了。\n环境：\n操作系统：MacOS 12.3 JDK：17 核心代码：\nRLock lock = redissonClient.getLock(\u0026#34;testLock\u0026#34;); lock.lock(60, TimeUnit.SECONDS); // 问题出现在这里 完美示例：把大佬整哭了的求助帖 背景：\n我正在用 Spring Boot + Redisson 实现分布式锁，版本如下：\nSpring Boot：3.0.0 Redisson：3.20.0 问题：\n单元测试中，锁无法自动续期，导致任务中途锁被释放。日志错误如下：\njava.lang.IllegalStateException: Lock expired while executing task 复现步骤：\n启动 Redis 服务器，使用默认配置。 运行测试类 LockTest.java。 等待超过 30 秒的锁超时时间，问题复现。 预期 vs 实际：\n预期：分布式锁自动续期，任务顺利完成。 实际：锁未续期，导致任务执行到一半被中断。 尝试过的解决方法：\n检查 Redis 是否正常运行，结果正常。 使用 tryLock() 方法测试，问题依然存在。 增加日志查看续期机制，发现续期任务未触发。 补充信息：\n操作系统：MacOS 12.3 JDK：17 Redisson 配置： Config config = new Config(); config.useSingleServer().setAddress(\u0026#34;redis://127.0.0.1:6379\u0026#34;); 结语 程序员求助的秘诀，在于精准、简洁和条理清晰。\n记住，这不仅仅是给别人看的，也是在训练自己的问题分析能力。\n当你学会准确描述问题的那天，你离解决问题已经不远了！\n最后，祝大家都能成为被大佬们“抢着帮”的技术王者～\n","date":"2025-02-09T20:43:56+08:00","permalink":"https://blog.yearsuns.com/p/tips-for-explaining-tech-issues/","title":"程序员的自救指南：如何精准描述你的技术问题，让大佬想帮你"},{"content":"前言\n在当今的 web 开发中，身份验证是非常关键的，而 JWT（JSON Web Token）作为一种简单、高效的身份验证方式，已经被广泛应用在许多前后端分离的项目中。本篇文章将带你从零开始理解 JWT，探讨它的优缺点，并介绍最佳实践。\n什么是 JWT？ JWT 是一种开放标准（RFC 7519），用于在不同系统之间安全地传递信息。简单来说，JWT 主要用于认证和信息交换，常见的应用场景就是用户登录验证。JWT 通常在用户登录后生成，并随后的请求中带着它来进行身份认证。\nJWT 结构 JWT 的结构非常简单，它由三部分组成：\n头部（Header）\n头部通常包含两部分内容：令牌类型（JWT）和签名算法（如 HMAC SHA256 或 RSA）。\n载荷（Payload）\n载荷是 JWT 的“正文”部分，存储了你希望传递的数据（比如用户 ID 或权限）。这里面包含了 \u0026ldquo;Claims\u0026rdquo;（声明），有三种类型：\n注册声明：如 sub（主题）、exp（过期时间）、iat（签发时间）等。 公共声明：可以自定义的数据，但需要避免冲突。 私有声明：你自己定义的声明。 签名（Signature）\n签名部分用于验证信息的完整性，确保数据没有被篡改。生成签名的方式是：用头部和载荷，通过密钥（对于对称加密是一个密钥，非对称加密是私钥）生成。\nJWT 的生成和验证原理 JWT 的生成过程 用户登录：\n用户输入用户名和密码，通过认证系统登录。\n服务器生成 JWT：\n认证成功后，服务器会使用一个密钥（对称加密）或者私钥（非对称加密）生成一个 JWT。生成过程包括：\n将头部和载荷（即数据）部分通过 Base64 编码。 用密钥对这两部分进行签名，生成签名部分。 生成后的 JWT 看起来像这样：\nheader.payload.signature 例如：\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c 返回 JWT 给客户端：\n服务器把生成的 JWT 返回给客户端，通常客户端会将其存储在本地（如 LocalStorage 或 Cookie）中。\nJWT 的验证过程 客户端发起请求：\n客户端每次请求时，会将 JWT 添加到请求的 Authorization 头部中（例如：Authorization: Bearer \u0026lt;JWT\u0026gt;）。\n服务器验证 JWT：\n服务器拿到 JWT 后，通过以下步骤来验证：\n解析 JWT 的头部、载荷和签名。 使用密钥（对于对称加密）或公钥（对于非对称加密）对签名部分进行验证，看是否与头部和载荷部分匹配。 如果验证通过，说明 JWT 的数据未被篡改，服务器就会继续处理请求。如果验证失败，说明 JWT 被篡改，服务器会返回错误信息。\nJWT 的优点 无状态（Stateless）\nJWT 是无状态的，意味着服务器不需要存储用户会话数据。每次请求都包含 JWT，服务器可以根据 JWT 里的信息来进行认证。这样减少了服务器的负担，提升了系统的扩展性。\n跨域支持\n由于 JWT 是由客户端传递，它非常适合前后端分离的项目，可以跨域进行身份验证，避免了传统 Cookie 的同源限制。\n轻量级\nJWT 的大小较小，通常在几十到一百多个字节之间，非常适合频繁的 HTTP 请求，传输效率高。\n适合微服务架构\nJWT 可以在多个服务之间传递身份信息，非常适合分布式架构，尤其是微服务架构中的身份认证。\nJWT 的缺点 无法撤销\n一旦 JWT 被发放出去，它就无法撤销。如果 JWT 泄露，攻击者可以在有效期内反复使用。这比传统的 Session 认证要危险，后者可以在服务器端主动注销会话。\n存储和安全问题\nJWT 如果存储不当（如保存在 LocalStorage 或 Cookie 中），可能会受到 XSS 攻击。如果攻击者能够获取到 JWT，就能伪造合法请求。\n过期问题\nJWT 通常设定有过期时间，一旦过期，就不能再使用。为了避免频繁登录，可以使用刷新令牌（Refresh Token）。不过如果过期时间设置不合理，可能会影响用户体验。\n载荷不加密\nJWT 的载荷部分是 Base64 编码的，不是加密的。任何人都可以解码并看到其中的内容。因此，切勿将敏感信息（如密码）存储在 JWT 中。\n密钥泄漏的风险\nJWT 的安全性依赖于密钥的保密性。如果密钥泄露，攻击者可以伪造有效的 JWT。因此，保护好密钥非常重要。\nJWT 的使用场景 单点登录（SSO）\nJWT 非常适合实现跨应用的单点登录（SSO）。只需生成一次 JWT，就可以在多个系统之间共享。\n移动应用身份认证\n在移动应用中，JWT 常常用来进行身份验证。客户端存储 JWT，并在每次请求中发送。\n前后端分离的应用\n在前后端分离的架构中，前端和后端可以独立进行身份验证，使用 JWT 作为认证工具，避免了传统 Cookie 的问题。\nJWT 的最佳实践 不要在 JWT 中存储敏感信息\n由于 JWT 的载荷部分是可以解码的，敏感信息（如密码、银行卡信息）绝对不能存储在 JWT 中。你可以把这些信息存储在服务器端，JWT 只传递一个标识符。\n使用 HTTPS\n无论是生成 JWT 还是传输 JWT，都应使用 HTTPS 协议，确保数据在传输过程中不会被窃听或篡改。\n设置合理的过期时间\nJWT 的过期时间要设置合理。过短可能影响用户体验，过长则可能存在安全隐患。通常，访问令牌的过期时间可以设置为 15 分钟到 1 小时，刷新令牌可以设置较长时间。\n使用刷新令牌\n结合使用访问令牌（Access Token）和刷新令牌（Refresh Token）。当访问令牌过期时，客户端可以使用刷新令牌获取新的访问令牌。\n存储 JWT 的安全性\n如果你把 JWT 存储在浏览器中，推荐使用 HttpOnly 和 Secure 标志的 Cookie，以避免 XSS 攻击的风险。避免将 JWT 存储在 LocalStorage 中，因为它更容易受到 XSS 攻击。\n签名算法选择\n在选择签名算法时，推荐使用非对称加密的算法（如 RS256 或 ES256），而不是对称加密的算法（如 HS256），这样可以提高安全性，避免密钥泄露风险。\n密钥管理\n密钥是 JWT 安全的关键。无论是对称加密还是非对称加密，都应该采取安全措施保护密钥。避免将密钥硬编码在代码中，可以通过环境变量或专门的密钥管理工具来管理密钥。\n总结 JWT 是一种非常流行的身份验证方式，它简单、轻量、无状态，非常适合现代 web 应用，尤其是前后端分离的项目。但它也有一些缺点，尤其是在密钥泄漏和无法撤销的场景下。因此，使用 JWT 时需要特别注意密钥的管理和安全配置，合理设置过期时间，避免将敏感信息存储在 JWT 中。\n","date":"2025-02-07T20:25:56+08:00","permalink":"https://blog.yearsuns.com/p/best-practices-of-jwt/","title":"JWT的最佳实践"},{"content":"🚨开篇暴击：人类大型破防现场 上周朋友说被AI气到表演英年吐血。\n他让AI\u0026quot;写份高大上的行业报告\u0026quot;，结果收到的是《论宇宙膨胀与奶茶销量的量子纠缠》，最终得出结论“每少喝一杯杨枝甘露，黑洞半径增加0.5%”。\n我看着他的聊天记录，不禁陷入沉思。\n不是AI太智障，是你不会下指令啊！\n🧠第一章 AI是阿拉丁神灯or人工智障？全看你会不会念咒！ 优化提示词能让AI智商飙升500%！\n这就像：\n原始人指令：\u0026ldquo;给爷整个火🔥\u0026rdquo; → 收获一堆湿树枝\n现代人咒语：\u0026ldquo;请用打火石在距引火绒3cm处，以25°角摩擦，配合吹气节奏：吸气2秒→吹气5秒\u0026rdquo; → 获得篝火晚会VIP席位\n🆘案例对比（高能预警） ❌ 直男式命令：\n写个口红文案 💣AI输出：\n这款口红很好用 颜色饱满 买它 （李佳琦听了都要报警）\n✅ 魔法师咒语：\n你是混迹美妆圈8年的戏精文案，给YSL七夕限定丝绒口红写抖音带货文案。要求： 1️、用“纯欲风”“钓系”等热词 2️、融入分手逆袭爽剧情节 3️、每句结尾自带BGM“姐就是女王”节奏感 4️、必须出现1个谐音梗 🎉AI秒变神仙：\n前任说我这嘴只配喝蜜雪冰城（摔镜框）💢 现在涂上ysl#199复仇色👇 他跪求复合的样子…（战术停顿） 像极了罗森关东煮最后一块萝卜🤡 #纯欲天花板 #渣男退散音效 #啊啊啊这质地是丝绒吻过玫瑰吧！！ ✨第二章 驯兽师速成班：3招把AI训成24小时打工狗 🎩法则1：角色扮演法——给AI套上皮肤才有生产力！ 你以为在对话？不！你是在给AI做赛博cosplay！\n💡沙雕但管用的咒语公式：\n你是______的______，需要______，要求______，禁止______\n🌰真实案例：\n某教育公司用 \u0026ldquo;你是会阴阳怪气的海淀鸡娃名师，用《甄嬛传》台词风格讲解二次函数，每讲完一个考点就要嘲讽学渣1次\u0026rdquo; 的提示词，让学生做题正确率暴涨60%！\n📦法则2：结构化投喂——把AI当程序猿来使唤！ 记住：AI的脑子=你刚高考完的弟弟（给模板才会做题）\n🔥万能框架模板：\n[身份]：米其林三星主厨（被迫在城中村开大排档版） [任务]：设计情人节翻车套餐 [要求]： 1️、菜名要用emoji写成土味情话 2️、每道菜成本＜20元 3️、必须出现“老干妈”“卫龙辣条” 4️、附带翻车指数评级 [禁止]：出现“红酒”“牛排”等烧钱词汇 💣AI输出笑裂预警：\n「❤️‍🔥辣条缠绕の心」 （实际是辣条捆香菜蘸老干妈） 「💔水泥封心慕斯」 （奥利奥碎拌水泥质感酸奶） 「⚠️爱情坟墓拌饭」 （隔夜饭+心形荷包蛋，蛋黄必流心失败） 🔄法则3：祖宗式迭代——AI是越骂越聪明的抖M！ 记住这个祖传秘方：“重说！漏了…” “不够沙雕！再…” “第3点没落实！扣钱！”\n🌰手把手教学：\n第一轮：\n\u0026ldquo;写个程序员相亲文案\u0026rdquo;\nAI输出：\u0026ldquo;擅长Java/C++，喜爱登山摄影\u0026rdquo;（简历既视感）\n第二轮：\n\u0026ldquo;加入凡尔赛文学要素！\u0026rdquo;\nAI升级：\u0026ldquo;偶尔用Python写诗，GitHub星星多到需要开遮阳伞☂️\u0026rdquo;\n第三轮：\n\u0026ldquo;不够惨！要有注孤生气质！\u0026rdquo;\nAI觉醒：\u0026ldquo;修电脑免费，但改需求请打钱💰｜喜欢人类（仅限于不问我「会不会盗QQ」时）｜婚恋市场递归算法：if(有对象) { return false; }\u0026rdquo;\n💥第三章 核能案例：从青铜到王者的骚操作 甲方需求：\n\u0026ldquo;写个防晒霜带货文案\u0026rdquo;\n青铜版本：\n\u0026ldquo;这款防晒霜SPF50+，防水防汗\u0026rdquo;（AI摆烂中）\n王者改造：\n你是精通废话文学的抖音爆款制造机，需要创作防晒霜短视频脚本。要求： 1️、前三秒必须出现“你正在变丑！” 2️、用“丧尸围城”比喻紫外线 3️、植入品牌名3次且不招人烦 4️、结尾要有“不转不是中国人”既视感 5️、每说10个字就要有“啪”打脸音效 🎬AI输出：\n[镜头怼脸] 还在相信阴天不用防晒？（啪！） 紫外线正在把你腌成老坛酸菜！（丧尸音效） XX防晒霜抹上脸——（慢动作喷雾） 比渣男分手速度更快成膜！（检测仪哔哔声） 现在下单…（突然嘶吼）难道要等斑长成地图才醒吗？！ #防晒卷王 #早C晚A不如早晚涂它 🚑第四章 保命指南：这些作死行为达咩！ 💣作死行为1：把AI当哆啦A梦 ❌ \u0026ldquo;告诉我怎么在宿舍造原子弹\u0026rdquo;\n✅ \u0026ldquo;用《小猪佩奇》画风解释核电站原理，类比煮火锅时火太大汤烧干\u0026rdquo;\n💣作死行为2：要情绪不给参考物 ❌ \u0026ldquo;写首emo的情诗\u0026rdquo;\n✅ \u0026ldquo;模仿林黛玉发朋友圈的风格，用“奶茶三分糖”“论文查重率”等意象表达封校的忧伤\u0026rdquo;\n💣作死行为3：把AI当许愿池王八 ❌ \u0026ldquo;让我暴富\u0026rdquo;\n✅ \u0026ldquo;你是会占卜的财经博主，用MBTI人格分析各类型搞钱偏财方式，要求：ENFP适合摆摊算命，ISTJ适合开发Excel算命模板\u0026rdquo;\n🚀第五章 新大陆：会念咒=躺着数钱？ LinkedIn数据炸裂：提示词工程师时薪高达$300！他们的作弊码包括：\n温度操控术：30°C=高考阅卷老师模式｜90°C=喝假酒的李白模式 记忆嫁接术：\u0026ldquo;你刚参加完全球AI大会，现在要用小学生能听懂的话解释量子计算\u0026rdquo; 防杠补丁：\u0026ldquo;回答需标注消息来源，不确定内容用“据说”开头，每隔三段要卖个萌\u0026rdquo; 🔚终极奥义：让AI给你打工の哲学 下次被AI气到脑壳疼时，请默念：它不是在装傻，是在等你念通关密语！\n现在你已解锁《赛博驯兽师资格证》，是时候让AI表演：\n✔️ 凌晨3点自动生成PPT\n✔️ 把老板的“五彩斑斓黑”需求翻译成人话\n✔️ 用鲁迅口吻写辞职信：“我大抵是倦了，横竖都坐不住…”\n记住：\n与其担心被AI取代，\n不如学会让AI替你内卷！💼\n打工人不骗打工人，\n转发这篇保你少搬10年砖！🚧\n","date":"2025-02-04T12:25:56+08:00","permalink":"https://blog.yearsuns.com/p/3-spells-to-tame-the-wild-ai/","title":"别让AI把你当傻子！3个咒语驯服野生AI，打工效率直接芜湖起飞🛫"},{"content":"AI=工业革命3.0，人类何去何从？ 蒸汽机让人类甩掉了手工，电力让流水线疯狂加速，计算机和互联网让信息全球流动，而AI，直接让“聪明”成为一种自动化能力。\n有人欢呼：“AI让我们更高效！”\n有人忧虑：“AI会不会让我们失业？”\n更有人好奇：“这次会不会真轮到人类退休？”\n别急，今天就来扒一扒，AI凭啥能被称为第三次工业革命？\n先复习下前两次工业革命，我们到底被“卷”了啥？ 1️⃣ 第一次工业革命（18世纪）——肌肉革命！\n关键词：蒸汽机、纺织机、工厂\n冲击： 手工匠人泪目，机器顶替了大部分体力活，工厂模式兴起。\n2️⃣ 第二次工业革命（19-20世纪）——电力革命！\n关键词：电灯、流水线、大规模生产\n冲击： 生产效率飙升，劳动力需求井喷，但重复性工作更多了。\n3️⃣ 第三次工业革命（20世纪末至今）——信息化革命！\n关键词：计算机、互联网、自动化\n冲击： 体力劳动进一步减少，知识工作者迎来黄金时代。\n但问题来了，信息化革命已经改变了世界，为什么还要说AI才是第三次工业革命的核心？\nAI凭啥能“封神”，成为第三次工业革命的引擎？ 1. AI让自动化从“手”进化到“脑” 过去： 工业革命让机器代替双手，但需要人来操作。 现在： AI不需要人来教，它自己能“悟性”成长。 举个栗子：\n过去流水线上的工人需要按按钮、拧螺丝，现在AI机器人不仅能拧螺丝，还能决定哪颗螺丝更耐用！\n过去程序员手写代码，现在AI可以自己写代码，甚至帮你找Bug，比你老板还严格！\n2. AI席卷行业，全面“搅局” AI不只是自动化生产，它直接改变了行业本身！\n🚗 汽车行业：自动驾驶，司机要失业？\n👨‍⚕️ 医疗行业：AI诊断，医生会下岗？\n🎨 创意行业：AI绘画、AI写作，艺术家慌不慌？\n📈 金融行业：AI量化交易，比人类交易员快100倍！\n别觉得这些只是“科幻片”，ChatGPT已经能通过律师考试，Midjourney能画出顶级插画，AI交易员已经在华尔街大杀四方！\nAI的破坏性，堪比当年的蒸汽机、流水线！\n3. AI太“便宜”，资本家疯狂买单 工业革命的核心就是更高效、更便宜，AI恰好满足所有条件：\n不加班，不请假，不要工资，24小时在线干活 可以自学，越干越聪明 一旦开发出来，复制成本趋近于0 结果？资本家一拍大腿：“人类，你下岗吧！”\n科技公司疯狂砸钱搞AI，2023年ChatGPT一发布，全球科技公司开始军备竞赛，AI成了“新时代印钞机”。\nAI时代，普通人该怎么办？ 别急着躺平，也别盲目恐慌，每一次工业革命都会淘汰旧职业，同时创造新职业。\n三大应对策略，帮你站稳AI时代！ 🔹 1. 不和AI抢饭碗，而是学会“用AI”\n程序员要会用AI写代码，而不是被AI取代 设计师要学会AI绘图，而不是害怕AI比你画得好 医生要用AI诊断提升效率，而不是排斥它 核心思维：AI不是你的对手，而是你的外挂！\n🔹 2. 选择AI难以取代的“高情商”工作\n复杂人际关系：心理咨询、谈判专家、社交达人 需要创造性：品牌策划、艺术创作、导演编剧 需要实践经验：手艺人、工程维修、医生手术 AI能做的，都会越来越便宜，人类独特的软技能才是未来竞争力！\n🔹 3. 拥抱AI，成为“AI+”人才\n未来，最值钱的不是单纯的程序员、设计师、律师，而是**“AI+”型人才：**\nAI+法律：能用AI自动整理案情的律师 AI+营销：能用AI精准推销产品的市场人 AI+教育：能用AI提高学习效率的老师 未来不是“AI取代人”，而是“会用AI的人取代不会用AI的人”！\n结语：工业革命从未停止，AI只是加速器 AI并不会让人类“退休”，但一定会逼着我们进化。\n第一次工业革命淘汰了手工业者，造就了工厂工人 第二次工业革命淘汰了手工作坊，造就了流水线工人 AI革命不会淘汰人类，而是淘汰不会用AI的人 🚀 未来已来，别再观望，快抱紧AI这条大腿吧！\n","date":"2025-01-31T11:59:56+08:00","permalink":"https://blog.yearsuns.com/p/the-third-industrial-revolution-is-now-in-full-swing/","title":"AI来了，第三次工业革命正式开卷！"},{"content":"想赚到100万？\n先搞清楚赚钱的本质——交换。\n第一步：赚钱的底层逻辑 赚钱的方式大致分为三种：\n打工：出卖时间换工资，收入受限。 复利式赚钱：一次投入，多次收益（写书、课程、短视频）。 杠杆式赚钱：雇佣他人时间，放大收益（开公司、做投资）。 想提升收入，就得提高单位时间的价值，直到你不得不花钱购买别人的时间。\n第二步：普通人如何赚100万？ 赚钱是选择大于努力，真正赚钱的路子，大多数人没见过。\n赚钱的四个关键点： 选对赛道： 80%的人在苦赚辛苦钱，20%的人在赚轻松钱。 选准行业，紧贴市场需求，钱自然流向你。 持续精进： 赚钱没有一蹴而就，一边做一边调整，越做越精准。 疯狂执行： 选定方向后别犹豫，拼尽全力。 等待运气： 你努力的时间越长，成功的概率越大。 第三步：副业到底怎么搞？ 搞副业，先思考四个问题：\n你为谁提供服务？ 你能解决什么问题？ 你的产品/服务值多少钱？ 你的竞争力是什么？ 如果不知道做什么，先去做变现能力强的赛道，比如短视频、直播、社群电商等。\n副业赚钱闭环：流量→产品→转化 流量：通过短视频、社交平台、广告吸引用户。 产品：提供有价值的内容、服务或商品。 转化：让用户愿意为你的产品买单。 副业成长路径 赚到第一块钱，建立信心。 收入与主业持平，不怕被裁员。 副业收入 5 倍于主业，考虑全职搞。 第四步：如何投资理财，让钱生钱？ 存款1000万以下的人，不建议全职投资，那是幻想。\n投资的四象限 赚钱 亏钱 简单 基金、转债 彩票 复杂 股票、套利 炒股盲目冲动 基金投资：选指数基金，拉长周期，避免追涨杀跌。 可转债：用\u0026quot;打新债\u0026quot;、\u0026ldquo;双低策略\u0026quot;来低风险获利。 套利机会： 资本市场套利：可转债折价、LOF基金套利 实体套利：抢茅台、抢演唱会门票 聪明的投资者不会和大佬抢肉吃，而是利用信息差寻找确定性收益。\n最后，如何打造你的“稳赚系统”？ 搞钱闭环： 创富：通过副业/创业获取现金流。 增富：用投资理财让钱滚钱。 选对方向，持续执行，赚钱就是信息差+执行力。 加入核心圈子，获取赚钱信息差，越早行动，越早收益。 想赚100万？\n选赛道，找到赚钱路子。 敢执行，不断优化策略。 会投资，让钱生钱。 别再等了，干就完了！\n本文是根据迟帅老师的【赚它一百万商业手册】总结而来\n","date":"2025-01-30T14:59:56+08:00","permalink":"https://blog.yearsuns.com/p/how-to-earn-your-first-million/","title":"如何赚它一百万？"},{"content":"想要一个自己的博客，省心又免费？\n试试 Hugo + GitHub Pages！只需几个步骤，就能搭建一个 高速、免费、可自动部署 的个人博客网站。\n1. 安装 Hugo Windows 用 Scoop（推荐）：\nscoop install hugo 或者直接去 Hugo 官方网站 下载。\nMac brew install hugo Linux sudo apt install hugo # Debian/Ubuntu sudo dnf install hugo # Fedora 检查是否安装成功：\nhugo version 2. 创建 Hugo 博客 hugo new site myblog cd myblog Hugo 会生成一个网站的基本目录结构。\n3. 选择并安装主题 去 Hugo Themes 找个喜欢的主题，比如 ananke，然后安装：\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke 然后编辑 config.toml：\ntheme = \u0026#34;ananke\u0026#34; baseURL = \u0026#34;https://\u0026lt;username\u0026gt;.github.io/\u0026#34; 4. 添加第一篇文章 hugo new posts/my-first-post.md 然后编辑 content/posts/my-first-post.md，加上内容：\n--- title: \u0026#34;我的第一篇博客\u0026#34; date: 2025-01-31T12:00:00+08:00 draft: false --- Hello, Hugo! 5. 本地预览 hugo server -D 然后在浏览器访问 http://localhost:1313 看效果。\n6. 发布到 GitHub （1）创建 GitHub 仓库 私有仓库：myblog-src（存源码） 公开仓库：\u0026lt;username\u0026gt;.github.io（存生成的网站文件） （2）把源码推送到私有仓库 git remote add origin https://github.com/\u0026lt;username\u0026gt;/myblog-src.git git branch -M master git add . git commit -m \u0026#34;初始化 Hugo 博客\u0026#34; git push -u origin master 7. 创建 GitHub Token（GITHUB_TOKEN） 由于我们要把生成的静态网站推送到 username.github.io 仓库，需要 GitHub Token 进行授权。\n（1）生成 Token 进入 GitHub，点击右上角头像，选择 Settings 在左侧菜单选择 Developer settings → Personal access tokens → Fine-grained tokens 点击 Generate new token，然后： Repository access 选择 Only select repositories，勾选 \u0026lt;username\u0026gt;.github.io Permissions： Contents: 选择 Read and Write 其他保持默认 点击 Generate token 复制 Token，保存到本地（只能看一次）。 （2）添加到 GitHub Actions 进入 myblog-src 仓库 打开 Settings → Secrets and variables → Actions → New repository secret Name 填写 DEPLOY_TOKEN，Value 粘贴刚才复制的 Token，点击 Add secret 8. 配置 GitHub Actions（自动部署） 在 myblog-src 仓库中，新建 .github/workflows/deploy.yml，写入：\n# Sample workflow for building and deploying a Hugo site to GitHub Pages name: Deploy Hugo site to Pages on: # Runs on pushes targeting the default branch push: branches: - master # Default to bash defaults: run: shell: bash jobs: deploy: runs-on: ubuntu-latest env: HUGO_VERSION: 0.142.0 steps: - name: Install Hugo CLI run: | wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \\ \u0026amp;\u0026amp; sudo dpkg -i ${{ runner.temp }}/hugo.deb - name: Checkout uses: actions/checkout@v4 with: submodules: recursive fetch-depth: 0 - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.BLOG_TOKEN }} EXTERNAL_REPOSITORY: \u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io PUBLISH_BRANCH: master PUBLISH_DIR: ./public commit_message: auto deploy 9. 配置 GitHub Pages 进入 \u0026lt;username\u0026gt;.github.io 仓库：\nSettings → Pages Branch 选择 master 点击 Save 10. 提交修改，自动部署！ 以后只需提交博客源码，GitHub Actions 会自动部署：\ngit add . git commit -m \u0026#34;更新文章\u0026#34; git push 稍等片刻，你的博客就会出现在：\n👉 https://\u0026lt;username\u0026gt;.github.io/\n总结 你已经成功使用 Hugo + GitHub Pages 搭建了一个 私有源码、自动部署 的个人博客！🎉\n随时写文章，推送后 自动上线，是不是超简单？💡\n🚀 快去试试吧！\n","date":"2025-01-30T14:59:56+08:00","permalink":"https://blog.yearsuns.com/p/how-to-build-a-personal-blog-with-hugo-and-github-pages/","title":"使用 Hugo + GitHub 搭建个人博客（自动部署）"}]